[
    {
        "id": "5df15275.2888ec",
        "type": "tab",
        "label": "MAIN",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b89efe2b1fe909cb",
        "type": "tab",
        "label": "devMAIN",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f6f5d41e533a8b1a",
        "type": "tab",
        "label": "FLOOR SERVICE",
        "disabled": false,
        "info": ""
    },
    {
        "id": "64c098ab57cae330",
        "type": "tab",
        "label": "FLOOR CHECK",
        "disabled": false,
        "info": ""
    },
    {
        "id": "33b4301963931e6c",
        "type": "tab",
        "label": "PANIC",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2a761808.610238",
        "type": "tab",
        "label": "TTP",
        "disabled": false,
        "info": ""
    },
    {
        "id": "5f98db3a.7ab21c",
        "type": "tab",
        "label": "API",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e089622.6a906a",
        "type": "tab",
        "label": "sand",
        "disabled": false,
        "info": ""
    },
    {
        "id": "79e296b2.11a2d8",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "1adeb6d2.0028b1",
            "174c55c9.364c72",
            "af87984e.38efa8",
            "af6bd09e.c7c798",
            "9a835f6c.6a1ab"
        ],
        "x": 2554,
        "y": 19
    },
    {
        "id": "e83aa13614517c81",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "9a0212b.22ad2f",
            "ba11b816.73cd58",
            "539b4f99.508ec8",
            "82b5feb8.b8894",
            "61f763b0.65d2b4",
            "43e93874.b7141"
        ],
        "x": 1634,
        "y": 1639,
        "w": 592,
        "h": 122
    },
    {
        "id": "f8a5c66461864831",
        "type": "group",
        "z": "5df15275.2888ec",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3f5787",
            "fill-opacity": "0.37"
        },
        "nodes": [
            "6eeb48f31cdc5453",
            "cc6dddd66c6674e8",
            "3b0849514abc86d6",
            "eebc64656127b52b",
            "b289a42dbd554719",
            "3e4dcaaa699a170c",
            "a7628168.861ce"
        ],
        "x": 54,
        "y": 59,
        "w": 792,
        "h": 122
    },
    {
        "id": "a6e4d859c0057b6f",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3f5787",
            "fill-opacity": "0.37"
        },
        "nodes": [
            "f0645618c2050fce",
            "565eaf27c4c6892e",
            "e430451f890fe527",
            "a4c3cc7bc8fa2565",
            "519959ee89f04190",
            "d952c932bb5874af",
            "c4cf96930d013efb"
        ],
        "x": 1574,
        "y": 1739
    },
    {
        "id": "586e39dc007e0cae",
        "type": "group",
        "z": "2a761808.610238",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3f5787",
            "fill-opacity": "0.37"
        },
        "nodes": [
            "2a35dba40cf875c4",
            "6900be342c7e23c4",
            "b9d560ba6b28bfe4",
            "c759fe83d1d68801",
            "1451734fb0602bf7",
            "c447c89d479e742a",
            "dd73e1c4557a5e65"
        ],
        "x": 3234,
        "y": 1499
    },
    {
        "id": "1af578fa0e07ad5a",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "20e930bc4e51c612",
            "b36749c7a3e1b3d0",
            "250d741d8a5745e6",
            "b4a4e83ed0643f2c",
            "f33e9568474183b7",
            "577c5da19353e540",
            "bf1c13c6979ef555",
            "d3749cac89a0e2c9"
        ],
        "x": 2554,
        "y": 1119
    },
    {
        "id": "7f9b2dd857a6dfb2",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "01ec9d5a0db3072d",
            "617b3f35705cc9e4",
            "a79a0e925695b95b",
            "47e93aedcfbe3a73",
            "792187aede59b6ac"
        ],
        "x": 2554,
        "y": 1239
    },
    {
        "id": "44cf135596e2716e",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "841dbfe6777b1e36",
            "2c2113e3d7c3305b",
            "12dcb7809b23d675",
            "905bf77ca38ca8b2",
            "d3e0688d41cc172c",
            "579577e08c6abb4c"
        ],
        "x": 2114,
        "y": 19,
        "w": 472,
        "h": 162
    },
    {
        "id": "b5c4460e3abcebce",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "130f3240.00961e",
            "f4452587.561d48",
            "6b7c6b19.00a204",
            "b1193833.175118",
            "efe6ca9d.d20898",
            "2ccabce5.3df754",
            "307f6fe7.76709",
            "f83aa4a.5b36658",
            "b5f725fd.240e98",
            "f6fb5868.e9bd18",
            "ec0d7b62.22bf98",
            "607a1476.9d2f3c",
            "d8222377.a5f0c",
            "f9b6f483.e38838",
            "301639c.27435c6",
            "d73dab1c.a64828",
            "8c2b136a.c18c",
            "bb1ad3fd.e2d78",
            "9a627e02.c4ed6",
            "bf190e9d.225ad"
        ],
        "x": 154,
        "y": 1699
    },
    {
        "id": "014ce62956a26f95",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "387fcf8a.76cff",
            "c985b525.212f78",
            "2bed7653.30adaa",
            "ade3bf55.b02e3",
            "9606b8d3.0957",
            "2cfa357e.60327a",
            "cc5b16dd.4820c8",
            "46152e90.390ef8",
            "df242fa3.762dc",
            "f8fb32fa.8c38e",
            "7fc0c8c6.6d262",
            "594b48ef.1a0e68",
            "8eca3137.03e0a8",
            "8af21b87.015cb",
            "90c4f7da.42c3b8",
            "ac3992bd.d4dd5",
            "72c134ed.8f07cc",
            "937d8df0.8d461",
            "d9e1bbad.d8dc4",
            "7d460277.6d43cc",
            "83dab1d2.d3929",
            "c2ee13d8.13fab8",
            "4fd27ca5.37d60c",
            "8044def5.ed945",
            "f52a6bcf.7d3728",
            "fa849ff6.802878",
            "f38ba797.bdd398",
            "f6791e2.e72656",
            "4b18cb02.0baa0c",
            "2827f6dd.5c7162",
            "5f7186a8.0ea498",
            "e5d314a7.f6825",
            "be53914b.bf62b",
            "5a624a9b.734534",
            "563d14b6.3a5db4",
            "c0b46394.7bd6e",
            "241d62c4.835d6e",
            "6f817e7d.c291c",
            "85f53fe7.0846f8",
            "9ebc7b79.d11ad8",
            "2253204.d02816",
            "874d8336.9507e",
            "56c6a73caae35c2f",
            "f5c3922ede7ca10e",
            "11245d07d29c58d7",
            "f873485fa819703f",
            "904948d9b141e76a",
            "c51f492683bd478b",
            "e99da6578187f6b1",
            "0c245c89ee18c959",
            "d82e020b5a4a47a5",
            "c8becf6bb0419135",
            "0ba1f4d05ad6d76a",
            "6250c3310b6d177b",
            "c4cfc0830f4e28bc"
        ],
        "x": 34,
        "y": 779
    },
    {
        "id": "d508da9d29e25c1b",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "eb0ebfc5.9889a",
            "6868e3af.6c4b4c",
            "6526e141.43af9",
            "eab25c49.10d9c8",
            "afaf3a2c.646c88",
            "9018737c.12e188",
            "81a608ac.0eeab8",
            "d615849.c726078",
            "04c874ce359ca023"
        ],
        "x": 34,
        "y": 639
    },
    {
        "id": "17b2eb4baaa826d1",
        "type": "group",
        "z": "2a761808.610238",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5cb78c95e9f5e431",
            "77d59427d38fd283",
            "d7c6eafcf8852e61",
            "503d53910c17c784"
        ],
        "x": 3424,
        "y": 499
    },
    {
        "id": "422e384634a8793d",
        "type": "group",
        "z": "5df15275.2888ec",
        "name": "Расчёт МА",
        "style": {
            "label": true
        },
        "nodes": [
            "d0265ad83b72f060",
            "55cdeaeec842ce3d",
            "400760a195d1bbab",
            "8686597324b188ac",
            "698a84fcef79c165",
            "2bb16b5c84c65822",
            "80f8ee4855b60755",
            "5e3edac3f8d7b5e6",
            "098806a63c0b488e",
            "7b66467d81ab2834",
            "eb82ec0d8388d754",
            "a7cb1741d2b70005",
            "76ccec41af84b9dd",
            "2b846e417fd20188",
            "94c9271545c13b40"
        ],
        "x": 54,
        "y": 719,
        "w": 1892,
        "h": 162
    },
    {
        "id": "814fe3ad47c48a59",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "180bacca6db5568a",
            "0455a9fa615aae17",
            "bace2b04002a3f4b",
            "683b485facec8d47",
            "56b6e820a4625a55",
            "854a26d7e2200af1",
            "9f766ac1e94864ba",
            "7b940e6ce5fb40c7",
            "f87e06e98b0d7917",
            "b082667c299cc83e",
            "c3754613797a5259",
            "f8cd782d3223fa1e",
            "907b2cc664741e24",
            "09ccb3a61ebb95eb",
            "d81b89b8431c5219",
            "286f7ee0bb73b702",
            "9a90af117cd916e1",
            "7a19b1d6c330e11b",
            "12cdc134f2944261",
            "a37ec54854f75f01",
            "b8dd96d5d9b54edd",
            "642ebd6d0bd5aa4a",
            "aee34947d1368921",
            "d05ba51a646b7a75",
            "567fc913a071b7ce",
            "653d2c0d1c651d4f",
            "6c2d5763735d054d",
            "b81dcd4ee6e797ca"
        ],
        "x": -6,
        "y": 219,
        "w": 3662,
        "h": 222
    },
    {
        "id": "65ceb63d19a93d0f",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "efa132132a7fa5d7",
            "8e747d7d4ec5b050",
            "f5fcc7414475be12",
            "1719022f8617153c",
            "c4ba62796dfec943",
            "64dc395af95431e1",
            "28fda303e5196ddd",
            "a1d4c1c74be64298"
        ],
        "x": 884,
        "y": 59,
        "w": 722,
        "h": 122
    },
    {
        "id": "251a240e36b31c14",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "71d59fd5323329d0",
            "a98eccc2c1f43b19",
            "1acc76a1e7049e58",
            "8a2855df7069c19f",
            "c63e2cc4400d40fe",
            "355607853c06794c",
            "6274a170dc04552c"
        ],
        "x": 1794,
        "y": 919,
        "w": 632,
        "h": 202
    },
    {
        "id": "a098ebd7bc13168a",
        "type": "group",
        "z": "5df15275.2888ec",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3f5787",
            "fill-opacity": "0.37"
        },
        "nodes": [
            "5070868516664aaf",
            "a08f9141c62654e1",
            "d63773780bfc4198",
            "7e46c841715cf18c",
            "58fac5195edfed79",
            "8718a0313e781582",
            "58c7424d21936ed2"
        ],
        "x": 274,
        "y": 3099,
        "w": 792,
        "h": 122
    },
    {
        "id": "47ccdad2d228ed4b",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "387619c36681b3e5",
            "6d9b202399150652",
            "87d33f4cea444d76",
            "0c6bcd5098091952",
            "dcae1864d2517dea",
            "37b3719a56b8b85e",
            "a6fa4338d0263379",
            "cea8b787784f06b7",
            "b64d6fbb9005a4ce",
            "15ea84929ccca7e8",
            "41fb2f2310eb3509",
            "98795c7b07c3c6cc",
            "bdcfd843493d6dda",
            "aff2e0df221f4a3e",
            "bb7bcb6c571572bb",
            "c80bf4b14fe4742e"
        ],
        "x": 74,
        "y": 919,
        "w": 1682,
        "h": 202
    },
    {
        "id": "c723fa7827c597d2",
        "type": "group",
        "z": "64c098ab57cae330",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3f5787",
            "fill-opacity": "0.37"
        },
        "nodes": [
            "02bfaff19623e58c",
            "108d162050f2bedb",
            "692c5e5bb70e41c4",
            "9a1bc6c73bf93cea",
            "5f58ba037a88ad40",
            "b1e85c33253a7bc1",
            "2f83bb2fab63d1bd"
        ],
        "x": 1114,
        "y": 1119
    },
    {
        "id": "666006aaa2e325fc",
        "type": "group",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3f5787",
            "fill-opacity": "0.37"
        },
        "nodes": [
            "2557b87adbaa7798",
            "72b2337126188c59",
            "f098d607e8496579",
            "97b5e1ee8ca22c3b",
            "368ab34e94865c42",
            "b5d09701ed5f5d6d",
            "7fad8acded27ae4f"
        ],
        "x": 1114,
        "y": 1179
    },
    {
        "id": "2044fa36820f41ee",
        "type": "group",
        "z": "2a761808.610238",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5439d7c0b172fac9",
            "6bf31a93727ebe85",
            "ee5baed57022e2b9",
            "eaeb53af2f0c10d4",
            "806f4e430374bace",
            "3520419ec219563a"
        ],
        "x": 1854,
        "y": 119
    },
    {
        "id": "55e30606c2e4a038",
        "type": "group",
        "z": "2a761808.610238",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "deb38cfe50913a6c",
            "e2e400f68ab5c544",
            "535ef5733e21adba",
            "83c16a0c1d53cfa5",
            "f45609671f7e9784",
            "320b0c3883a1e8fd",
            "e734327368dcf9d0",
            "1ac8f5624eae6a21",
            "d90a37138c4b882a",
            "53ab7852d77b30f0",
            "da2c372e624784bb",
            "b6388dc088be5a20",
            "79d602de7809868d",
            "91d64739279d42f5",
            "c4b2d72375018faa",
            "9dd325838189682e",
            "27a31f448914945b",
            "3aa78e92fd51af7b"
        ],
        "x": 74,
        "y": 59
    },
    {
        "id": "73c30bbe5f45e91f",
        "type": "group",
        "z": "2a761808.610238",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3f5787",
            "fill-opacity": "0.37"
        },
        "nodes": [
            "7b937af3a1325b74",
            "fb4ce2a47470c9f5",
            "6a9ccb5eb1509a61",
            "fcbdfc36756b7f7c",
            "f1e97b24b6e7bc2d",
            "b18736f457585989",
            "ca72074c8d540aae"
        ],
        "x": 714,
        "y": 319
    },
    {
        "id": "4b5621a5daf6eb8e",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "41fc95c9cb2c3b5c",
            "f48c67924929692e",
            "d518ad315a4638e0",
            "3878d6f90ee19f79",
            "26218d3cb1810007",
            "14eb54fb95edf5f2",
            "cb21eeee8bf63c16",
            "60490b1d8f670554",
            "37cac379d5fbf6c4",
            "c4b26fb79a2daa5e",
            "699432d934559763",
            "41aa253a481d040d",
            "8e3d1b1557736b15",
            "3f37fb0637f78e15",
            "6c631338f38f4a53",
            "871e29f2da9b6656",
            "bf333c66bc20e77f",
            "28adb87a291e95d6",
            "6edb1398e9f20d80",
            "035d2308e8f612cb",
            "9540463a0607bccd",
            "33f2b93ae8d315c4",
            "85893390bea0fc91",
            "b2784332410b0273",
            "371a0062c65d9bd9",
            "9217cb3df360d0a4",
            "af843f8c5aec7d33",
            "c29cb281b2d54456",
            "e681279a23d56ae3",
            "7213180bb142a85e",
            "a4938af49eb2fcc1",
            "a893c89e459b32b2",
            "9edee8174b84386e",
            "13ad98b8ecd2464f",
            "9a2840420c57f1f3"
        ],
        "x": 154,
        "y": 2019,
        "w": 2182,
        "h": 562
    },
    {
        "id": "f6ba3116da1e0f10",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "21cd38c62816a61a",
            "bc33c7343d313967",
            "187dac154381e841",
            "4459c9f4d6a83a36",
            "869be0a90b76a3ef"
        ],
        "x": 2554,
        "y": 219
    },
    {
        "id": "048120318edbeca7",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "91002369b1074d75",
            "54bc231adc5891e5",
            "38c8c689cb5c0e28",
            "85a473180350d074",
            "caa36ec009038d1a",
            "cc432a8e0784b0f9",
            "2e7a67404d21442a",
            "3cbc407f58d45bb0",
            "5b61de68b494bd33",
            "a2ef331bd08c5903",
            "ebd3770efa8b27af",
            "33d2dd1688f92679",
            "b58eea72b93f13de",
            "681d5081aa7276f4",
            "2d034a3b4969d69c",
            "f8e441b5bf25d02b",
            "e9fba05140f9c559",
            "68780f4ed6394507",
            "49e45671dc6dde59",
            "806473f046ac801f",
            "562ff39eb84e69fd",
            "b1df2d40528537c1",
            "fae5e5360b112e39",
            "f8b6987bf7dab58f",
            "0b70f554344ed103",
            "43ed2206ae8dbe66",
            "1a76aa7a7ff5c2e2",
            "546128bed7ba8244",
            "2f4c3485729e3440",
            "bd67d9792381b2eb",
            "f9f577d0da59868f",
            "2e77778de767d2d9",
            "a667c0dd847aa312",
            "0f30e83273a11e5c",
            "4f05bd668da083ff",
            "9b5160469297046a",
            "d7b39504af93e7f7",
            "5e752f84c84031eb",
            "6d62a92d5a53f020",
            "2b18414b4a3f8aaa",
            "0675cf14e1c40b79",
            "52bb7aacce10da86",
            "a598cf9306306929",
            "477b9f3956393f39",
            "e1d84a73e7e74924",
            "2969e077aef97f77",
            "ad0d7275ea85d9e2",
            "c4eb37e84cd37624",
            "09fab8f34f7dea3e",
            "c291578025a7dac7",
            "76ef8aef545938d7",
            "8421b42ef331902b",
            "2e12580400f01cb0",
            "88be5d43e25bbab5",
            "796a325983588e67",
            "a1d26aa75b137aa5",
            "c16073e365380562",
            "72a4bee8563f2952",
            "f2f3669acc5a1967",
            "54197cf454887ecb"
        ],
        "x": 28,
        "y": 33
    },
    {
        "id": "2c85add4d80ea7f8",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "6edabced39e8ae30",
            "0f71f73828a4d664",
            "f2b2077b7903a0bf",
            "311b7e3067324369",
            "602633b1b264725c",
            "2499d9cd6bd8b55b",
            "a18bcf73d30443dd"
        ],
        "x": 2554,
        "y": 1419
    },
    {
        "id": "a515f6f54037387e",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "25e6c65f2f6568ee",
            "8e32192ecced4af9",
            "d252aac0e03336f6",
            "cac2d5e9466e8f59",
            "46931deb362dccab",
            "eb94008bbe99e1a5",
            "fc532f8a3c02ad09",
            "68c731b8655af003",
            "3c54d00c2b5d1331",
            "9ed4d5038250d1db",
            "f934e581f21edc8d",
            "2a35df248651359d",
            "ce20d0a5a42d71b8",
            "16f60c9e05c72bee",
            "1e7fa667be4955e4",
            "c9f367c4c3c3a340",
            "68f426595975577a",
            "880c05f45c81c65f",
            "f4dd7d500c4c6287",
            "e5b3f65c64087091",
            "1b0a7ba8e33f06b7"
        ],
        "x": 2554,
        "y": 599
    },
    {
        "id": "f68e039ff73498a8",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "12956f0cc39cecca",
            "11a4d1c2a44c2e16",
            "afd3deeae4d81bc8",
            "f1795e2079ad790a",
            "e54f6abd7ef3a04a",
            "a2fba486886cf22e",
            "b8a5c62032bf8a3a",
            "43efea3d8f426bec",
            "2c8bdda9aab7d259",
            "aff96d6cd010b51b",
            "a96ba302000af312",
            "5944b81ec7e464fc",
            "7cb62ba82bd10479",
            "a968529fa548aff7",
            "f3d9f7caf8eb7213",
            "bb31b6f014975fd6",
            "f2d22858e4a7c429",
            "26f6329ebf714e14",
            "9f0a5643b5b416e8",
            "8aa6fd668c527afd",
            "48599bd8f32987bc",
            "ff9752e81f4c15f8",
            "9767b09975ad71d4"
        ],
        "x": 2494,
        "y": 1599
    },
    {
        "id": "3eb02193332f12bf",
        "type": "group",
        "z": "b89efe2b1fe909cb",
        "name": "",
        "style": {
            "label": true,
            "fill": "#3f5787",
            "fill-opacity": "0.37"
        },
        "nodes": [
            "612afd6e7357c83c",
            "d91519a58a8c207d",
            "cb5d9749197b77cb",
            "49c2385c498a19b0",
            "7cd9eafcc8ebd4e1",
            "b82d786610a88e2a",
            "5b7bb9d6beb5e5a8"
        ],
        "x": 1014,
        "y": 899,
        "w": 792,
        "h": 122
    },
    {
        "id": "6d2ff214f4cce1f5",
        "type": "group",
        "z": "5df15275.2888ec",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "609cc624a17035cc",
            "fa047338376edb73",
            "4c8f8970046d18c2",
            "647afba13757c62f",
            "3681e9fb3923ac70",
            "9ce530e3f78fd37b",
            "4244bd5b74ba70e9",
            "a3297522d90a836e",
            "0d9992895001e1dd",
            "54c0b4aaa6901001",
            "8a207f5ce11470c2",
            "6bbfe5924449adc4",
            "b7adcbaf8bf534c7",
            "e020264e534bd10f",
            "152cccd4ded51aed",
            "b57bc4758e270b33",
            "c58d7b2a4583c819",
            "b08ade8a215c1ac6",
            "e61fb63cc51ecf7b",
            "8afd1f55086955c7",
            "5b558081f66acb32",
            "35158053d0f5b216",
            "3a408942189cd261",
            "7b6c884e840b62d8",
            "e04dadffe51e86f0",
            "3c98f7c8f5b03c16",
            "719516716fd02709",
            "2dc6fb306ffaf8ae",
            "8602261aa2a7c90e",
            "f3436c1fdc5c6566",
            "f68065af5fc2c804",
            "41aa97ed31b0f3eb",
            "a1449b6ef8258e68",
            "a43d8ab136391cb3",
            "7ca70cad7c1b8ea9"
        ],
        "x": 2554,
        "y": 2079,
        "w": 2182,
        "h": 562
    },
    {
        "id": "54197cf454887ecb",
        "type": "group",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "8d14f5fc3845adff",
            "6a1466a03b9d3d55",
            "a0695b5f57215c9a",
            "5c90fc22745f5191",
            "9cca35f02ce4d817",
            "bfb1e76b54a7b1fb",
            "ddc7f34243674b87",
            "96bdef7048780d35"
        ],
        "x": 54,
        "y": 59
    },
    {
        "id": "3b0abdc7dbed87d7",
        "type": "group",
        "z": "b89efe2b1fe909cb",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "df8949bac971e658",
            "dc2aeff7a359f934",
            "c1b1c62e6b0f4e2a",
            "5f4515f84461838f",
            "f09138c9d7915de9",
            "a36d19b4ca26282e",
            "32a0c5684062bd5e",
            "f8727ffca66ea75d"
        ],
        "x": 94,
        "y": 1139,
        "w": 732,
        "h": 242
    },
    {
        "id": "f120eab2.0a60a8",
        "type": "redis-config",
        "name": "redis:6379",
        "options": "redis://:YzRAdGgkFg@redis:6379",
        "cluster": false,
        "optionsType": "str"
    },
    {
        "id": "acbee441.8c1e1",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "7eefe30b.94c464",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "true",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "261e447.e94ad3c",
        "type": "ui_group",
        "name": "work mode",
        "tab": "acbee441.8c1e1",
        "order": 2,
        "disp": true,
        "width": "4",
        "collapse": false
    },
    {
        "id": "f244fee6.d2627",
        "type": "ui_group",
        "name": "duration ",
        "tab": "acbee441.8c1e1",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "30996d79e1bf9955",
        "type": "memory-queue",
        "name": "qu-main",
        "size": "5",
        "discard": true
    },
    {
        "id": "b0cef4ea50b252b0",
        "type": "memory-queue",
        "name": "qu-ttp",
        "size": "5",
        "discard": true
    },
    {
        "id": "a504dfae3584b3f9",
        "type": "memory-queue",
        "name": "qu-candle",
        "size": "100",
        "discard": false
    },
    {
        "id": "a7628168.861ce",
        "type": "redis-instance",
        "z": "5df15275.2888ec",
        "g": "f8a5c66461864831",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 770,
        "y": 120,
        "wires": []
    },
    {
        "id": "9a0212b.22ad2f",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "e83aa13614517c81",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2150,
        "y": 1680,
        "wires": [
            [
                "ba11b816.73cd58"
            ]
        ]
    },
    {
        "id": "ba11b816.73cd58",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "e83aa13614517c81",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 2150,
        "y": 1720,
        "wires": []
    },
    {
        "id": "539b4f99.508ec8",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "e83aa13614517c81",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 1730,
        "y": 1680,
        "wires": [
            [
                "82b5feb8.b8894"
            ]
        ]
    },
    {
        "id": "82b5feb8.b8894",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "e83aa13614517c81",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 1730,
        "y": 1720,
        "wires": []
    },
    {
        "id": "61f763b0.65d2b4",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "e83aa13614517c81",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1910,
        "y": 1680,
        "wires": [
            [
                "43e93874.b7141"
            ]
        ]
    },
    {
        "id": "43e93874.b7141",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "e83aa13614517c81",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 1910,
        "y": 1720,
        "wires": []
    },
    {
        "id": "6eeb48f31cdc5453",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "f8a5c66461864831",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 570,
        "y": 100,
        "wires": [
            [
                "cc6dddd66c6674e8"
            ]
        ]
    },
    {
        "id": "cc6dddd66c6674e8",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "f8a5c66461864831",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 570,
        "y": 140,
        "wires": []
    },
    {
        "id": "3b0849514abc86d6",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "f8a5c66461864831",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "eebc64656127b52b"
            ]
        ]
    },
    {
        "id": "eebc64656127b52b",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "f8a5c66461864831",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 150,
        "y": 140,
        "wires": []
    },
    {
        "id": "b289a42dbd554719",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "f8a5c66461864831",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 100,
        "wires": [
            [
                "3e4dcaaa699a170c"
            ]
        ]
    },
    {
        "id": "3e4dcaaa699a170c",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "f8a5c66461864831",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 330,
        "y": 140,
        "wires": []
    },
    {
        "id": "841dbfe6777b1e36",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "44cf135596e2716e",
        "name": "0.015",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.01",
        "topic": "",
        "payloadType": "date",
        "x": 2210,
        "y": 100,
        "wires": [
            [
                "2c2113e3d7c3305b"
            ]
        ]
    },
    {
        "id": "2c2113e3d7c3305b",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "44cf135596e2716e",
        "name": "global.set(\"commision\", 0.075)",
        "func": "global.set(\"commision\", 0.075);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "12dcb7809b23d675",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "44cf135596e2716e",
        "name": "detail",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.01",
        "topic": "",
        "payload": "detail",
        "payloadType": "str",
        "x": 2210,
        "y": 140,
        "wires": [
            [
                "905bf77ca38ca8b2"
            ]
        ]
    },
    {
        "id": "905bf77ca38ca8b2",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "44cf135596e2716e",
        "name": "global.set(\"logmode\", \"detail\");",
        "func": "global.set(\"logmode\", \"detail\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d3e0688d41cc172c",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "44cf135596e2716e",
        "name": "get env",
        "func": "let guid = env.get(\"GOOGLEUID\");\nglobal.set(\"guid\", guid);\n\n//let botlistname = guid + \"-botlist\";\n//global.set(botlistname, []);\n\nlet key = env.get(\"BINANCEKEY\");\nlet secret = env.get(\"BINANCESECRET\");\nglobal.set(\"key\", key);\nglobal.set(\"secret\", secret);\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2380,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "579577e08c6abb4c",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "44cf135596e2716e",
        "name": "onLoad",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.01",
        "topic": "",
        "payloadType": "date",
        "x": 2220,
        "y": 60,
        "wires": [
            [
                "d3e0688d41cc172c"
            ]
        ]
    },
    {
        "id": "180bacca6db5568a",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "getbotlist from redis",
        "func": "let guid = env.get(\"GOOGLEUID\");\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n\n    msg.payload = gbl;\n\n    global.set('botlist',JSON.parse(gbl));\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 280,
        "wires": [
            [
                "0455a9fa615aae17"
            ]
        ]
    },
    {
        "id": "0455a9fa615aae17",
        "type": "json",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 590,
        "y": 280,
        "wires": [
            [
                "bace2b04002a3f4b"
            ]
        ]
    },
    {
        "id": "bace2b04002a3f4b",
        "type": "split",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 730,
        "y": 280,
        "wires": [
            [
                "683b485facec8d47"
            ]
        ]
    },
    {
        "id": "683b485facec8d47",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "getbot_settings",
        "func": "msg.botname = msg.payload;\nlet bot = {};\nmsg.bot = bot;\nconst gb = global.get('getbot_settings')(msg.botname);\n\ngb.then(gb => {\n\n    msg.bot.settings = JSON.parse(gb);\n\n    global.set(msg.botname + \"-settings\", msg.bot.settings);\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.done();\n    node.send(msg);\n\n}).catch(error => {\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 280,
        "wires": [
            [
                "56b6e820a4625a55"
            ]
        ]
    },
    {
        "id": "56b6e820a4625a55",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "getbot_status",
        "func": "\nconst gb = global.get('getbot_status')(msg.botname);\n\ngb.then(gb => {\n\n    msg.bot.status = JSON.parse(gb);\n    \n    global.set(msg.botname + \"-status\", msg.bot.status);\n    node.done();\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 280,
        "wires": [
            [
                "854a26d7e2200af1"
            ]
        ]
    },
    {
        "id": "854a26d7e2200af1",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "getbot_data",
        "func": "\n\nlet botname = msg.botname;\n\nconst gb = global.get('getbot_data')(botname);\n\ngb.then(gb => {\n    //node.warn(gb);\n\n    let bot = {\n        ...msg.bot,\n        \"floors\": JSON.parse(gb.floors),\n        \"finance\": JSON.parse(gb.finance),\n        \"sales\": JSON.parse(gb.sales)\n    };\n    let data = {\n        \"floors\": JSON.parse(gb.floors),\n        \"finance\": JSON.parse(gb.finance),\n        \"sales\": JSON.parse(gb.sales)\n    };\n\n    msg.bot = bot;\n    global.set(msg.botname + \"-data\", data);\n    node.done();\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 280,
        "wires": [
            [
                "9f766ac1e94864ba"
            ]
        ]
    },
    {
        "id": "9f766ac1e94864ba",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "getbot_ttp",
        "func": "\nconst gb = global.get('getbot_ttp')(msg.botname);\n\ngb.then(gb => {\n    msg.bot.ttp = JSON.parse(gb);\n\n    global.set(msg.botname + \"-ttp\", msg.bot.ttp);\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    node.send(msg);\n\n}).catch(error => {\n    \n    \n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 280,
        "wires": [
            [
                "f87e06e98b0d7917"
            ]
        ]
    },
    {
        "id": "7b940e6ce5fb40c7",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "start onload",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 280,
        "wires": [
            [
                "180bacca6db5568a",
                "b8dd96d5d9b54edd",
                "aee34947d1368921"
            ]
        ]
    },
    {
        "id": "f87e06e98b0d7917",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "getbot_onoff",
        "func": "const gb = global.get('getbot_onoff')(msg.botname);\n\ngb.then(gb => {\n\n    msg.bot.onoff = JSON.parse(gb);\n\n    global.set(msg.botname + \"-onoff\", msg.bot.onoff);\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 280,
        "wires": [
            [
                "d05ba51a646b7a75"
            ]
        ]
    },
    {
        "id": "d0265ad83b72f060",
        "type": "trigger",
        "z": "5df15275.2888ec",
        "g": "422e384634a8793d",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-10",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 530,
        "y": 780,
        "wires": [
            [
                "80f8ee4855b60755"
            ]
        ]
    },
    {
        "id": "55cdeaeec842ce3d",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "422e384634a8793d",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 840,
        "wires": [
            [
                "400760a195d1bbab"
            ]
        ]
    },
    {
        "id": "400760a195d1bbab",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "422e384634a8793d",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 840,
        "wires": [
            [
                "d0265ad83b72f060"
            ]
        ]
    },
    {
        "id": "8686597324b188ac",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "422e384634a8793d",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 780,
        "wires": [
            [
                "698a84fcef79c165"
            ]
        ]
    },
    {
        "id": "698a84fcef79c165",
        "type": "delay",
        "z": "5df15275.2888ec",
        "g": "422e384634a8793d",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 780,
        "wires": [
            [
                "d0265ad83b72f060"
            ]
        ]
    },
    {
        "id": "2bb16b5c84c65822",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "422e384634a8793d",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 490,
        "y": 840,
        "wires": [
            [
                "7b66467d81ab2834"
            ]
        ]
    },
    {
        "id": "80f8ee4855b60755",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "422e384634a8793d",
        "name": "getbotlist",
        "func": "\nmsg.payload = global.get(\"botlist\");\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 780,
        "wires": [
            [
                "5e3edac3f8d7b5e6"
            ]
        ]
    },
    {
        "id": "5e3edac3f8d7b5e6",
        "type": "split",
        "z": "5df15275.2888ec",
        "g": "422e384634a8793d",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 780,
        "wires": [
            [
                "098806a63c0b488e"
            ]
        ]
    },
    {
        "id": "098806a63c0b488e",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "422e384634a8793d",
        "name": "getbot ",
        "func": "\nmsg.botname = msg.payload;\nmsg.bot = {};\nmsg.bot.settings = global.get(msg.botname + \"-settings\");\nmsg.bot.status = global.get(msg.botname + \"-status\");\nmsg.bot.onoff = global.get(msg.botname + \"-onoff\");\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 780,
        "wires": [
            [
                "eb82ec0d8388d754"
            ]
        ]
    },
    {
        "id": "b082667c299cc83e",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "get candlestick",
        "func": "\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */ }\n  }\n  return \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n  APIKEY: key,\n  APISECRET: secret,\n  \"reconnect\": false\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet deep = Number(msg.bot.settings.ma2);\n\n//node.warn(binance);\n\n\n//msg.payload = \"qjson.status\";\n\nbinance.useServerTime(function () {\n  binance.candlesticks(moneta, \"1m\", (error, ticks, symbol) => {\n    // console.info(\"candlesticks()\", ticks);\n    // let last_tick = ticks[ticks.length - 1];\n    // let [time, open, high, low, close, volume, closeTime, assetVolume, trades, buyBaseVolume, buyAssetVolume, ignored] = ticks;\n    //console.info(symbol+\" last close: \"+close);\n    if (error) {\n      var errorMsg = parseApiError(error) + \", moneta:\" + moneta;\n      node.error(errorMsg, msg);\n\n      msg.err = error;\n      node.status({ fill: \"red\", shape: \"dot\", text: errorMsg });\n\n      node.send(msg);\n      //return [msg, null];\n\n    }\n\n    msg.payload = ticks;\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n    //return;\n\n  }, { limit: deep });\n\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "gBinance",
                "module": "node-binance-api"
            }
        ],
        "x": 2000,
        "y": 360,
        "wires": [
            [
                "f8cd782d3223fa1e"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "c3754613797a5259",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "расчет и запись MA flow.set",
        "func": "\n\nlet candles = msg.payload;\n\n\nlet heiken = candles.map(function(tick){\n  //  node.warn(tick);\n    \n    \n    return (Number(tick[1]) + Number(tick[2]) + Number(tick[3]) + Number(tick[4]))/4;\n});\n\n\n//node.warn(heiken);\nmsg.heiken = heiken;\n\n\nlet heiken_small = heiken.slice(-msg.bot.settings.ma1);\n\n//node.warn(heiken_small);\nlet sum_all = heiken.reduce(function(sum, current) {\n  return sum + current\n});\n\nlet sum_small = heiken_small.reduce(function(sum, current) {\n  return sum + current\n});\n\nmsg.bot.status.sr_ma_big = sum_all / msg.bot.settings.ma2;\nmsg.bot.status.sr_ma_small = sum_small / msg.bot.settings.ma1;\n\nlet volname = msg.bot.settings.botname + \"-MA-big\";\nflow.set(volname, msg.bot.status.sr_ma_big);\n\nlet volname2 = msg.bot.settings.botname + \"-MA-small\";\nflow.set(volname2, msg.bot.status.sr_ma_small);\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 260,
        "wires": [
            [
                "d81b89b8431c5219"
            ]
        ]
    },
    {
        "id": "7b66467d81ab2834",
        "type": "delay",
        "z": "5df15275.2888ec",
        "g": "422e384634a8793d",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 840,
        "wires": [
            [
                "80f8ee4855b60755"
            ]
        ]
    },
    {
        "id": "387619c36681b3e5",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "name": "Старт трека",
        "info": "",
        "x": 170,
        "y": 960,
        "wires": []
    },
    {
        "id": "6d9b202399150652",
        "type": "trigger",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 520,
        "y": 1020,
        "wires": [
            [
                "41fb2f2310eb3509"
            ]
        ]
    },
    {
        "id": "87d33f4cea444d76",
        "type": "delay",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 1020,
        "wires": [
            [
                "6d9b202399150652"
            ]
        ]
    },
    {
        "id": "0c6bcd5098091952",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "name": "stop",
        "func": "let botname = \"syslog.txt\";\nlet data = \"Стоп\";\nconst syslog = global.get('tilog')(botname,data);\nsyslog;\n        \n\n        \nmsg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1080,
        "wires": [
            [
                "6d9b202399150652"
            ]
        ]
    },
    {
        "id": "dcae1864d2517dea",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 150,
        "y": 1080,
        "wires": [
            [
                "0c6bcd5098091952"
            ]
        ]
    },
    {
        "id": "37b3719a56b8b85e",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 150,
        "y": 1020,
        "wires": [
            [
                "87d33f4cea444d76",
                "b64d6fbb9005a4ce"
            ]
        ]
    },
    {
        "id": "a6fa4338d0263379",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 570,
        "y": 960,
        "wires": [
            [
                "41fb2f2310eb3509"
            ]
        ]
    },
    {
        "id": "cea8b787784f06b7",
        "type": "filter",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "name": "filter off",
        "property": "bot.onoff",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1200,
        "y": 1020,
        "wires": [
            [
                "bdcfd843493d6dda"
            ]
        ]
    },
    {
        "id": "b64d6fbb9005a4ce",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "name": "syslog",
        "func": "let botname = \"syslog.txt\";\nlet data = \" \\n \\n Старт\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "15ea84929ccca7e8",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "name": "syslog",
        "func": "let botname = \"syslog.txt\";\nlet data = \"Стоп\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "41fb2f2310eb3509",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "name": "getbotlist",
        "func": "msg.payload = global.get(\"botlist\");\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1020,
        "wires": [
            [
                "98795c7b07c3c6cc"
            ]
        ]
    },
    {
        "id": "98795c7b07c3c6cc",
        "type": "split",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 1020,
        "wires": [
            [
                "a6ce0324bb76ac94",
                "bb7bcb6c571572bb"
            ]
        ]
    },
    {
        "id": "f8cd782d3223fa1e",
        "type": "switch",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "try second",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2210,
        "y": 360,
        "wires": [
            [
                "c3754613797a5259",
                "567fc913a071b7ce"
            ],
            [
                "907b2cc664741e24",
                "6c2d5763735d054d"
            ]
        ]
    },
    {
        "id": "907b2cc664741e24",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2610,
        "y": 380,
        "wires": []
    },
    {
        "id": "042f3914a0a15bd1",
        "type": "trigger",
        "z": "5df15275.2888ec",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 520,
        "y": 460,
        "wires": [
            [
                "5f90fe219f3162fa"
            ]
        ]
    },
    {
        "id": "7c67107cf032f617",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 540,
        "wires": [
            [
                "62dbb0111ba3a832"
            ]
        ]
    },
    {
        "id": "62dbb0111ba3a832",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 520,
        "wires": [
            [
                "042f3914a0a15bd1",
                "6407a990a596d253"
            ]
        ]
    },
    {
        "id": "eeaeeab96ef014a9",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 130,
        "y": 460,
        "wires": [
            [
                "0ec009c807fdf6b6"
            ]
        ]
    },
    {
        "id": "0ec009c807fdf6b6",
        "type": "delay",
        "z": "5df15275.2888ec",
        "name": "",
        "pauseType": "delay",
        "timeout": "4",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 280,
        "y": 460,
        "wires": [
            [
                "042f3914a0a15bd1",
                "6407a990a596d253"
            ]
        ]
    },
    {
        "id": "dd6e8b7c3cd4bd8f",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 490,
        "y": 520,
        "wires": [
            [
                "20e5dbec70a2054f"
            ]
        ]
    },
    {
        "id": "5f90fe219f3162fa",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbotlist",
        "func": "msg.payload = global.get(\"botlist\");\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 460,
        "wires": [
            [
                "ce5d5670a383e6ea",
                "823a50182e5deb94"
            ]
        ]
    },
    {
        "id": "ce5d5670a383e6ea",
        "type": "split",
        "z": "5df15275.2888ec",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 460,
        "wires": [
            [
                "449d486fe59111a1"
            ]
        ]
    },
    {
        "id": "449d486fe59111a1",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getbot ",
        "func": "\nmsg.botname = msg.payload;\nmsg.bot = {};\nmsg.bot.settings = global.get(msg.botname + \"-settings\");\nmsg.bot.ttp = global.get(msg.botname + \"-ttp\");\nmsg.bot.data = global.get(msg.botname + \"-data\");\nmsg.bot.status = global.get(msg.botname + \"-status\");\nmsg.bot.onoff = global.get(msg.botname + \"-onoff\");\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 460,
        "wires": [
            [
                "c507a34417416492"
            ]
        ]
    },
    {
        "id": "20e5dbec70a2054f",
        "type": "delay",
        "z": "5df15275.2888ec",
        "name": "",
        "pauseType": "delay",
        "timeout": "50",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 650,
        "y": 520,
        "wires": [
            [
                "5f90fe219f3162fa"
            ]
        ]
    },
    {
        "id": "b71ccac226cfd352",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_data to redis",
        "func": "\nlet volname = msg.bot.settings.userid + \"-bots:\" + msg.botname + \":data\";\nlet botdata = {\n    \"finance\": JSON.stringify(msg.bot.data.finance),\n    \"floors\": JSON.stringify(msg.bot.data.floors),\n    \"sales\": JSON.stringify(msg.bot.data.sales)\n\n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n    node.done();\n    node.status({ fill: \"green\", shape: \"ring\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "9ed590fb177c65fa",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_ttp to redis",
        "func": "\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.botname + \":ttp\";\nmsg.payload = JSON.stringify(msg.bot.ttp);\n\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\nupd.then(upd => {\n    msg.payload = upd;\n    node.done();\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "09ccb3a61ebb95eb",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "сброс счетчиков busy",
        "func": "//сброс счетчиков busy\nflow.set(msg.botname, 0);\nflow.set(msg.botname + \"-ttp\", 0);\nmsg.bot.busy = false;\nmsg.bot.ttp.ttpbusy = false;\n\nglobal.set(msg.botname + \"-busy\", msg.bot.busy);\nglobal.set(msg.botname + \"-ttpbusy\", msg.bot.ttp.ttpbusy);\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3330,
        "y": 260,
        "wires": [
            [
                "7a19b1d6c330e11b",
                "a37ec54854f75f01"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "568bf479a68ab1cd",
        "type": "comment",
        "z": "5df15275.2888ec",
        "name": "",
        "info": "",
        "x": 1780,
        "y": 100,
        "wires": []
    },
    {
        "id": "efa132132a7fa5d7",
        "type": "link in",
        "z": "5df15275.2888ec",
        "g": "65ceb63d19a93d0f",
        "name": "",
        "links": [
            "f937bdc295f372a8",
            "a98eccc2c1f43b19",
            "37bbf599414e2577"
        ],
        "x": 1175,
        "y": 140,
        "wires": [
            [
                "8e747d7d4ec5b050"
            ]
        ]
    },
    {
        "id": "8e747d7d4ec5b050",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "65ceb63d19a93d0f",
        "name": "tester___",
        "func": "let trackname = msg.trackname;\nflow.set(trackname);\nnode.status({fill: \"green\", shape: \"ring\", text: msg.payload});   \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "f5fcc7414475be12",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "65ceb63d19a93d0f",
        "name": "main track",
        "info": "",
        "x": 1220,
        "y": 100,
        "wires": []
    },
    {
        "id": "1719022f8617153c",
        "type": "link in",
        "z": "5df15275.2888ec",
        "g": "65ceb63d19a93d0f",
        "name": "meter ttp",
        "links": [
            "365e54e1b5c77315",
            "47155355f2403ac8",
            "493e13639b3ed804",
            "6bf31a93727ebe85"
        ],
        "x": 1425,
        "y": 140,
        "wires": [
            [
                "c4ba62796dfec943"
            ]
        ]
    },
    {
        "id": "c4ba62796dfec943",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "65ceb63d19a93d0f",
        "name": "tester___",
        "func": "\nnode.status({ fill: \"green\", shape: \"ring\", text: msg.payload });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "64dc395af95431e1",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "65ceb63d19a93d0f",
        "name": "ttp track",
        "info": "",
        "x": 1520,
        "y": 100,
        "wires": []
    },
    {
        "id": "d81b89b8431c5219",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "getprice, MA",
        "func": "\nlet moneta = msg.bot.settings.moneta;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n\n    msg.bot.status.currentprice = gp;\n    let volname = msg.bot.settings.botname + \"-MA-big\";\n    msg.bot.status.sr_ma_big = Number(flow.get(volname));\n\n    let volname2 = msg.bot.settings.botname + \"-MA-small\";\n    msg.bot.status.sr_ma_small = Number(flow.get(volname2));\n\n\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 260,
        "wires": [
            [
                "286f7ee0bb73b702"
            ]
        ]
    },
    {
        "id": "286f7ee0bb73b702",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "MA zapret calculate",
        "func": "\nmsg.bot.status.currentprice = Number(msg.bot.status.currentprice);\n\nif ((msg.bot.status.currentprice > msg.bot.status.sr_ma_big) && (msg.bot.status.currentprice > msg.bot.status.sr_ma_small)) {\n    msg.bot.zapret_na_zakup = false;\n    msg.bot.status.rezhim = \"МА - закуп разрешен\";\n\n} else {\n    msg.bot.zapret_na_zakup = true;\n    msg.bot.status.rezhim = \"МА - закуп запрещён\";\n\n}\nglobal.set(msg.botname + \"-status\", msg.bot.status);\nnode.status({ fill: \"green\", shape: \"dot\" });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2880,
        "y": 260,
        "wires": [
            [
                "9a90af117cd916e1"
            ]
        ]
    },
    {
        "id": "9a90af117cd916e1",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "пересчет депо",
        "func": "\nlet p = Number(msg.bot.status.currentprice);\nmsg.bot.finance.depo = Number((Number(msg.bot.finance.quotanal) * p + Number(msg.bot.finance.quotainorders) * p + Number(msg.bot.finance.basenal) + Number(msg.bot.finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\nlet data = {\n    \"floors\": msg.bot.floors,\n    \"finance\": msg.bot.finance,\n    \"sales\": msg.bot.sales\n}\n\nglobal.set(msg.botname + \"-data\", data);\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 260,
        "wires": [
            [
                "09ccb3a61ebb95eb"
            ]
        ]
    },
    {
        "id": "eb82ec0d8388d754",
        "type": "filter",
        "z": "5df15275.2888ec",
        "g": "422e384634a8793d",
        "name": "filter off",
        "property": "bot.onoff",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1160,
        "y": 780,
        "wires": [
            [
                "a7cb1741d2b70005"
            ]
        ]
    },
    {
        "id": "a7cb1741d2b70005",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "422e384634a8793d",
        "name": "get candlestick",
        "func": "function parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */ }\n  }\n  return \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\nlet key = global.get('key');\nlet secret = global.get('secret');\n\nlet binance = new LBinance().options({\n  APIKEY: key,\n  APISECRET: secret,\n  \"reconnect\": false\n});\n\nlet moneta = msg.bot.settings.moneta;\nlet deep = Number(msg.bot.settings.ma2);\n\nbinance.useServerTime(function () {\n  binance.candlesticks(moneta, \"1m\", (error, ticks, symbol) => {\n\n    if (error) {\n      var errorMsg = parseApiError(error) + \", moneta:\" + moneta;\n      node.error(errorMsg, msg);\n\n      msg.err = error;\n      node.status({ fill: \"red\", shape: \"dot\", text: errorMsg });\n\n      node.send(msg);\n\n    }\n\n    msg.payload = ticks;\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n  }, { limit: deep });\n\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "gBinance",
                "module": "node-binance-api"
            }
        ],
        "x": 1360,
        "y": 780,
        "wires": [
            [
                "2b846e417fd20188"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "76ccec41af84b9dd",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "422e384634a8793d",
        "name": "расчет и запись MA flow.set",
        "func": "\n\nlet candles = msg.payload;\n\n\nlet heiken = candles.map(function(tick){\n  //  node.warn(tick);\n    \n    \n    return (Number(tick[1]) + Number(tick[2]) + Number(tick[3]) + Number(tick[4]))/4;\n});\n\n\n//node.warn(heiken);\nmsg.heiken = heiken;\n\n\nlet heiken_small = heiken.slice(-msg.bot.settings.ma1);\n\n//node.warn(heiken_small);\nlet sum_all = heiken.reduce(function(sum, current) {\n  return sum + current\n});\n\nlet sum_small = heiken_small.reduce(function(sum, current) {\n  return sum + current\n});\n\nmsg.bot.status.sr_ma_big = sum_all / msg.bot.settings.ma2;\nmsg.bot.status.sr_ma_small = sum_small / msg.bot.settings.ma1;\n\nlet volname = msg.bot.settings.botname + \"-MA-big\";\nflow.set(volname, msg.bot.status.sr_ma_big);\n\nlet volname2 = msg.bot.settings.botname + \"-MA-small\";\nflow.set(volname2, msg.bot.status.sr_ma_small);\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "2b846e417fd20188",
        "type": "switch",
        "z": "5df15275.2888ec",
        "g": "422e384634a8793d",
        "name": "try second",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1550,
        "y": 780,
        "wires": [
            [
                "76ccec41af84b9dd"
            ],
            [
                "94c9271545c13b40",
                "a7cb1741d2b70005"
            ]
        ]
    },
    {
        "id": "94c9271545c13b40",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "422e384634a8793d",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 820,
        "wires": []
    },
    {
        "id": "7a19b1d6c330e11b",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3390,
        "y": 300,
        "wires": []
    },
    {
        "id": "28fda303e5196ddd",
        "type": "link in",
        "z": "5df15275.2888ec",
        "g": "65ceb63d19a93d0f",
        "name": "",
        "links": [
            "12cdc134f2944261"
        ],
        "x": 925,
        "y": 140,
        "wires": [
            [
                "a1d4c1c74be64298"
            ]
        ]
    },
    {
        "id": "a1d4c1c74be64298",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "65ceb63d19a93d0f",
        "name": "bot ready",
        "func": "node.status({ fill: \"green\", shape: \"dot\" });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "12cdc134f2944261",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "",
        "links": [
            "28fda303e5196ddd"
        ],
        "x": 3615,
        "y": 260,
        "wires": []
    },
    {
        "id": "950fa7fabc4ef79a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_status to redis",
        "func": "\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.botname + \":status\";\nmsg.payload = JSON.stringify(msg.bot.status);\n\nconst upd = global.get('setbot_status')(msg.topic, msg.payload);\n\nupd.then(upd => {\n    msg.payload = upd;\n    node.done();\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "71d59fd5323329d0",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "251a240e36b31c14",
        "name": "finish track",
        "func": "//<трекер<\nlet trackname = msg.trackname;\nlet track = flow.get(trackname);\nif (track) {\n\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length - 1];\n    let last_node_end_time = laststep.end_node_time;\n\n    let firststep = track[0];\n    let first_node_start_time = firststep.start_node_time;\n\n    let duration_track = last_node_end_time - first_node_start_time;\n    //>трекер>\n\n    //msg.bot.busy = false;\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_track //только для финишной ноды\n    });\n    flow.set(trackname, track);\n\n    //flow.set(msg.botname, 0);\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    return msg;\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 1020,
        "wires": [
            [
                "1acc76a1e7049e58"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "a98eccc2c1f43b19",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "251a240e36b31c14",
        "name": "",
        "links": [
            "efa132132a7fa5d7"
        ],
        "x": 2275,
        "y": 1040,
        "wires": []
    },
    {
        "id": "1acc76a1e7049e58",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "251a240e36b31c14",
        "name": "duration",
        "func": "let trackname = msg.trackname;\nlet track = flow.get(trackname);\nif (track) {\n\n    let laststep = track[track.length - 1];\n    let firststep = track[0];\n    let last_node_end_time = laststep.end_node_time;\n    let first_node_start_time = firststep.start_node_time;\n\n    let duration = last_node_end_time - first_node_start_time;\n    //node.warn(duration);\n    msg.payload = duration;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 1020,
        "wires": [
            [
                "8a2855df7069c19f",
                "a98eccc2c1f43b19"
            ]
        ]
    },
    {
        "id": "8a2855df7069c19f",
        "type": "ui_chart",
        "z": "5df15275.2888ec",
        "g": "251a240e36b31c14",
        "name": "",
        "group": "f244fee6.d2627",
        "order": 0,
        "width": "4",
        "height": "7",
        "label": "main track",
        "chartType": "line",
        "legend": "false",
        "xformat": "ss",
        "interpolate": "bezier",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "40",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9a244f",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 2330,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "c63e2cc4400d40fe",
        "type": "link in",
        "z": "5df15275.2888ec",
        "g": "251a240e36b31c14",
        "name": "",
        "links": [
            "be8533086c9decb4"
        ],
        "x": 1835,
        "y": 1020,
        "wires": [
            [
                "71d59fd5323329d0",
                "355607853c06794c"
            ]
        ]
    },
    {
        "id": "bdcfd843493d6dda",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "name": "botname: msg.botname",
        "func": "msg.topic = msg.botname;\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 1020,
        "wires": [
            [
                "aff2e0df221f4a3e"
            ]
        ]
    },
    {
        "id": "355607853c06794c",
        "type": "debug",
        "z": "5df15275.2888ec",
        "g": "251a240e36b31c14",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2150,
        "y": 1080,
        "wires": []
    },
    {
        "id": "41fc95c9cb2c3b5c",
        "type": "link in",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "finish track setbotfree",
        "links": [
            "04e23e81161e4a2f",
            "04f838f4dcf92c27",
            "072c1d3a07edfbfb",
            "159777891efadb83",
            "197f2eae23350bde",
            "1ee59cd0dcc3c69b",
            "3cca40b6fb3f74a7",
            "563d3c7cf2cd4b45",
            "6460e25babb0c7cc",
            "720d521686c307c6",
            "84de70195e8eeec9",
            "96b4f32d26754311",
            "97c944361390ef7f",
            "c687d087.0896d",
            "d108b7f4de207c72",
            "d2965d20fb057ea3",
            "e0a18e1cc9e2532d",
            "c55aa818edeee318",
            "ff26ac7ccf964923",
            "1b3e671be6b572d5",
            "378e488cecf6ffc2",
            "822a640986e32473",
            "9a2a545194209ea6",
            "c6b2e3e9d09dc7ab",
            "24b7b6edbf44e542",
            "0cf1654560ff06a3",
            "b72d192f770419d4",
            "dc25556dfb0429b4",
            "a70c78aeb96b6bba",
            "ed7621f56d07dc08",
            "334dc59dd4302182",
            "9286f6c79084e809",
            "6e33907944a00520",
            "5146160565d82180",
            "359f868e6a108b92",
            "a5d9d2953ce99426",
            "11aebd69afd877b4",
            "a78e47ef4a583aa3",
            "8bb50be67bb00371",
            "46817b364f8c4463",
            "168d6b39a90f0979",
            "50b9f3b0d6b0350a",
            "1eacca0442cea4af",
            "7f0a9ffb2eb5b4d8",
            "2794da7d6f473613",
            "eb3c309974af1cf2",
            "8517ca0472294dec",
            "20729f025f688461",
            "a462aac9c71276fd",
            "d6558ff47e608f86",
            "a4dfcf58c6df6c09",
            "3f37fb0637f78e15",
            "6edb1398e9f20d80",
            "035d2308e8f612cb",
            "e3528b9ed8ed61ad",
            "9542eb88cb3f8639",
            "548b4a7bdac897fb",
            "ecdf9874c91eb6b0",
            "a893c89e459b32b2",
            "c29cb281b2d54456"
        ],
        "x": 1195,
        "y": 2060,
        "wires": [
            [
                "c4b26fb79a2daa5e"
            ]
        ]
    },
    {
        "id": "5070868516664aaf",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "a098ebd7bc13168a",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 3140,
        "wires": [
            [
                "a08f9141c62654e1"
            ]
        ]
    },
    {
        "id": "a08f9141c62654e1",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "a098ebd7bc13168a",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 790,
        "y": 3180,
        "wires": []
    },
    {
        "id": "d63773780bfc4198",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "a098ebd7bc13168a",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "9",
        "topic": "",
        "payloadType": "date",
        "x": 370,
        "y": 3140,
        "wires": [
            [
                "7e46c841715cf18c"
            ]
        ]
    },
    {
        "id": "7e46c841715cf18c",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "a098ebd7bc13168a",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 370,
        "y": 3180,
        "wires": []
    },
    {
        "id": "58fac5195edfed79",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "a098ebd7bc13168a",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 550,
        "y": 3140,
        "wires": [
            [
                "8718a0313e781582"
            ]
        ]
    },
    {
        "id": "8718a0313e781582",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "a098ebd7bc13168a",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 550,
        "y": 3180,
        "wires": []
    },
    {
        "id": "58c7424d21936ed2",
        "type": "redis-instance",
        "z": "5df15275.2888ec",
        "g": "a098ebd7bc13168a",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 990,
        "y": 3160,
        "wires": []
    },
    {
        "id": "a37ec54854f75f01",
        "type": "join",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 3520,
        "y": 260,
        "wires": [
            [
                "12cdc134f2944261"
            ]
        ]
    },
    {
        "id": "aff2e0df221f4a3e",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "name": "start",
        "func": "\n//<трекер<\n////>только для стартовой ноды>\nlet track = [];\nlet start_track_time = new Date().getTime();\nlet start_node_time = start_track_time;\nlet steptitle = node.name;\n\nlet end_node_time = new Date().getTime();\nlet duration = end_node_time - start_node_time;\ntrack.push({\n    \"steptitle\": steptitle,\n    \"start_node_time\": start_node_time,\n    \"end_node_time\": end_node_time,\n    \"duration_node\": duration,\n    \"duration_step\": 0\n});\n\nlet trackname = \"track-\" + msg.botname + msg._msgid;\nflow.set(trackname, track);\nmsg.trackname = trackname;\n//>трекер>\n\nnode.status({ fill: \"green\", shape: \"dot\", text: duration });\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1020,
        "wires": [
            [
                "c80bf4b14fe4742e"
            ]
        ]
    },
    {
        "id": "f48c67924929692e",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "FLOOR CHECK",
        "info": "",
        "x": 1540,
        "y": 2380,
        "wires": []
    },
    {
        "id": "d518ad315a4638e0",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "busy = true",
        "func": "msg.bot = msg.payload.bot;\nmsg.botname = msg.payload.bot.settings.botname;\nglobal.set(msg.botname+\"-busy\", true);\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 2240,
        "wires": [
            [
                "3878d6f90ee19f79"
            ]
        ]
    },
    {
        "id": "3878d6f90ee19f79",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "service step count",
        "func": "\nlet id = \"srv-\" + msg.botname;\nvar count = flow.get(id) || 0;\ncount += 1;\n//node.warn(count);\nflow.set(id, count);\nif (count >= 10) {\n    msg.service = true;\n    flow.set(id, 0);\n} else {\n    msg.service = false;\n\n}\nnode.status({ fill: \"green\", shape: \"dot\" });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 2240,
        "wires": [
            [
                "14eb54fb95edf5f2"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "26218d3cb1810007",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "busy = false",
        "func": "\nglobal.set(msg.botname+\"-busy\", false);\nflow.set(msg.botname, 0);\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 2060,
        "wires": [
            [
                "b0ec6d3556146b80",
                "d7ed826dde4a9ede"
            ]
        ]
    },
    {
        "id": "14eb54fb95edf5f2",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "getprice, MA",
        "func": "\nlet moneta = msg.bot.settings.moneta;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n\n    msg.bot.status.currentprice = gp;\n    let volname = msg.bot.settings.botname + \"-MA-big\";\n    msg.bot.status.sr_ma_big = Number(flow.get(volname));\n\n    let volname2 = msg.bot.settings.botname + \"-MA-small\";\n    msg.bot.status.sr_ma_small = Number(flow.get(volname2));\n\n\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 2340,
        "wires": [
            [
                "cb21eeee8bf63c16"
            ]
        ]
    },
    {
        "id": "cb21eeee8bf63c16",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "MA zapret calculate",
        "func": "\nmsg.bot.status.currentprice = Number(msg.bot.status.currentprice);\n\nif ((msg.bot.status.currentprice > msg.bot.status.sr_ma_big) && (msg.bot.status.currentprice > msg.bot.status.sr_ma_small)) {\n    msg.bot.zapret_na_zakup = false;\n    msg.bot.status.rezhim = \"МА - закуп разрешен\";\n\n} else {\n    msg.bot.zapret_na_zakup = true;\n    msg.bot.status.rezhim = \"МА - закуп запрещён\";\n\n}\n\nnode.status({ fill: \"green\", shape: \"dot\" });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 2340,
        "wires": [
            [
                "37cac379d5fbf6c4"
            ]
        ]
    },
    {
        "id": "60490b1d8f670554",
        "type": "switch",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "sold ?",
        "property": "bot.ttp.sold",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 2340,
        "wires": [
            [
                "7213180bb142a85e"
            ],
            [
                "699432d934559763"
            ]
        ]
    },
    {
        "id": "37cac379d5fbf6c4",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "пересчет депо",
        "func": "\nlet p = Number(msg.bot.status.currentprice);\nmsg.bot.finance.depo = Number((Number(msg.bot.finance.quotanal) * p + Number(msg.bot.finance.quotainorders) * p + Number(msg.bot.finance.basenal) + Number(msg.bot.finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 2340,
        "wires": [
            [
                "60490b1d8f670554"
            ]
        ]
    },
    {
        "id": "c4b26fb79a2daa5e",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "setbot global",
        "func": "\nglobal.set(msg.botname + \"-status\", msg.bot.status);\n\nlet data = {\n    \"floors\": msg.bot.floors,\n    \"finance\": msg.bot.finance,\n    \"sales\": msg.bot.sales\n}\n//msg.bot.data = data;\nglobal.set(msg.botname + \"-data\", data);\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 2060,
        "wires": [
            [
                "26218d3cb1810007"
            ]
        ]
    },
    {
        "id": "699432d934559763",
        "type": "switch",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "service tick",
        "property": "service",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1050,
        "y": 2480,
        "wires": [
            [
                "41aa253a481d040d"
            ],
            [
                "6c631338f38f4a53"
            ]
        ]
    },
    {
        "id": "41aa253a481d040d",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "определяем этаж",
        "func": "\nlet lp = Number(msg.bot.status.currentprice);\nlet f = msg.bot.floors;\n\nvar curfloor = f.filter(function (floor) {\n    return ((floor[1] <= lp) && (floor[2] > lp));\n});\n\nif (curfloor[0]) {\n\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n\n    msg.bot.currentfloor = curfloor[0];\n    msg.bot.status.lastfloor = msg.bot.status.currentfloor;\n    msg.bot.status.currentfloor = curfloor[0][0];\n\n    msg.bot.downfloor = f[msg.bot.status.currentfloor - 2];\n    return [msg, null];\n}\nelse {\n\n    node.status({ fill: \"blue\", shape: \"dot\" });\n    // node.warn(\"вне сетки\"); \n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 2420,
        "wires": [
            [
                "9540463a0607bccd"
            ],
            [
                "035d2308e8f612cb"
            ]
        ]
    },
    {
        "id": "8e3d1b1557736b15",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "вне сетки",
        "info": "",
        "x": 1520,
        "y": 2460,
        "wires": []
    },
    {
        "id": "3f37fb0637f78e15",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "41fc95c9cb2c3b5c",
            "bbeab97c6a252674",
            "a4527bfabf64a1b1"
        ],
        "x": 1735,
        "y": 2380,
        "wires": []
    },
    {
        "id": "6c631338f38f4a53",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "floors array prepare",
        "func": "msg.payload = msg.bot.floors;\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 2540,
        "wires": [
            [
                "871e29f2da9b6656"
            ]
        ]
    },
    {
        "id": "871e29f2da9b6656",
        "type": "split",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1450,
        "y": 2540,
        "wires": [
            [
                "bf333c66bc20e77f"
            ]
        ]
    },
    {
        "id": "bf333c66bc20e77f",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "concrete floor select",
        "func": "msg.bot.currentfloor = msg.payload;\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 2540,
        "wires": [
            [
                "b2784332410b0273"
            ]
        ]
    },
    {
        "id": "28adb87a291e95d6",
        "type": "join",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2190,
        "y": 2540,
        "wires": [
            [
                "6edb1398e9f20d80"
            ]
        ]
    },
    {
        "id": "6edb1398e9f20d80",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "41fc95c9cb2c3b5c",
            "bbeab97c6a252674",
            "a4527bfabf64a1b1"
        ],
        "x": 2295,
        "y": 2540,
        "wires": []
    },
    {
        "id": "035d2308e8f612cb",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "41fc95c9cb2c3b5c",
            "bbeab97c6a252674",
            "a4527bfabf64a1b1"
        ],
        "x": 1415,
        "y": 2460,
        "wires": []
    },
    {
        "id": "6274a170dc04552c",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "251a240e36b31c14",
        "name": "Финиш трека",
        "info": "",
        "x": 1890,
        "y": 960,
        "wires": []
    },
    {
        "id": "9540463a0607bccd",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "",
        "links": [
            "179defa09285937f"
        ],
        "x": 1415,
        "y": 2380,
        "wires": []
    },
    {
        "id": "33f2b93ae8d315c4",
        "type": "link in",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "",
        "links": [
            "a2375dc0e61e0bfc"
        ],
        "x": 1675,
        "y": 2380,
        "wires": [
            [
                "3f37fb0637f78e15",
                "9217cb3df360d0a4"
            ]
        ]
    },
    {
        "id": "85893390bea0fc91",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "FLOOR SERVICE",
        "info": "",
        "x": 1940,
        "y": 2540,
        "wires": []
    },
    {
        "id": "b2784332410b0273",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "",
        "links": [
            "a0bc75354d0a725c"
        ],
        "x": 1795,
        "y": 2540,
        "wires": []
    },
    {
        "id": "371a0062c65d9bd9",
        "type": "link in",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "",
        "links": [
            "d1f5e69b0d94d6c0"
        ],
        "x": 2075,
        "y": 2540,
        "wires": [
            [
                "28adb87a291e95d6"
            ]
        ]
    },
    {
        "id": "9217cb3df360d0a4",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "af843f8c5aec7d33",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "setbot_ttp reset",
        "func": "\nmsg.bot.ttp.curstop = 0;\nmsg.bot.ttp.raschstopprice = 0;\nmsg.bot.ttp.curorderid = 0;\nmsg.bot.ttp.sold = false;\n//msg.bot.ttp.ttpbusy = false;\nmsg.bot.ttp.currentprice = 0;\nmsg.bot.ttp.quantity = 0;\nmsg.bot.ttp.final_price = 0;\nmsg.bot.ttp.finalorder = 0;\nmsg.bot.ttp.proskal = false;\n\nglobal.set(msg.botname + \"-ttp\", msg.bot.ttp);\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 2300,
        "wires": [
            [
                "c29cb281b2d54456"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "c29cb281b2d54456",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "",
        "links": [
            "41fc95c9cb2c3b5c"
        ],
        "x": 2055,
        "y": 2300,
        "wires": []
    },
    {
        "id": "e681279a23d56ae3",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "регистрация сделки",
        "func": "let guid = global.get('guid');\nlet leads = global.get(guid + '-leads') || [];\n\n\nlet lead = {};\n\nlet node_time = new Date().getTime();\nlet date = new Date();\n\nlet endtime = date.toString().split('GMT')[0];\nlet posttg = [];\nlet commision = global.get(\"commision\");\n\nlet sellprice = Number(msg.bot.ttp.final_price);\n\nlet tempfin = Number(Number(msg.bot.finance.quotainorders) - Number(msg.bot.ttp.quantity));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.ttp.quantity) * sellprice);\n\nvar floors = msg.bot.floors;\nlet sumsales = 0;\n\n\nfunction formatTime(timestamp) {\n    let date = new Date(timestamp);\n    //let time = new Date(timestamp).getTime();\n    return date.toString().split('GMT')[0];\n}\n\nfunction timeDistance(date1, date2) {\n    let distance = Math.abs(date1 - date2);\n    const hours = Math.floor(distance / 3600000);\n    distance -= hours * 3600000;\n    const minutes = Math.floor(distance / 60000);\n    distance -= minutes * 60000;\n    const seconds = Math.floor(distance / 1000);\n    return `${hours}:${('0' + minutes).slice(-2)}:${('0' + seconds).slice(-2)}`;\n};\n\n//const getleads = global.get('getleads')(guid);\n//var leads = {};\n//\n//getleads.then(gbl => {\n//    leads = JSON.parse(gbl);\n//});\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 3) {\n\n\n        let starttime = formatTime(item[9]);\n\n        let duration = timeDistance(node_time, item[9]);\n\n        let buyprice = Number(item[10]);\n        let quantity = Number(item[14]);\n        let p = quantity * (sellprice - buyprice);\n        let c = quantity * (Number(sellprice + buyprice)) / 100 * commision;\n        let net = p - c;\n        tempfin2 = tempfin2 - c;\n        msg.bot.sales.today.push([buyprice, sellprice, quantity, p, c, net, starttime, endtime, duration]);\n        msg.bot.sales.all.push([buyprice, sellprice, quantity, p, c, net, starttime, endtime, duration]);\n        sumsales = sumsales + net;\n\n        //node.warn([buyprice, sellprice, quantity, p, c, net, starttime, endtime, duration]);\n\n        let botname = msg.botname;\n        let datamsg = \"\\n\" + botname\n            + \"\\n Прибыль\" + net.toFixed(msg.bot.settings.digitq)\n            + \"\\n Покупка: \" + starttime + \"Цена:\" + buyprice\n            + \"\\n Продажа: \" + endtime + \"Цена:\" + sellprice\n            + \"\\n Длительность: \" + duration;\n        const tilog = global.get('tilog')(botname, datamsg);\n        tilog;\n\n        let msgfortg = {\n            \"botname\": botname,\n            \"profit\": net,\n            \"duration\": duration,\n            \"moneta\": msg.bot.settings.basecoin\n        };\n\n\n\n        let posttg = JSON.stringify(msgfortg);\n\n        leads.push(msgfortg);\n        global.set(guid + '-leads', leads);\n\n        let typemsg = \"lead\";\n        const tglead = global.get('tglead')(posttg, guid, typemsg);\n        tglead;\n\n\n        //posttg.push(msgfortg);\n\n        node.warn(msgfortg);\n\n        item[7] = 0;\n        item[8] = 0;\n        item[9] = 0;\n        item[10] = 0;\n        item[11] = 0;\n        item[12] = 0;\n        item[13] = 0;\n        item[14] = 0;\n\n\n\n\n    //count += 1;\n       //if (leads) {\n       //    lead = {\n       //        \"count\": leads.count + 1 || 1,\n       //        \"profit\": leads.profit + net || net\n       //    }\n       //} else {\n       //    lead = {\n       //        \"count\": 1,\n       //        \"profit\": net\n       //    }\n       //}\n       //const addlead = global.get('addlead')(guid, JSON.stringify(lead));\n       //addlead;\n//\n\n\n        node.status({ fill: \"green\", shape: \"dot\" });\n\n\n    }\n});\n\n\n\nmsg.posttg = posttg;\n\n\n\n\nif (sumsales != 0) {\n\n    msg.sumsales = sumsales;\n    msg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\n    msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitq);\n\n    if (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\n    if (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\n    msg.bot.floors = floors;\n}\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nnode.warn(\"регистрация сделки\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 2300,
        "wires": [
            [
                "9edee8174b84386e"
            ]
        ]
    },
    {
        "id": "7213180bb142a85e",
        "type": "switch",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "bot.ttp.final_price > 0",
        "property": "bot.ttp.final_price",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1080,
        "y": 2220,
        "wires": [
            [
                "a4938af49eb2fcc1",
                "a893c89e459b32b2"
            ],
            [
                "e681279a23d56ae3",
                "4033406d5a56e5a6"
            ]
        ]
    },
    {
        "id": "a4938af49eb2fcc1",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "tilog",
        "func": "var floors = msg.bot.floors;\nlet nonzeroflors = [];\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] != 0) {\n\n        nonzeroflors.push(item);\n\n    }\n});\n\nnonzeroflors = JSON.stringify(nonzeroflors || \"\", null, '\\t');\n\n\n\n\n\nlet botdump = JSON.stringify(msg.bot.ttp || \"\", null, '\\t');\n\n\n\n\nlet botname = msg.bot.settings.botname;\nlet data = \"final price = 0 : \" + botname + botdump + nonzeroflors;\n\n\nconst tilog = global.get('tilog')(botname, data);\n\ntilog.then(tilog => {\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "a893c89e459b32b2",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "",
        "links": [
            "41fc95c9cb2c3b5c"
        ],
        "x": 1255,
        "y": 2220,
        "wires": []
    },
    {
        "id": "9edee8174b84386e",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1640,
        "y": 2300,
        "wires": [
            [
                "af843f8c5aec7d33"
            ]
        ]
    },
    {
        "id": "b8dd96d5d9b54edd",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "Start",
        "func": "let tgmsg = \"Samat\";\n\nlet guid = global.get('guid');\nmsg = {};\nmsg.payload = {tgmsg, guid};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 340,
        "wires": [
            [
                "642ebd6d0bd5aa4a"
            ]
        ]
    },
    {
        "id": "642ebd6d0bd5aa4a",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 490,
        "y": 340,
        "wires": []
    },
    {
        "id": "9c73485e3218bf6f",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 1990,
        "y": 2200,
        "wires": []
    },
    {
        "id": "6992d75a1f4b52e3",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tgmsg",
        "func": "let posttg = JSON.stringify(msg.posttg);\nlet guid = global.get('guid');\nlet typemsg = \"lead\";\nmsg = {};\n\nmsg.payload = { posttg, guid, typemsg};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 2200,
        "wires": [
            [
                "9c73485e3218bf6f"
            ]
        ]
    },
    {
        "id": "4033406d5a56e5a6",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 2260,
        "wires": []
    },
    {
        "id": "13ad98b8ecd2464f",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "",
        "func": "msg = { \"topic\": \"BADGERUSDT-1634165657\", \"payload\": \"BADGERUSDT-1634165657\", \"parts\": { \"id\": \"918bd9b4bea0fe31\", \"type\": \"array\", \"count\": 5, \"len\": 1, \"index\": 4 }, \"_msgid\": \"6de6a6f6190fe321\", \"botname\": \"BADGERUSDT-1634165657\", \"bot\": { \"busy\": false, \"data\": { \"floors\": [[1, 30, 30.525, 30.03, 30.075000000000003, 30.255000000000003, 30.345000000000002, 0, 0, 0, 0, 0, 0, 0, 0], [2, 30.525, 31.0591875, 30.555525, 30.6013125, 30.7844625, 30.8760375, 0, 0, 0, 0, 0, 0, 0, 0], [3, 31.0591875, 31.60272328125, 31.0902466875, 31.13683546875, 31.32319059375, 31.416368156249998, 0, 0, 0, 0, 0, 0, 0, 0], [4, 31.60272328125, 32.15577093867188, 31.63432600453125, 31.681730089453126, 31.871346429140626, 31.966154598984375, 0, 0, 0, 0, 0, 0, 0, 0], [5, 32.15577093867188, 32.71849693009864, 32.18792670961055, 32.23616036601856, 32.429094991650594, 32.525562304466604, 0, 0, 0, 0, 0, 0, 0, 0], [6, 32.71849693009864, 33.291070626375365, 32.75121542702874, 32.800293172423885, 32.99660415400448, 33.09475964479478, 0, 0, 0, 0, 0, 0, 0, 0], [7, 33.291070626375365, 33.87366436233693, 33.32436169700174, 33.374298302941305, 33.574044726699555, 33.67391793857868, 3, 72992481, 1634252542436, \"33.32000000\", 0, 0, 0, \"0.61000000\"], [8, 33.87366436233693, 34.46645348867783, 33.90753802669927, 33.958348523242776, 34.1615905094168, 34.26321150250381, 3, 72904989, 1634239107684, \"33.91000000\", 0, 0, 0, \"0.61000000\"], [9, 34.46645348867783, 35.06961642472969, 34.500919942166504, 34.55261962239952, 34.75941834333159, 34.862817703797624, 0, 0, 0, 0, 0, 0, 0, 0], [10, 35.06961642472969, 35.683334712162456, 35.104686041154416, 35.15729046579151, 35.36770816433989, 35.47291701361408, 0, 0, 0, 0, 0, 0, 0, 0], [11, 35.683334712162456, 36.3077930696253, 35.719018046874616, 35.77254304894286, 35.98664305721583, 36.09369306135232, 2, 72780629, 1634227811609, \"35.72000000\", 0, 0, 0, \"0.58000000\"], [12, 36.3077930696253, 36.94317944834374, 36.34410086269492, 36.39856255229936, 36.61640931071711, 36.72533268992599, 0, 0, 0, 0, 0, 0, 0, 0], [13, 36.94317944834374, 37.589685088689755, 36.980122627792085, 37.0355373969646, 37.25719647365466, 37.368026011999696, 0, 0, 0, 0, 0, 0, 0, 0], [14, 37.589685088689755, 38.24750457774183, 37.627274773778446, 37.68365930141148, 37.90919741194362, 38.02196646720969, 0, 0, 0, 0, 0, 0, 0, 0], [15, 38.24750457774183, 38.91683590785231, 38.28575208231957, 38.34312333918618, 38.57260836665263, 38.68735088038586, 0, 0, 0, 0, 0, 0, 0, 0], [16, 38.91683590785231, 39.59788053623973, 38.955752743760165, 39.01412799762194, 39.24762901306905, 39.36437952079262, 0, 0, 0, 0, 0, 0, 0, 0], [17, 39.59788053623973, 40.29084344562392, 39.63747841677597, 39.69687523758033, 39.934462520797766, 40.053256162406484, 0, 0, 0, 0, 0, 0, 0, 0], [18, 40.29084344562392, 40.99593320592234, 40.331134289069546, 40.39157055423798, 40.63331561491172, 40.7541881452486, 0, 0, 0, 0, 0, 0, 0, 0], [19, 40.99593320592234, 41.71336203702598, 41.03692913912826, 41.09842303893714, 41.34439863817268, 41.467386437790445, 0, 0, 0, 0, 0, 0, 0, 0], [20, 41.71336203702598, 42.44334587267394, 41.75507539906301, 41.81764544211855, 42.0679256143407, 42.19306570045178, 0, 0, 0, 0, 0, 0, 0, 0], [21, 42.44334587267394, 43.186104425445734, 42.485789218546614, 42.549454237355626, 42.80411431259167, 42.93144435020969, 0, 0, 0, 0, 0, 0, 0, 0], [22, 43.186104425445734, 43.94186125289104, 43.22929052987118, 43.294069686509346, 43.55318631306202, 43.68274462633836, 0, 0, 0, 0, 0, 0, 0, 0], [23, 43.94186125289104, 44.71084382481663, 43.98580311414393, 44.05171590602326, 44.31536707354061, 44.44719265729928, 0, 0, 0, 0, 0, 0, 0, 0], [24, 44.71084382481663, 45.49328359175092, 44.755554668641444, 44.82262093437867, 45.09088599732757, 45.22501852880202, 0, 0, 0, 0, 0, 0, 0, 0], [25, 45.49328359175092, 46.289416054606555, 45.53877687534267, 45.6070168007303, 45.879976502280805, 46.01645635305606, 0, 0, 0, 0, 0, 0, 0, 0], [26, 46.289416054606555, 47.09948083556217, 46.33570547066116, 46.40513959474307, 46.68287609107071, 46.82174433923453, 0, 0, 0, 0, 0, 0, 0, 0], [27, 47.09948083556217, 47.923721750184505, 47.14658031639773, 47.21722953765107, 47.49982642266445, 47.641124865171136, 0, 0, 0, 0, 0, 0, 0, 0], [28, 47.923721750184505, 48.762386880812734, 47.97164547193469, 48.04353105455997, 48.331073385061075, 48.47484455031163, 0, 0, 0, 0, 0, 0, 0, 0], [29, 48.762386880812734, 49.61572865122696, 48.811149267693544, 48.884292848014766, 49.17686716929964, 49.32315432994208, 0, 0, 0, 0, 0, 0, 0, 0], [30, 49.61572865122696, 50.48400390262343, 49.665344379878185, 49.73976797285503, 50.03746234476239, 50.186309530716066, 0, 0, 0, 0, 0, 0, 0, 0], [31, 50.48400390262343, 51.367473970919335, 50.53448790652605, 50.61021391237999, 50.91311793579573, 51.0645699475036, 0, 0, 0, 0, 0, 0, 0, 0], [32, 51.367473970919335, 52.26640476541042, 51.418841444890255, 51.49589265584663, 51.804097499672146, 51.95819992158491, 0, 0, 0, 0, 0, 0, 0, 0], [33, 52.26640476541042, 53.1810668488051, 52.31867117017583, 52.39707077732395, 52.71066920591641, 52.867468420212646, 0, 0, 0, 0, 0, 0, 0, 0], [34, 53.1810668488051, 54.11173551865919, 53.23424791565391, 53.314019515927114, 53.63310591701995, 53.79264911756636, 0, 0, 0, 0, 0, 0, 0, 0], [35, 54.11173551865919, 55.058690890235724, 54.16584725417785, 54.24701485745584, 54.57168527056779, 54.73402047712377, 0, 0, 0, 0, 0, 0, 0, 0], [36, 55.058690890235724, 56.02221798081485, 55.11374958112596, 55.19633761746131, 55.526689762802725, 55.691865835473436, 0, 0, 0, 0, 0, 0, 0, 0], [37, 56.02221798081485, 57.00260679547911, 56.07824019879567, 56.16227352576689, 56.49840683365178, 56.666473487594224, 0, 0, 0, 0, 0, 0, 0, 0], [38, 57.00260679547911, 58.00015241439999, 57.05960940227459, 57.14511331246781, 57.48712895324068, 57.65813677362712, 0, 0, 0, 0, 0, 0, 0, 0], [39, 58.00015241439999, 59.01515508165199, 58.05815256681439, 58.14515279543599, 58.49315370992239, 58.66715416716559, 0, 0, 0, 0, 0, 0, 0, 0], [40, 59.01515508165199, 60.0479202955809, 59.07417023673364, 59.16269296935612, 59.51678389984603, 59.69382936509099, 0, 0, 0, 0, 0, 0, 0, 0]], \"finance\": { \"startdepo\": \"100\", \"depo\": 103.6, \"quotanal\": \"0.58\", \"quotainorders\": \"1.22\", \"basenal\": \"42.26\", \"baseinorders\": \"0.00\", \"profittoday\": 0 }, \"sales\": { \"today\": [[36.34, 38.32, 0.54, 1.0691999999999984, 0.0302373, 1.0389626999999984, \"Thu Oct 14 2021 03:33:24 \", \"Thu Oct 14 2021 04:41:33 \", \"1:08:09\"], [36.98, 38.32, 0.54, 0.7236000000000019, 0.030496499999999996, 0.6931035000000019, \"Thu Oct 14 2021 04:09:22 \", \"Thu Oct 14 2021 04:41:33 \", \"0:32:10\"], [37.63, 38.32, 0.53, 0.3656999999999988, 0.030190125, 0.3355098749999988, \"Thu Oct 14 2021 04:37:08 \", \"Thu Oct 14 2021 04:41:33 \", \"0:04:25\"], [38.29, 38.32, 0.52, 0.015600000000000593, 0.0298779, -0.014277899999999406, \"Thu Oct 14 2021 01:57:56 \", \"Thu Oct 14 2021 04:41:33 \", \"2:43:36\"], [38.29, 38.71509433962264, 0.53, 0.22529999999999867, 0.030609525000000005, 0.19469047499999867, \"Thu Oct 14 2021 05:25:21 \", \"Thu Oct 14 2021 05:36:15 \", \"0:10:54\"], [36.34, 36.66, 0.56, 0.1791999999999962, 0.030660000000000003, 0.1485399999999962, \"Thu Oct 14 2021 07:49:45 \", \"Thu Oct 14 2021 08:04:09 \", \"0:14:23\"], [36.34, 37.01, 0.56, 0.37519999999999704, 0.030807, 0.34439299999999706, \"Thu Oct 14 2021 10:31:03 \", \"Thu Oct 14 2021 11:28:08 \", \"0:57:05\"], [36.98, 37.04, 0.55, 0.03300000000000125, 0.030533249999999998, 0.0024667500000012527, \"Thu Oct 14 2021 09:20:59 \", \"Thu Oct 14 2021 11:28:59 \", \"2:07:59\"], [36.34, 36.41, 0.56, 0.03919999999999618, 0.030555000000000002, 0.00864499999999618, \"Thu Oct 14 2021 12:51:23 \", \"Thu Oct 14 2021 13:39:43 \", \"0:48:19\"], [35.72, 36.5, 0.56, 0.4368000000000007, 0.030332400000000002, 0.4064676000000007, \"Thu Oct 14 2021 15:41:55 \", \"Thu Oct 14 2021 17:26:03 \", \"1:44:07\"], [36.34, 36.5, 0.56, 0.0895999999999981, 0.030592800000000003, 0.059007199999998095, \"Thu Oct 14 2021 14:15:04 \", \"Thu Oct 14 2021 17:26:03 \", \"3:10:59\"], [35.72, 36.190000000000005, 0.57, 0.26790000000000336, 0.030741524999999995, 0.23715847500000337, \"Thu Oct 14 2021 18:12:46 \", \"Thu Oct 14 2021 19:03:57 \", \"0:51:10\"], [36.34, 37.059999999999995, 0.56, 0.4031999999999954, 0.030828000000000005, 0.3723719999999954, \"Thu Oct 14 2021 17:26:20 \", \"Thu Oct 14 2021 19:05:43 \", \"1:39:23\"], [36.98, 37.059999999999995, 0.55, 0.04399999999999907, 0.0305415, 0.013458499999999068, \"Thu Oct 14 2021 11:33:21 \", \"Thu Oct 14 2021 19:05:43 \", \"7:32:21\"], [37.63, 37.73, 0.54, 0.05399999999999693, 0.0305208, 0.02347919999999693, \"Thu Oct 14 2021 05:41:00 \", \"Thu Oct 14 2021 19:06:36 \", \"13:25:35\"], [33.91, 33.93, 0.61, 0.012200000000001907, 0.0310368, -0.018836799999998093, \"Thu Oct 14 2021 20:30:05 \", \"Thu Oct 14 2021 20:41:31 \", \"0:11:26\"], [33.91, 33.98, 0.61, 0.042700000000000175, 0.03105967499999999, 0.011640325000000184, \"Thu Oct 14 2021 20:41:32 \", \"Thu Oct 14 2021 22:10:13 \", \"1:28:41\"], [33.32, 33.589999999999996, 0.61, 0.16469999999999757, 0.030611324999999995, 0.13408867499999758, \"Fri Oct 15 2021 00:21:05 \", \"Fri Oct 15 2021 01:24:19 \", \"1:03:14\"]], \"days\": [], \"all\": [[36.34, 38.32, 0.54, 1.0691999999999984, 0.0302373, 1.0389626999999984, \"Thu Oct 14 2021 03:33:24 \", \"Thu Oct 14 2021 04:41:33 \", \"1:08:09\"], [36.98, 38.32, 0.54, 0.7236000000000019, 0.030496499999999996, 0.6931035000000019, \"Thu Oct 14 2021 04:09:22 \", \"Thu Oct 14 2021 04:41:33 \", \"0:32:10\"], [37.63, 38.32, 0.53, 0.3656999999999988, 0.030190125, 0.3355098749999988, \"Thu Oct 14 2021 04:37:08 \", \"Thu Oct 14 2021 04:41:33 \", \"0:04:25\"], [38.29, 38.32, 0.52, 0.015600000000000593, 0.0298779, -0.014277899999999406, \"Thu Oct 14 2021 01:57:56 \", \"Thu Oct 14 2021 04:41:33 \", \"2:43:36\"], [38.29, 38.71509433962264, 0.53, 0.22529999999999867, 0.030609525000000005, 0.19469047499999867, \"Thu Oct 14 2021 05:25:21 \", \"Thu Oct 14 2021 05:36:15 \", \"0:10:54\"], [36.34, 36.66, 0.56, 0.1791999999999962, 0.030660000000000003, 0.1485399999999962, \"Thu Oct 14 2021 07:49:45 \", \"Thu Oct 14 2021 08:04:09 \", \"0:14:23\"], [36.34, 37.01, 0.56, 0.37519999999999704, 0.030807, 0.34439299999999706, \"Thu Oct 14 2021 10:31:03 \", \"Thu Oct 14 2021 11:28:08 \", \"0:57:05\"], [36.98, 37.04, 0.55, 0.03300000000000125, 0.030533249999999998, 0.0024667500000012527, \"Thu Oct 14 2021 09:20:59 \", \"Thu Oct 14 2021 11:28:59 \", \"2:07:59\"], [36.34, 36.41, 0.56, 0.03919999999999618, 0.030555000000000002, 0.00864499999999618, \"Thu Oct 14 2021 12:51:23 \", \"Thu Oct 14 2021 13:39:43 \", \"0:48:19\"], [35.72, 36.5, 0.56, 0.4368000000000007, 0.030332400000000002, 0.4064676000000007, \"Thu Oct 14 2021 15:41:55 \", \"Thu Oct 14 2021 17:26:03 \", \"1:44:07\"], [36.34, 36.5, 0.56, 0.0895999999999981, 0.030592800000000003, 0.059007199999998095, \"Thu Oct 14 2021 14:15:04 \", \"Thu Oct 14 2021 17:26:03 \", \"3:10:59\"], [35.72, 36.190000000000005, 0.57, 0.26790000000000336, 0.030741524999999995, 0.23715847500000337, \"Thu Oct 14 2021 18:12:46 \", \"Thu Oct 14 2021 19:03:57 \", \"0:51:10\"], [36.34, 37.059999999999995, 0.56, 0.4031999999999954, 0.030828000000000005, 0.3723719999999954, \"Thu Oct 14 2021 17:26:20 \", \"Thu Oct 14 2021 19:05:43 \", \"1:39:23\"], [36.98, 37.059999999999995, 0.55, 0.04399999999999907, 0.0305415, 0.013458499999999068, \"Thu Oct 14 2021 11:33:21 \", \"Thu Oct 14 2021 19:05:43 \", \"7:32:21\"], [37.63, 37.73, 0.54, 0.05399999999999693, 0.0305208, 0.02347919999999693, \"Thu Oct 14 2021 05:41:00 \", \"Thu Oct 14 2021 19:06:36 \", \"13:25:35\"], [33.91, 33.93, 0.61, 0.012200000000001907, 0.0310368, -0.018836799999998093, \"Thu Oct 14 2021 20:30:05 \", \"Thu Oct 14 2021 20:41:31 \", \"0:11:26\"], [33.91, 33.98, 0.61, 0.042700000000000175, 0.03105967499999999, 0.011640325000000184, \"Thu Oct 14 2021 20:41:32 \", \"Thu Oct 14 2021 22:10:13 \", \"1:28:41\"], [33.32, 33.589999999999996, 0.61, 0.16469999999999757, 0.030611324999999995, 0.13408867499999758, \"Fri Oct 15 2021 00:21:05 \", \"Fri Oct 15 2021 01:24:19 \", \"1:03:14\"]] } }, \"onoff\": true, \"settings\": { \"botname\": \"BADGERUSDT-1634165657\", \"isrunning\": false, \"handyzapretnazakup\": false, \"comment\": null, \"quotacoin\": \"BADGER\", \"basecoin\": \"USDT\", \"moneta\": \"BADGERUSDT\", \"digitq\": \"2\", \"digitprice\": \"2\", \"minprice\": \"30\", \"maxprice\": \"60\", \"profitproc\": \"0.9\", \"ordersize\": \"20\", \"ofsetbottom\": \"0.1\", \"ofsettop\": \"0.6\", \"ma1\": 3, \"ma2\": 30, \"maxpriceforzakup\": null, \"minpriceforzakup\": null, \"userid\": \"d3fmoh2rVoVNgIcpLTFZBE0jHnI2\" }, \"status\": { \"currentprice\": 34.08, \"lastprice\": -1, \"currentfloor\": 8, \"lastfloor\": 8, \"sr_ma_big\": 33.59299999999999, \"sr_ma_small\": 34.093333333333334, \"rezhim\": \"МА - закуп запрещён\", \"updated\": 1634165657 }, \"ttp\": { \"raschstopprice\": 33.9, \"curstop\": 0, \"curorderid\": 0, \"quantity\": 0, \"ttpbusy\": false, \"sold\": true, \"currentprice\": 34.1, \"final_price\": 34.01, \"finalorder\": 0, \"proskal\": false }, \"ttpbusy\": false, \"floors\": [[1, 30, 30.525, 30.03, 30.075000000000003, 30.255000000000003, 30.345000000000002, 0, 0, 0, 0, 0, 0, 0, 0], [2, 30.525, 31.0591875, 30.555525, 30.6013125, 30.7844625, 30.8760375, 0, 0, 0, 0, 0, 0, 0, 0], [3, 31.0591875, 31.60272328125, 31.0902466875, 31.13683546875, 31.32319059375, 31.416368156249998, 0, 0, 0, 0, 0, 0, 0, 0], [4, 31.60272328125, 32.15577093867188, 31.63432600453125, 31.681730089453126, 31.871346429140626, 31.966154598984375, 0, 0, 0, 0, 0, 0, 0, 0], [5, 32.15577093867188, 32.71849693009864, 32.18792670961055, 32.23616036601856, 32.429094991650594, 32.525562304466604, 0, 0, 0, 0, 0, 0, 0, 0], [6, 32.71849693009864, 33.291070626375365, 32.75121542702874, 32.800293172423885, 32.99660415400448, 33.09475964479478, 0, 0, 0, 0, 0, 0, 0, 0], [7, 33.291070626375365, 33.87366436233693, 33.32436169700174, 33.374298302941305, 33.574044726699555, 33.67391793857868, 3, 72992481, 1634252542436, \"33.32000000\", 0, 0, 0, \"0.61000000\"], [8, 33.87366436233693, 34.46645348867783, 33.90753802669927, 33.958348523242776, 34.1615905094168, 34.26321150250381, 3, 72904989, 1634239107684, \"33.91000000\", 0, 0, 0, \"0.61000000\"], [9, 34.46645348867783, 35.06961642472969, 34.500919942166504, 34.55261962239952, 34.75941834333159, 34.862817703797624, 0, 0, 0, 0, 0, 0, 0, 0], [10, 35.06961642472969, 35.683334712162456, 35.104686041154416, 35.15729046579151, 35.36770816433989, 35.47291701361408, 0, 0, 0, 0, 0, 0, 0, 0], [11, 35.683334712162456, 36.3077930696253, 35.719018046874616, 35.77254304894286, 35.98664305721583, 36.09369306135232, 2, 72780629, 1634227811609, \"35.72000000\", 0, 0, 0, \"0.58000000\"], [12, 36.3077930696253, 36.94317944834374, 36.34410086269492, 36.39856255229936, 36.61640931071711, 36.72533268992599, 0, 0, 0, 0, 0, 0, 0, 0], [13, 36.94317944834374, 37.589685088689755, 36.980122627792085, 37.0355373969646, 37.25719647365466, 37.368026011999696, 0, 0, 0, 0, 0, 0, 0, 0], [14, 37.589685088689755, 38.24750457774183, 37.627274773778446, 37.68365930141148, 37.90919741194362, 38.02196646720969, 0, 0, 0, 0, 0, 0, 0, 0], [15, 38.24750457774183, 38.91683590785231, 38.28575208231957, 38.34312333918618, 38.57260836665263, 38.68735088038586, 0, 0, 0, 0, 0, 0, 0, 0], [16, 38.91683590785231, 39.59788053623973, 38.955752743760165, 39.01412799762194, 39.24762901306905, 39.36437952079262, 0, 0, 0, 0, 0, 0, 0, 0], [17, 39.59788053623973, 40.29084344562392, 39.63747841677597, 39.69687523758033, 39.934462520797766, 40.053256162406484, 0, 0, 0, 0, 0, 0, 0, 0], [18, 40.29084344562392, 40.99593320592234, 40.331134289069546, 40.39157055423798, 40.63331561491172, 40.7541881452486, 0, 0, 0, 0, 0, 0, 0, 0], [19, 40.99593320592234, 41.71336203702598, 41.03692913912826, 41.09842303893714, 41.34439863817268, 41.467386437790445, 0, 0, 0, 0, 0, 0, 0, 0], [20, 41.71336203702598, 42.44334587267394, 41.75507539906301, 41.81764544211855, 42.0679256143407, 42.19306570045178, 0, 0, 0, 0, 0, 0, 0, 0], [21, 42.44334587267394, 43.186104425445734, 42.485789218546614, 42.549454237355626, 42.80411431259167, 42.93144435020969, 0, 0, 0, 0, 0, 0, 0, 0], [22, 43.186104425445734, 43.94186125289104, 43.22929052987118, 43.294069686509346, 43.55318631306202, 43.68274462633836, 0, 0, 0, 0, 0, 0, 0, 0], [23, 43.94186125289104, 44.71084382481663, 43.98580311414393, 44.05171590602326, 44.31536707354061, 44.44719265729928, 0, 0, 0, 0, 0, 0, 0, 0], [24, 44.71084382481663, 45.49328359175092, 44.755554668641444, 44.82262093437867, 45.09088599732757, 45.22501852880202, 0, 0, 0, 0, 0, 0, 0, 0], [25, 45.49328359175092, 46.289416054606555, 45.53877687534267, 45.6070168007303, 45.879976502280805, 46.01645635305606, 0, 0, 0, 0, 0, 0, 0, 0], [26, 46.289416054606555, 47.09948083556217, 46.33570547066116, 46.40513959474307, 46.68287609107071, 46.82174433923453, 0, 0, 0, 0, 0, 0, 0, 0], [27, 47.09948083556217, 47.923721750184505, 47.14658031639773, 47.21722953765107, 47.49982642266445, 47.641124865171136, 0, 0, 0, 0, 0, 0, 0, 0], [28, 47.923721750184505, 48.762386880812734, 47.97164547193469, 48.04353105455997, 48.331073385061075, 48.47484455031163, 0, 0, 0, 0, 0, 0, 0, 0], [29, 48.762386880812734, 49.61572865122696, 48.811149267693544, 48.884292848014766, 49.17686716929964, 49.32315432994208, 0, 0, 0, 0, 0, 0, 0, 0], [30, 49.61572865122696, 50.48400390262343, 49.665344379878185, 49.73976797285503, 50.03746234476239, 50.186309530716066, 0, 0, 0, 0, 0, 0, 0, 0], [31, 50.48400390262343, 51.367473970919335, 50.53448790652605, 50.61021391237999, 50.91311793579573, 51.0645699475036, 0, 0, 0, 0, 0, 0, 0, 0], [32, 51.367473970919335, 52.26640476541042, 51.418841444890255, 51.49589265584663, 51.804097499672146, 51.95819992158491, 0, 0, 0, 0, 0, 0, 0, 0], [33, 52.26640476541042, 53.1810668488051, 52.31867117017583, 52.39707077732395, 52.71066920591641, 52.867468420212646, 0, 0, 0, 0, 0, 0, 0, 0], [34, 53.1810668488051, 54.11173551865919, 53.23424791565391, 53.314019515927114, 53.63310591701995, 53.79264911756636, 0, 0, 0, 0, 0, 0, 0, 0], [35, 54.11173551865919, 55.058690890235724, 54.16584725417785, 54.24701485745584, 54.57168527056779, 54.73402047712377, 0, 0, 0, 0, 0, 0, 0, 0], [36, 55.058690890235724, 56.02221798081485, 55.11374958112596, 55.19633761746131, 55.526689762802725, 55.691865835473436, 0, 0, 0, 0, 0, 0, 0, 0], [37, 56.02221798081485, 57.00260679547911, 56.07824019879567, 56.16227352576689, 56.49840683365178, 56.666473487594224, 0, 0, 0, 0, 0, 0, 0, 0], [38, 57.00260679547911, 58.00015241439999, 57.05960940227459, 57.14511331246781, 57.48712895324068, 57.65813677362712, 0, 0, 0, 0, 0, 0, 0, 0], [39, 58.00015241439999, 59.01515508165199, 58.05815256681439, 58.14515279543599, 58.49315370992239, 58.66715416716559, 0, 0, 0, 0, 0, 0, 0, 0], [40, 59.01515508165199, 60.0479202955809, 59.07417023673364, 59.16269296935612, 59.51678389984603, 59.69382936509099, 0, 0, 0, 0, 0, 0, 0, 0]], \"finance\": { \"startdepo\": \"100\", \"depo\": 103.6, \"quotanal\": \"0.58\", \"quotainorders\": \"1.22\", \"basenal\": \"42.26\", \"baseinorders\": \"0.00\", \"profittoday\": 0 }, \"sales\": { \"today\": [[36.34, 38.32, 0.54, 1.0691999999999984, 0.0302373, 1.0389626999999984, \"Thu Oct 14 2021 03:33:24 \", \"Thu Oct 14 2021 04:41:33 \", \"1:08:09\"], [36.98, 38.32, 0.54, 0.7236000000000019, 0.030496499999999996, 0.6931035000000019, \"Thu Oct 14 2021 04:09:22 \", \"Thu Oct 14 2021 04:41:33 \", \"0:32:10\"], [37.63, 38.32, 0.53, 0.3656999999999988, 0.030190125, 0.3355098749999988, \"Thu Oct 14 2021 04:37:08 \", \"Thu Oct 14 2021 04:41:33 \", \"0:04:25\"], [38.29, 38.32, 0.52, 0.015600000000000593, 0.0298779, -0.014277899999999406, \"Thu Oct 14 2021 01:57:56 \", \"Thu Oct 14 2021 04:41:33 \", \"2:43:36\"], [38.29, 38.71509433962264, 0.53, 0.22529999999999867, 0.030609525000000005, 0.19469047499999867, \"Thu Oct 14 2021 05:25:21 \", \"Thu Oct 14 2021 05:36:15 \", \"0:10:54\"], [36.34, 36.66, 0.56, 0.1791999999999962, 0.030660000000000003, 0.1485399999999962, \"Thu Oct 14 2021 07:49:45 \", \"Thu Oct 14 2021 08:04:09 \", \"0:14:23\"], [36.34, 37.01, 0.56, 0.37519999999999704, 0.030807, 0.34439299999999706, \"Thu Oct 14 2021 10:31:03 \", \"Thu Oct 14 2021 11:28:08 \", \"0:57:05\"], [36.98, 37.04, 0.55, 0.03300000000000125, 0.030533249999999998, 0.0024667500000012527, \"Thu Oct 14 2021 09:20:59 \", \"Thu Oct 14 2021 11:28:59 \", \"2:07:59\"], [36.34, 36.41, 0.56, 0.03919999999999618, 0.030555000000000002, 0.00864499999999618, \"Thu Oct 14 2021 12:51:23 \", \"Thu Oct 14 2021 13:39:43 \", \"0:48:19\"], [35.72, 36.5, 0.56, 0.4368000000000007, 0.030332400000000002, 0.4064676000000007, \"Thu Oct 14 2021 15:41:55 \", \"Thu Oct 14 2021 17:26:03 \", \"1:44:07\"], [36.34, 36.5, 0.56, 0.0895999999999981, 0.030592800000000003, 0.059007199999998095, \"Thu Oct 14 2021 14:15:04 \", \"Thu Oct 14 2021 17:26:03 \", \"3:10:59\"], [35.72, 36.190000000000005, 0.57, 0.26790000000000336, 0.030741524999999995, 0.23715847500000337, \"Thu Oct 14 2021 18:12:46 \", \"Thu Oct 14 2021 19:03:57 \", \"0:51:10\"], [36.34, 37.059999999999995, 0.56, 0.4031999999999954, 0.030828000000000005, 0.3723719999999954, \"Thu Oct 14 2021 17:26:20 \", \"Thu Oct 14 2021 19:05:43 \", \"1:39:23\"], [36.98, 37.059999999999995, 0.55, 0.04399999999999907, 0.0305415, 0.013458499999999068, \"Thu Oct 14 2021 11:33:21 \", \"Thu Oct 14 2021 19:05:43 \", \"7:32:21\"], [37.63, 37.73, 0.54, 0.05399999999999693, 0.0305208, 0.02347919999999693, \"Thu Oct 14 2021 05:41:00 \", \"Thu Oct 14 2021 19:06:36 \", \"13:25:35\"], [33.91, 33.93, 0.61, 0.012200000000001907, 0.0310368, -0.018836799999998093, \"Thu Oct 14 2021 20:30:05 \", \"Thu Oct 14 2021 20:41:31 \", \"0:11:26\"], [33.91, 33.98, 0.61, 0.042700000000000175, 0.03105967499999999, 0.011640325000000184, \"Thu Oct 14 2021 20:41:32 \", \"Thu Oct 14 2021 22:10:13 \", \"1:28:41\"], [33.32, 33.589999999999996, 0.61, 0.16469999999999757, 0.030611324999999995, 0.13408867499999758, \"Fri Oct 15 2021 00:21:05 \", \"Fri Oct 15 2021 01:24:19 \", \"1:03:14\"]], \"days\": [], \"all\": [[36.34, 38.32, 0.54, 1.0691999999999984, 0.0302373, 1.0389626999999984, \"Thu Oct 14 2021 03:33:24 \", \"Thu Oct 14 2021 04:41:33 \", \"1:08:09\"], [36.98, 38.32, 0.54, 0.7236000000000019, 0.030496499999999996, 0.6931035000000019, \"Thu Oct 14 2021 04:09:22 \", \"Thu Oct 14 2021 04:41:33 \", \"0:32:10\"], [37.63, 38.32, 0.53, 0.3656999999999988, 0.030190125, 0.3355098749999988, \"Thu Oct 14 2021 04:37:08 \", \"Thu Oct 14 2021 04:41:33 \", \"0:04:25\"], [38.29, 38.32, 0.52, 0.015600000000000593, 0.0298779, -0.014277899999999406, \"Thu Oct 14 2021 01:57:56 \", \"Thu Oct 14 2021 04:41:33 \", \"2:43:36\"], [38.29, 38.71509433962264, 0.53, 0.22529999999999867, 0.030609525000000005, 0.19469047499999867, \"Thu Oct 14 2021 05:25:21 \", \"Thu Oct 14 2021 05:36:15 \", \"0:10:54\"], [36.34, 36.66, 0.56, 0.1791999999999962, 0.030660000000000003, 0.1485399999999962, \"Thu Oct 14 2021 07:49:45 \", \"Thu Oct 14 2021 08:04:09 \", \"0:14:23\"], [36.34, 37.01, 0.56, 0.37519999999999704, 0.030807, 0.34439299999999706, \"Thu Oct 14 2021 10:31:03 \", \"Thu Oct 14 2021 11:28:08 \", \"0:57:05\"], [36.98, 37.04, 0.55, 0.03300000000000125, 0.030533249999999998, 0.0024667500000012527, \"Thu Oct 14 2021 09:20:59 \", \"Thu Oct 14 2021 11:28:59 \", \"2:07:59\"], [36.34, 36.41, 0.56, 0.03919999999999618, 0.030555000000000002, 0.00864499999999618, \"Thu Oct 14 2021 12:51:23 \", \"Thu Oct 14 2021 13:39:43 \", \"0:48:19\"], [35.72, 36.5, 0.56, 0.4368000000000007, 0.030332400000000002, 0.4064676000000007, \"Thu Oct 14 2021 15:41:55 \", \"Thu Oct 14 2021 17:26:03 \", \"1:44:07\"], [36.34, 36.5, 0.56, 0.0895999999999981, 0.030592800000000003, 0.059007199999998095, \"Thu Oct 14 2021 14:15:04 \", \"Thu Oct 14 2021 17:26:03 \", \"3:10:59\"], [35.72, 36.190000000000005, 0.57, 0.26790000000000336, 0.030741524999999995, 0.23715847500000337, \"Thu Oct 14 2021 18:12:46 \", \"Thu Oct 14 2021 19:03:57 \", \"0:51:10\"], [36.34, 37.059999999999995, 0.56, 0.4031999999999954, 0.030828000000000005, 0.3723719999999954, \"Thu Oct 14 2021 17:26:20 \", \"Thu Oct 14 2021 19:05:43 \", \"1:39:23\"], [36.98, 37.059999999999995, 0.55, 0.04399999999999907, 0.0305415, 0.013458499999999068, \"Thu Oct 14 2021 11:33:21 \", \"Thu Oct 14 2021 19:05:43 \", \"7:32:21\"], [37.63, 37.73, 0.54, 0.05399999999999693, 0.0305208, 0.02347919999999693, \"Thu Oct 14 2021 05:41:00 \", \"Thu Oct 14 2021 19:06:36 \", \"13:25:35\"], [33.91, 33.93, 0.61, 0.012200000000001907, 0.0310368, -0.018836799999998093, \"Thu Oct 14 2021 20:30:05 \", \"Thu Oct 14 2021 20:41:31 \", \"0:11:26\"], [33.91, 33.98, 0.61, 0.042700000000000175, 0.03105967499999999, 0.011640325000000184, \"Thu Oct 14 2021 20:41:32 \", \"Thu Oct 14 2021 22:10:13 \", \"1:28:41\"], [33.32, 33.589999999999996, 0.61, 0.16469999999999757, 0.030611324999999995, 0.13408867499999758, \"Fri Oct 15 2021 00:21:05 \", \"Fri Oct 15 2021 01:24:19 \", \"1:03:14\"]] }, \"zapret_na_zakup\": true }, \"trackname\": \"track-BADGERUSDT-16341656576de6a6f6190fe321\", \"_event\": \"node:c80bf4b14fe4742e\", \"rate\": 250, \"service\": false }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 2360,
        "wires": [
            [
                "e681279a23d56ae3"
            ]
        ]
    },
    {
        "id": "9a2840420c57f1f3",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "4b5621a5daf6eb8e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1030,
        "y": 2380,
        "wires": [
            [
                "13ad98b8ecd2464f"
            ]
        ]
    },
    {
        "id": "3d1bef8b5ea92205",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setleads to redis",
        "func": "let guid = env.get(\"GOOGLEUID\");\nlet volname = guid + \"-leads\";\nlet leads = global.get(volname);\nif (leads) {\nconst upd = global.get('setleads')(leads);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n    node.done();\n    node.status({ fill: \"green\", shape: \"ring\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n})\n} else {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "6407a990a596d253",
        "type": "trigger",
        "z": "5df15275.2888ec",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-30",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 550,
        "y": 580,
        "wires": [
            [
                "3d1bef8b5ea92205"
            ]
        ]
    },
    {
        "id": "aee34947d1368921",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "getleads from redis",
        "func": "let guid = global.get('guid');\nlet volname = guid + \"-leads\";\n\nconst upd = global.get('getleads')(guid);\n\nupd.then(upd => {\n    global.set(volname, JSON.parse(upd));\n\n    msg.payload = upd;\n    node.done();\n    node.status({ fill: \"green\", shape: \"ring\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "e319415d743691e1",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "setbot_onoff",
        "func": "\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.botname + \":onoff\";\nmsg.payload = JSON.stringify(msg.bot.onoff);\n\nconst upd = global.get('setbot_status')(msg.topic, msg.payload);\n\nupd.then(upd => {\n    msg.payload = upd;\n    node.done();\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "c507a34417416492",
        "type": "filter",
        "z": "5df15275.2888ec",
        "name": "filter off",
        "property": "bot.onoff",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1020,
        "y": 520,
        "wires": [
            [
                "6f242c47c67dc90a"
            ]
        ]
    },
    {
        "id": "6f242c47c67dc90a",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 560,
        "wires": [
            [
                "9ed590fb177c65fa",
                "b71ccac226cfd352",
                "950fa7fabc4ef79a",
                "e319415d743691e1"
            ]
        ]
    },
    {
        "id": "adea58cf1d37535a",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 550,
        "y": 420,
        "wires": [
            [
                "5f90fe219f3162fa"
            ]
        ]
    },
    {
        "id": "d05ba51a646b7a75",
        "type": "memqueue in",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "qu-candle",
        "queue": "a504dfae3584b3f9",
        "x": 1820,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "653d2c0d1c651d4f",
        "type": "memqueue out",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "",
        "queue": "a504dfae3584b3f9",
        "x": 1820,
        "y": 360,
        "wires": [
            [
                "b082667c299cc83e"
            ]
        ]
    },
    {
        "id": "567fc913a071b7ce",
        "type": "memqueue ack",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "",
        "queue": "a504dfae3584b3f9",
        "x": 2430,
        "y": 340,
        "wires": []
    },
    {
        "id": "6c2d5763735d054d",
        "type": "memqueue resend",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "",
        "queue": "a504dfae3584b3f9",
        "x": 2440,
        "y": 380,
        "wires": []
    },
    {
        "id": "823a50182e5deb94",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 420,
        "wires": []
    },
    {
        "id": "36011629685d68b6",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 1340,
        "wires": [
            [
                "5dc151b369e35d87"
            ]
        ]
    },
    {
        "id": "db36372841c7b544",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 1440,
        "wires": [
            [
                "54fb5be9ddfd7309"
            ]
        ]
    },
    {
        "id": "54fb5be9ddfd7309",
        "type": "change",
        "z": "5df15275.2888ec",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "trigger",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 1440,
        "wires": [
            [
                "5dc151b369e35d87"
            ]
        ]
    },
    {
        "id": "0d0b2d0814e3e1c6",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 1500,
        "wires": [
            [
                "65700bac37bda812"
            ]
        ]
    },
    {
        "id": "65700bac37bda812",
        "type": "change",
        "z": "5df15275.2888ec",
        "name": "Bypass set to true",
        "rules": [
            {
                "t": "set",
                "p": "bypass",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 1500,
        "wires": [
            [
                "5dc151b369e35d87"
            ]
        ]
    },
    {
        "id": "c17fc5399272b55d",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "test",
        "payloadType": "str",
        "x": 490,
        "y": 1300,
        "wires": [
            [
                "6439679f867c01a0"
            ]
        ]
    },
    {
        "id": "6439679f867c01a0",
        "type": "change",
        "z": "5df15275.2888ec",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ttl",
                "pt": "msg",
                "to": "1000",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 1300,
        "wires": [
            [
                "5dc151b369e35d87"
            ]
        ]
    },
    {
        "id": "a69dde7d4c498ee2",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 1540,
        "wires": [
            [
                "d35f2ba1cc2352c1"
            ]
        ]
    },
    {
        "id": "d35f2ba1cc2352c1",
        "type": "change",
        "z": "5df15275.2888ec",
        "name": "Bypass set to false",
        "rules": [
            {
                "t": "set",
                "p": "bypass",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 670,
        "y": 1540,
        "wires": [
            [
                "5dc151b369e35d87"
            ]
        ]
    },
    {
        "id": "f6095a8124937461",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 1400,
        "wires": [
            [
                "449cc5985101f20f"
            ]
        ]
    },
    {
        "id": "449cc5985101f20f",
        "type": "change",
        "z": "5df15275.2888ec",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 1400,
        "wires": [
            [
                "5dc151b369e35d87"
            ]
        ]
    },
    {
        "id": "4611cd7b32ca634a",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 480,
        "y": 1260,
        "wires": [
            [
                "e0c48aa6843ed31b"
            ]
        ]
    },
    {
        "id": "e0c48aa6843ed31b",
        "type": "change",
        "z": "5df15275.2888ec",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "queueCount",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 1260,
        "wires": [
            [
                "5dc151b369e35d87"
            ]
        ]
    },
    {
        "id": "5dc151b369e35d87",
        "type": "simple-queue",
        "z": "5df15275.2888ec",
        "name": "tesq",
        "firstMessageBypass": true,
        "bypassInterval": "0",
        "x": 900,
        "y": 1340,
        "wires": [
            [
                "8ca24d0db8eebc32",
                "f87ce112cc243605"
            ]
        ]
    },
    {
        "id": "658ed58dc310af10",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 1730,
        "y": 1340,
        "wires": []
    },
    {
        "id": "f40982c1db8cc214",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "main:ex1",
        "obj": true,
        "timeout": 0,
        "x": 420,
        "y": 1740,
        "wires": [
            [
                "6ed6a7220103c678",
                "d518ad315a4638e0"
            ]
        ]
    },
    {
        "id": "6ed6a7220103c678",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 430,
        "y": 1800,
        "wires": []
    },
    {
        "id": "bcfb94642650e000",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "load payload ",
        "func": "msg.topic = \"main:\"+msg.payload;\nmsg.payload = {\n    bot: msg.bot\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 1340,
        "wires": [
            [
                "658ed58dc310af10",
                "c40127e6457bc2f9"
            ]
        ]
    },
    {
        "id": "728b61077b48fd06",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "ex1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "rl",
        "payload": "ex1",
        "payloadType": "str",
        "x": 430,
        "y": 1680,
        "wires": [
            [
                "2a2c8497c993ab1e"
            ]
        ]
    },
    {
        "id": "2a2c8497c993ab1e",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "push rl",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1680,
        "wires": [
            [
                "586db58502285f60"
            ]
        ]
    },
    {
        "id": "586db58502285f60",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "rpush",
        "name": "",
        "topic": "rl",
        "obj": true,
        "x": 710,
        "y": 1680,
        "wires": []
    },
    {
        "id": "b0ec6d3556146b80",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "push rl",
        "func": "msg = {\n    payload : \"ex1\",\n    topic : \"rl\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1740,
        "wires": [
            [
                "368e3818ec8170f1"
            ]
        ]
    },
    {
        "id": "368e3818ec8170f1",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "lpush",
        "name": "",
        "topic": "rl",
        "obj": true,
        "x": 890,
        "y": 1740,
        "wires": []
    },
    {
        "id": "bc70ce255a0dca6c",
        "type": "json",
        "z": "5df15275.2888ec",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": true,
        "x": 1390,
        "y": 1340,
        "wires": [
            [
                "bcfb94642650e000",
                "d78761febdb1624d"
            ]
        ]
    },
    {
        "id": "690d630b66c01125",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "worked",
        "obj": false,
        "timeout": 0,
        "x": 500,
        "y": 1440,
        "wires": [
            [
                "54fb5be9ddfd7309"
            ]
        ]
    },
    {
        "id": "fa71d31d5b1ae6f3",
        "type": "link in",
        "z": "5df15275.2888ec",
        "name": "link in 1",
        "links": [
            "c80bf4b14fe4742e"
        ],
        "x": 635,
        "y": 1340,
        "wires": [
            [
                "5dc151b369e35d87",
                "4f807437e6687a2e"
            ]
        ]
    },
    {
        "id": "4fa803ded0ed2c5b",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 4390,
        "y": 2260,
        "wires": []
    },
    {
        "id": "6f4d3d03eeed698b",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "tgmsg",
        "func": "let posttg = JSON.stringify(msg.posttg);\nlet guid = global.get('guid');\nlet typemsg = \"lead\";\nmsg = {};\n\nmsg.payload = { posttg, guid, typemsg};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4250,
        "y": 2260,
        "wires": [
            [
                "4fa803ded0ed2c5b"
            ]
        ]
    },
    {
        "id": "b182b473f063c7ea",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3510,
        "y": 2320,
        "wires": []
    },
    {
        "id": "cc707e17a7435b1c",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 4630,
        "y": 1700,
        "wires": []
    },
    {
        "id": "df1fcf4ce2fec0f4",
        "type": "redis-in",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "main:ex2",
        "obj": true,
        "timeout": 0,
        "x": 2820,
        "y": 1800,
        "wires": [
            [
                "3b6deb54469f911d",
                "4c8f8970046d18c2"
            ]
        ]
    },
    {
        "id": "3b6deb54469f911d",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 2830,
        "y": 1860,
        "wires": []
    },
    {
        "id": "dd9370abe3d936c7",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "ex2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "rl",
        "payload": "ex2",
        "payloadType": "str",
        "x": 2830,
        "y": 1740,
        "wires": [
            [
                "7bc5dff3c3d15338"
            ]
        ]
    },
    {
        "id": "7bc5dff3c3d15338",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "push rl",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 1740,
        "wires": [
            [
                "a78896a6a46a6145"
            ]
        ]
    },
    {
        "id": "a78896a6a46a6145",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "rpush",
        "name": "",
        "topic": "rl",
        "obj": true,
        "x": 3110,
        "y": 1740,
        "wires": []
    },
    {
        "id": "01c9c91c25e56a7f",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "lpush",
        "name": "",
        "topic": "rl",
        "obj": true,
        "x": 3290,
        "y": 1800,
        "wires": []
    },
    {
        "id": "609cc624a17035cc",
        "type": "link in",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "finish track setbotfree",
        "links": [
            "04e23e81161e4a2f",
            "04f838f4dcf92c27",
            "072c1d3a07edfbfb",
            "159777891efadb83",
            "197f2eae23350bde",
            "1ee59cd0dcc3c69b",
            "3cca40b6fb3f74a7",
            "563d3c7cf2cd4b45",
            "6460e25babb0c7cc",
            "720d521686c307c6",
            "84de70195e8eeec9",
            "96b4f32d26754311",
            "97c944361390ef7f",
            "c687d087.0896d",
            "d108b7f4de207c72",
            "d2965d20fb057ea3",
            "e0a18e1cc9e2532d",
            "c55aa818edeee318",
            "ff26ac7ccf964923",
            "1b3e671be6b572d5",
            "378e488cecf6ffc2",
            "822a640986e32473",
            "9a2a545194209ea6",
            "c6b2e3e9d09dc7ab",
            "24b7b6edbf44e542",
            "0cf1654560ff06a3",
            "b72d192f770419d4",
            "dc25556dfb0429b4",
            "a70c78aeb96b6bba",
            "ed7621f56d07dc08",
            "334dc59dd4302182",
            "9286f6c79084e809",
            "6e33907944a00520",
            "5146160565d82180",
            "359f868e6a108b92",
            "a5d9d2953ce99426",
            "11aebd69afd877b4",
            "a78e47ef4a583aa3",
            "8bb50be67bb00371",
            "46817b364f8c4463",
            "168d6b39a90f0979",
            "50b9f3b0d6b0350a",
            "1eacca0442cea4af",
            "7f0a9ffb2eb5b4d8",
            "2794da7d6f473613",
            "eb3c309974af1cf2",
            "8517ca0472294dec",
            "20729f025f688461",
            "a462aac9c71276fd",
            "d6558ff47e608f86",
            "a4dfcf58c6df6c09",
            "e020264e534bd10f",
            "e61fb63cc51ecf7b",
            "8afd1f55086955c7",
            "e3528b9ed8ed61ad",
            "9542eb88cb3f8639",
            "548b4a7bdac897fb",
            "ecdf9874c91eb6b0",
            "41aa97ed31b0f3eb",
            "2dc6fb306ffaf8ae"
        ],
        "x": 3595,
        "y": 2120,
        "wires": [
            [
                "54c0b4aaa6901001"
            ]
        ]
    },
    {
        "id": "fa047338376edb73",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "FLOOR CHECK",
        "info": "",
        "x": 3940,
        "y": 2440,
        "wires": []
    },
    {
        "id": "4c8f8970046d18c2",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "busy = true",
        "func": "msg.bot = msg.payload.bot;\nmsg.botname = msg.payload.bot.settings.botname;\nglobal.set(msg.botname+\"-busy\", true);\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2770,
        "y": 2300,
        "wires": [
            [
                "647afba13757c62f"
            ]
        ]
    },
    {
        "id": "647afba13757c62f",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "service step count",
        "func": "\nlet id = \"srv-\" + msg.botname;\nvar count = flow.get(id) || 0;\ncount += 1;\n//node.warn(count);\nflow.set(id, count);\nif (count >= 10) {\n    msg.service = true;\n    flow.set(id, 0);\n} else {\n    msg.service = false;\n\n}\nnode.status({ fill: \"green\", shape: \"dot\" });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 2300,
        "wires": [
            [
                "9ce530e3f78fd37b"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "3681e9fb3923ac70",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "busy = false",
        "func": "\nglobal.set(msg.botname+\"-busy\", false);\nflow.set(msg.botname, 0);\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 2120,
        "wires": [
            [
                "44c2acacbd21ff06"
            ]
        ]
    },
    {
        "id": "9ce530e3f78fd37b",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "getprice, MA",
        "func": "\nlet moneta = msg.bot.settings.moneta;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n\n    msg.bot.status.currentprice = gp;\n    let volname = msg.bot.settings.botname + \"-MA-big\";\n    msg.bot.status.sr_ma_big = Number(flow.get(volname));\n\n    let volname2 = msg.bot.settings.botname + \"-MA-small\";\n    msg.bot.status.sr_ma_small = Number(flow.get(volname2));\n\n\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2650,
        "y": 2400,
        "wires": [
            [
                "4244bd5b74ba70e9"
            ]
        ]
    },
    {
        "id": "4244bd5b74ba70e9",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "MA zapret calculate",
        "func": "\nmsg.bot.status.currentprice = Number(msg.bot.status.currentprice);\n\nif ((msg.bot.status.currentprice > msg.bot.status.sr_ma_big) && (msg.bot.status.currentprice > msg.bot.status.sr_ma_small)) {\n    msg.bot.zapret_na_zakup = false;\n    msg.bot.status.rezhim = \"МА - закуп разрешен\";\n\n} else {\n    msg.bot.zapret_na_zakup = true;\n    msg.bot.status.rezhim = \"МА - закуп запрещён\";\n\n}\n\nnode.status({ fill: \"green\", shape: \"dot\" });\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2860,
        "y": 2400,
        "wires": [
            [
                "0d9992895001e1dd"
            ]
        ]
    },
    {
        "id": "a3297522d90a836e",
        "type": "switch",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "sold ?",
        "property": "bot.ttp.sold",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3250,
        "y": 2400,
        "wires": [
            [
                "f3436c1fdc5c6566"
            ],
            [
                "8a207f5ce11470c2"
            ]
        ]
    },
    {
        "id": "0d9992895001e1dd",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "пересчет депо",
        "func": "\nlet p = Number(msg.bot.status.currentprice);\nmsg.bot.finance.depo = Number((Number(msg.bot.finance.quotanal) * p + Number(msg.bot.finance.quotainorders) * p + Number(msg.bot.finance.basenal) + Number(msg.bot.finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3080,
        "y": 2400,
        "wires": [
            [
                "a3297522d90a836e"
            ]
        ]
    },
    {
        "id": "54c0b4aaa6901001",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "setbot global",
        "func": "\nglobal.set(msg.botname + \"-status\", msg.bot.status);\n\nlet data = {\n    \"floors\": msg.bot.floors,\n    \"finance\": msg.bot.finance,\n    \"sales\": msg.bot.sales\n}\n//msg.bot.data = data;\nglobal.set(msg.botname + \"-data\", data);\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3730,
        "y": 2120,
        "wires": [
            [
                "3681e9fb3923ac70"
            ]
        ]
    },
    {
        "id": "8a207f5ce11470c2",
        "type": "switch",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "service tick",
        "property": "service",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3450,
        "y": 2540,
        "wires": [
            [
                "6bbfe5924449adc4"
            ],
            [
                "152cccd4ded51aed"
            ]
        ]
    },
    {
        "id": "6bbfe5924449adc4",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "определяем этаж",
        "func": "\nlet lp = Number(msg.bot.status.currentprice);\nlet f = msg.bot.floors;\n\nvar curfloor = f.filter(function (floor) {\n    return ((floor[1] <= lp) && (floor[2] > lp));\n});\n\nif (curfloor[0]) {\n\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n\n    msg.bot.currentfloor = curfloor[0];\n    msg.bot.status.lastfloor = msg.bot.status.currentfloor;\n    msg.bot.status.currentfloor = curfloor[0][0];\n\n    msg.bot.downfloor = f[msg.bot.status.currentfloor - 2];\n    return [msg, null];\n}\nelse {\n\n    node.status({ fill: \"blue\", shape: \"dot\" });\n    // node.warn(\"вне сетки\"); \n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3670,
        "y": 2480,
        "wires": [
            [
                "5b558081f66acb32"
            ],
            [
                "8afd1f55086955c7"
            ]
        ]
    },
    {
        "id": "b7adcbaf8bf534c7",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "вне сетки",
        "info": "",
        "x": 3920,
        "y": 2520,
        "wires": []
    },
    {
        "id": "e020264e534bd10f",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "609cc624a17035cc",
            "bbeab97c6a252674",
            "a4527bfabf64a1b1"
        ],
        "x": 4135,
        "y": 2440,
        "wires": []
    },
    {
        "id": "152cccd4ded51aed",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "floors array prepare",
        "func": "msg.payload = msg.bot.floors;\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3670,
        "y": 2600,
        "wires": [
            [
                "b57bc4758e270b33"
            ]
        ]
    },
    {
        "id": "b57bc4758e270b33",
        "type": "split",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 3850,
        "y": 2600,
        "wires": [
            [
                "c58d7b2a4583c819"
            ]
        ]
    },
    {
        "id": "c58d7b2a4583c819",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "concrete floor select",
        "func": "msg.bot.currentfloor = msg.payload;\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4040,
        "y": 2600,
        "wires": [
            [
                "7b6c884e840b62d8"
            ]
        ]
    },
    {
        "id": "b08ade8a215c1ac6",
        "type": "join",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 4590,
        "y": 2600,
        "wires": [
            [
                "e61fb63cc51ecf7b"
            ]
        ]
    },
    {
        "id": "e61fb63cc51ecf7b",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "609cc624a17035cc",
            "bbeab97c6a252674",
            "a4527bfabf64a1b1"
        ],
        "x": 4695,
        "y": 2600,
        "wires": []
    },
    {
        "id": "8afd1f55086955c7",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "",
        "links": [
            "e34a5b68.726ec8",
            "609cc624a17035cc",
            "bbeab97c6a252674",
            "a4527bfabf64a1b1"
        ],
        "x": 3815,
        "y": 2520,
        "wires": []
    },
    {
        "id": "5b558081f66acb32",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "",
        "links": [
            "179defa09285937f"
        ],
        "x": 3815,
        "y": 2440,
        "wires": []
    },
    {
        "id": "35158053d0f5b216",
        "type": "link in",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "",
        "links": [
            "a2375dc0e61e0bfc"
        ],
        "x": 4075,
        "y": 2440,
        "wires": [
            [
                "e020264e534bd10f",
                "3c98f7c8f5b03c16"
            ]
        ]
    },
    {
        "id": "3a408942189cd261",
        "type": "comment",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "FLOOR SERVICE",
        "info": "",
        "x": 4340,
        "y": 2600,
        "wires": []
    },
    {
        "id": "7b6c884e840b62d8",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "",
        "links": [
            "a0bc75354d0a725c"
        ],
        "x": 4195,
        "y": 2600,
        "wires": []
    },
    {
        "id": "e04dadffe51e86f0",
        "type": "link in",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "",
        "links": [
            "d1f5e69b0d94d6c0"
        ],
        "x": 4475,
        "y": 2600,
        "wires": [
            [
                "b08ade8a215c1ac6"
            ]
        ]
    },
    {
        "id": "3c98f7c8f5b03c16",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4240,
        "y": 2440,
        "wires": [
            []
        ]
    },
    {
        "id": "719516716fd02709",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "setbot_ttp reset",
        "func": "\nmsg.bot.ttp.curstop = 0;\nmsg.bot.ttp.raschstopprice = 0;\nmsg.bot.ttp.curorderid = 0;\nmsg.bot.ttp.sold = false;\n//msg.bot.ttp.ttpbusy = false;\nmsg.bot.ttp.currentprice = 0;\nmsg.bot.ttp.quantity = 0;\nmsg.bot.ttp.final_price = 0;\nmsg.bot.ttp.finalorder = 0;\nmsg.bot.ttp.proskal = false;\n\nglobal.set(msg.botname + \"-ttp\", msg.bot.ttp);\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4320,
        "y": 2360,
        "wires": [
            [
                "2dc6fb306ffaf8ae"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "2dc6fb306ffaf8ae",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "",
        "links": [
            "609cc624a17035cc"
        ],
        "x": 4455,
        "y": 2360,
        "wires": []
    },
    {
        "id": "8602261aa2a7c90e",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "регистрация сделки",
        "func": "let guid = global.get('guid');\nlet leads = global.get(guid + '-leads') || [];\n\n\nlet lead = {};\n\nlet node_time = new Date().getTime();\nlet date = new Date();\n\nlet endtime = date.toString().split('GMT')[0];\nlet posttg = [];\nlet commision = global.get(\"commision\");\n\nlet sellprice = Number(msg.bot.ttp.final_price);\n\nlet tempfin = Number(Number(msg.bot.finance.quotainorders) - Number(msg.bot.ttp.quantity));\nlet tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.ttp.quantity) * sellprice);\n\nvar floors = msg.bot.floors;\nlet sumsales = 0;\n\n\nfunction formatTime(timestamp) {\n    let date = new Date(timestamp);\n    //let time = new Date(timestamp).getTime();\n    return date.toString().split('GMT')[0];\n}\n\nfunction timeDistance(date1, date2) {\n    let distance = Math.abs(date1 - date2);\n    const hours = Math.floor(distance / 3600000);\n    distance -= hours * 3600000;\n    const minutes = Math.floor(distance / 60000);\n    distance -= minutes * 60000;\n    const seconds = Math.floor(distance / 1000);\n    return `${hours}:${('0' + minutes).slice(-2)}:${('0' + seconds).slice(-2)}`;\n};\n\n//const getleads = global.get('getleads')(guid);\n//var leads = {};\n//\n//getleads.then(gbl => {\n//    leads = JSON.parse(gbl);\n//});\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 3) {\n\n\n        let starttime = formatTime(item[9]);\n\n        let duration = timeDistance(node_time, item[9]);\n\n        let buyprice = Number(item[10]);\n        let quantity = Number(item[14]);\n        let p = quantity * (sellprice - buyprice);\n        let c = quantity * (Number(sellprice + buyprice)) / 100 * commision;\n        let net = p - c;\n        tempfin2 = tempfin2 - c;\n        msg.bot.sales.today.push([buyprice, sellprice, quantity, p, c, net, starttime, endtime, duration]);\n        msg.bot.sales.all.push([buyprice, sellprice, quantity, p, c, net, starttime, endtime, duration]);\n        sumsales = sumsales + net;\n\n        //node.warn([buyprice, sellprice, quantity, p, c, net, starttime, endtime, duration]);\n\n        let botname = msg.botname;\n        let datamsg = \"\\n\" + botname\n            + \"\\n Прибыль\" + net.toFixed(msg.bot.settings.digitq)\n            + \"\\n Покупка: \" + starttime + \"Цена:\" + buyprice\n            + \"\\n Продажа: \" + endtime + \"Цена:\" + sellprice\n            + \"\\n Длительность: \" + duration;\n        const tilog = global.get('tilog')(botname, datamsg);\n        tilog;\n\n        let msgfortg = {\n            \"botname\": botname,\n            \"profit\": net,\n            \"duration\": duration,\n            \"moneta\": msg.bot.settings.basecoin\n        };\n\n\n\n        let posttg = JSON.stringify(msgfortg);\n\n        leads.push(msgfortg);\n        global.set(guid + '-leads', leads);\n\n        let typemsg = \"lead\";\n        const tglead = global.get('tglead')(posttg, guid, typemsg);\n        tglead;\n\n\n        //posttg.push(msgfortg);\n\n        node.warn(msgfortg);\n\n        item[7] = 0;\n        item[8] = 0;\n        item[9] = 0;\n        item[10] = 0;\n        item[11] = 0;\n        item[12] = 0;\n        item[13] = 0;\n        item[14] = 0;\n\n\n\n\n    //count += 1;\n       //if (leads) {\n       //    lead = {\n       //        \"count\": leads.count + 1 || 1,\n       //        \"profit\": leads.profit + net || net\n       //    }\n       //} else {\n       //    lead = {\n       //        \"count\": 1,\n       //        \"profit\": net\n       //    }\n       //}\n       //const addlead = global.get('addlead')(guid, JSON.stringify(lead));\n       //addlead;\n//\n\n\n        node.status({ fill: \"green\", shape: \"dot\" });\n\n\n    }\n});\n\n\n\nmsg.posttg = posttg;\n\n\n\n\nif (sumsales != 0) {\n\n    msg.sumsales = sumsales;\n    msg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\n    msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitq);\n\n    if (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\n    if (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\n    msg.bot.floors = floors;\n}\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nnode.warn(\"регистрация сделки\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3740,
        "y": 2360,
        "wires": [
            [
                "a1449b6ef8258e68"
            ]
        ]
    },
    {
        "id": "f3436c1fdc5c6566",
        "type": "switch",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "bot.ttp.final_price > 0",
        "property": "bot.ttp.final_price",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 3480,
        "y": 2280,
        "wires": [
            [
                "f68065af5fc2c804",
                "41aa97ed31b0f3eb"
            ],
            [
                "8602261aa2a7c90e",
                "b182b473f063c7ea"
            ]
        ]
    },
    {
        "id": "f68065af5fc2c804",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "tilog",
        "func": "var floors = msg.bot.floors;\nlet nonzeroflors = [];\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] != 0) {\n\n        nonzeroflors.push(item);\n\n    }\n});\n\nnonzeroflors = JSON.stringify(nonzeroflors || \"\", null, '\\t');\n\n\n\n\n\nlet botdump = JSON.stringify(msg.bot.ttp || \"\", null, '\\t');\n\n\n\n\nlet botname = msg.bot.settings.botname;\nlet data = \"final price = 0 : \" + botname + botdump + nonzeroflors;\n\n\nconst tilog = global.get('tilog')(botname, data);\n\ntilog.then(tilog => {\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3690,
        "y": 2200,
        "wires": [
            []
        ]
    },
    {
        "id": "41aa97ed31b0f3eb",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "",
        "links": [
            "609cc624a17035cc"
        ],
        "x": 3655,
        "y": 2280,
        "wires": []
    },
    {
        "id": "a1449b6ef8258e68",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4040,
        "y": 2360,
        "wires": [
            [
                "719516716fd02709"
            ]
        ]
    },
    {
        "id": "a43d8ab136391cb3",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "",
        "func": "msg = { \"topic\": \"BADGERUSDT-1634165657\", \"payload\": \"BADGERUSDT-1634165657\", \"parts\": { \"id\": \"918bd9b4bea0fe31\", \"type\": \"array\", \"count\": 5, \"len\": 1, \"index\": 4 }, \"_msgid\": \"6de6a6f6190fe321\", \"botname\": \"BADGERUSDT-1634165657\", \"bot\": { \"busy\": false, \"data\": { \"floors\": [[1, 30, 30.525, 30.03, 30.075000000000003, 30.255000000000003, 30.345000000000002, 0, 0, 0, 0, 0, 0, 0, 0], [2, 30.525, 31.0591875, 30.555525, 30.6013125, 30.7844625, 30.8760375, 0, 0, 0, 0, 0, 0, 0, 0], [3, 31.0591875, 31.60272328125, 31.0902466875, 31.13683546875, 31.32319059375, 31.416368156249998, 0, 0, 0, 0, 0, 0, 0, 0], [4, 31.60272328125, 32.15577093867188, 31.63432600453125, 31.681730089453126, 31.871346429140626, 31.966154598984375, 0, 0, 0, 0, 0, 0, 0, 0], [5, 32.15577093867188, 32.71849693009864, 32.18792670961055, 32.23616036601856, 32.429094991650594, 32.525562304466604, 0, 0, 0, 0, 0, 0, 0, 0], [6, 32.71849693009864, 33.291070626375365, 32.75121542702874, 32.800293172423885, 32.99660415400448, 33.09475964479478, 0, 0, 0, 0, 0, 0, 0, 0], [7, 33.291070626375365, 33.87366436233693, 33.32436169700174, 33.374298302941305, 33.574044726699555, 33.67391793857868, 3, 72992481, 1634252542436, \"33.32000000\", 0, 0, 0, \"0.61000000\"], [8, 33.87366436233693, 34.46645348867783, 33.90753802669927, 33.958348523242776, 34.1615905094168, 34.26321150250381, 3, 72904989, 1634239107684, \"33.91000000\", 0, 0, 0, \"0.61000000\"], [9, 34.46645348867783, 35.06961642472969, 34.500919942166504, 34.55261962239952, 34.75941834333159, 34.862817703797624, 0, 0, 0, 0, 0, 0, 0, 0], [10, 35.06961642472969, 35.683334712162456, 35.104686041154416, 35.15729046579151, 35.36770816433989, 35.47291701361408, 0, 0, 0, 0, 0, 0, 0, 0], [11, 35.683334712162456, 36.3077930696253, 35.719018046874616, 35.77254304894286, 35.98664305721583, 36.09369306135232, 2, 72780629, 1634227811609, \"35.72000000\", 0, 0, 0, \"0.58000000\"], [12, 36.3077930696253, 36.94317944834374, 36.34410086269492, 36.39856255229936, 36.61640931071711, 36.72533268992599, 0, 0, 0, 0, 0, 0, 0, 0], [13, 36.94317944834374, 37.589685088689755, 36.980122627792085, 37.0355373969646, 37.25719647365466, 37.368026011999696, 0, 0, 0, 0, 0, 0, 0, 0], [14, 37.589685088689755, 38.24750457774183, 37.627274773778446, 37.68365930141148, 37.90919741194362, 38.02196646720969, 0, 0, 0, 0, 0, 0, 0, 0], [15, 38.24750457774183, 38.91683590785231, 38.28575208231957, 38.34312333918618, 38.57260836665263, 38.68735088038586, 0, 0, 0, 0, 0, 0, 0, 0], [16, 38.91683590785231, 39.59788053623973, 38.955752743760165, 39.01412799762194, 39.24762901306905, 39.36437952079262, 0, 0, 0, 0, 0, 0, 0, 0], [17, 39.59788053623973, 40.29084344562392, 39.63747841677597, 39.69687523758033, 39.934462520797766, 40.053256162406484, 0, 0, 0, 0, 0, 0, 0, 0], [18, 40.29084344562392, 40.99593320592234, 40.331134289069546, 40.39157055423798, 40.63331561491172, 40.7541881452486, 0, 0, 0, 0, 0, 0, 0, 0], [19, 40.99593320592234, 41.71336203702598, 41.03692913912826, 41.09842303893714, 41.34439863817268, 41.467386437790445, 0, 0, 0, 0, 0, 0, 0, 0], [20, 41.71336203702598, 42.44334587267394, 41.75507539906301, 41.81764544211855, 42.0679256143407, 42.19306570045178, 0, 0, 0, 0, 0, 0, 0, 0], [21, 42.44334587267394, 43.186104425445734, 42.485789218546614, 42.549454237355626, 42.80411431259167, 42.93144435020969, 0, 0, 0, 0, 0, 0, 0, 0], [22, 43.186104425445734, 43.94186125289104, 43.22929052987118, 43.294069686509346, 43.55318631306202, 43.68274462633836, 0, 0, 0, 0, 0, 0, 0, 0], [23, 43.94186125289104, 44.71084382481663, 43.98580311414393, 44.05171590602326, 44.31536707354061, 44.44719265729928, 0, 0, 0, 0, 0, 0, 0, 0], [24, 44.71084382481663, 45.49328359175092, 44.755554668641444, 44.82262093437867, 45.09088599732757, 45.22501852880202, 0, 0, 0, 0, 0, 0, 0, 0], [25, 45.49328359175092, 46.289416054606555, 45.53877687534267, 45.6070168007303, 45.879976502280805, 46.01645635305606, 0, 0, 0, 0, 0, 0, 0, 0], [26, 46.289416054606555, 47.09948083556217, 46.33570547066116, 46.40513959474307, 46.68287609107071, 46.82174433923453, 0, 0, 0, 0, 0, 0, 0, 0], [27, 47.09948083556217, 47.923721750184505, 47.14658031639773, 47.21722953765107, 47.49982642266445, 47.641124865171136, 0, 0, 0, 0, 0, 0, 0, 0], [28, 47.923721750184505, 48.762386880812734, 47.97164547193469, 48.04353105455997, 48.331073385061075, 48.47484455031163, 0, 0, 0, 0, 0, 0, 0, 0], [29, 48.762386880812734, 49.61572865122696, 48.811149267693544, 48.884292848014766, 49.17686716929964, 49.32315432994208, 0, 0, 0, 0, 0, 0, 0, 0], [30, 49.61572865122696, 50.48400390262343, 49.665344379878185, 49.73976797285503, 50.03746234476239, 50.186309530716066, 0, 0, 0, 0, 0, 0, 0, 0], [31, 50.48400390262343, 51.367473970919335, 50.53448790652605, 50.61021391237999, 50.91311793579573, 51.0645699475036, 0, 0, 0, 0, 0, 0, 0, 0], [32, 51.367473970919335, 52.26640476541042, 51.418841444890255, 51.49589265584663, 51.804097499672146, 51.95819992158491, 0, 0, 0, 0, 0, 0, 0, 0], [33, 52.26640476541042, 53.1810668488051, 52.31867117017583, 52.39707077732395, 52.71066920591641, 52.867468420212646, 0, 0, 0, 0, 0, 0, 0, 0], [34, 53.1810668488051, 54.11173551865919, 53.23424791565391, 53.314019515927114, 53.63310591701995, 53.79264911756636, 0, 0, 0, 0, 0, 0, 0, 0], [35, 54.11173551865919, 55.058690890235724, 54.16584725417785, 54.24701485745584, 54.57168527056779, 54.73402047712377, 0, 0, 0, 0, 0, 0, 0, 0], [36, 55.058690890235724, 56.02221798081485, 55.11374958112596, 55.19633761746131, 55.526689762802725, 55.691865835473436, 0, 0, 0, 0, 0, 0, 0, 0], [37, 56.02221798081485, 57.00260679547911, 56.07824019879567, 56.16227352576689, 56.49840683365178, 56.666473487594224, 0, 0, 0, 0, 0, 0, 0, 0], [38, 57.00260679547911, 58.00015241439999, 57.05960940227459, 57.14511331246781, 57.48712895324068, 57.65813677362712, 0, 0, 0, 0, 0, 0, 0, 0], [39, 58.00015241439999, 59.01515508165199, 58.05815256681439, 58.14515279543599, 58.49315370992239, 58.66715416716559, 0, 0, 0, 0, 0, 0, 0, 0], [40, 59.01515508165199, 60.0479202955809, 59.07417023673364, 59.16269296935612, 59.51678389984603, 59.69382936509099, 0, 0, 0, 0, 0, 0, 0, 0]], \"finance\": { \"startdepo\": \"100\", \"depo\": 103.6, \"quotanal\": \"0.58\", \"quotainorders\": \"1.22\", \"basenal\": \"42.26\", \"baseinorders\": \"0.00\", \"profittoday\": 0 }, \"sales\": { \"today\": [[36.34, 38.32, 0.54, 1.0691999999999984, 0.0302373, 1.0389626999999984, \"Thu Oct 14 2021 03:33:24 \", \"Thu Oct 14 2021 04:41:33 \", \"1:08:09\"], [36.98, 38.32, 0.54, 0.7236000000000019, 0.030496499999999996, 0.6931035000000019, \"Thu Oct 14 2021 04:09:22 \", \"Thu Oct 14 2021 04:41:33 \", \"0:32:10\"], [37.63, 38.32, 0.53, 0.3656999999999988, 0.030190125, 0.3355098749999988, \"Thu Oct 14 2021 04:37:08 \", \"Thu Oct 14 2021 04:41:33 \", \"0:04:25\"], [38.29, 38.32, 0.52, 0.015600000000000593, 0.0298779, -0.014277899999999406, \"Thu Oct 14 2021 01:57:56 \", \"Thu Oct 14 2021 04:41:33 \", \"2:43:36\"], [38.29, 38.71509433962264, 0.53, 0.22529999999999867, 0.030609525000000005, 0.19469047499999867, \"Thu Oct 14 2021 05:25:21 \", \"Thu Oct 14 2021 05:36:15 \", \"0:10:54\"], [36.34, 36.66, 0.56, 0.1791999999999962, 0.030660000000000003, 0.1485399999999962, \"Thu Oct 14 2021 07:49:45 \", \"Thu Oct 14 2021 08:04:09 \", \"0:14:23\"], [36.34, 37.01, 0.56, 0.37519999999999704, 0.030807, 0.34439299999999706, \"Thu Oct 14 2021 10:31:03 \", \"Thu Oct 14 2021 11:28:08 \", \"0:57:05\"], [36.98, 37.04, 0.55, 0.03300000000000125, 0.030533249999999998, 0.0024667500000012527, \"Thu Oct 14 2021 09:20:59 \", \"Thu Oct 14 2021 11:28:59 \", \"2:07:59\"], [36.34, 36.41, 0.56, 0.03919999999999618, 0.030555000000000002, 0.00864499999999618, \"Thu Oct 14 2021 12:51:23 \", \"Thu Oct 14 2021 13:39:43 \", \"0:48:19\"], [35.72, 36.5, 0.56, 0.4368000000000007, 0.030332400000000002, 0.4064676000000007, \"Thu Oct 14 2021 15:41:55 \", \"Thu Oct 14 2021 17:26:03 \", \"1:44:07\"], [36.34, 36.5, 0.56, 0.0895999999999981, 0.030592800000000003, 0.059007199999998095, \"Thu Oct 14 2021 14:15:04 \", \"Thu Oct 14 2021 17:26:03 \", \"3:10:59\"], [35.72, 36.190000000000005, 0.57, 0.26790000000000336, 0.030741524999999995, 0.23715847500000337, \"Thu Oct 14 2021 18:12:46 \", \"Thu Oct 14 2021 19:03:57 \", \"0:51:10\"], [36.34, 37.059999999999995, 0.56, 0.4031999999999954, 0.030828000000000005, 0.3723719999999954, \"Thu Oct 14 2021 17:26:20 \", \"Thu Oct 14 2021 19:05:43 \", \"1:39:23\"], [36.98, 37.059999999999995, 0.55, 0.04399999999999907, 0.0305415, 0.013458499999999068, \"Thu Oct 14 2021 11:33:21 \", \"Thu Oct 14 2021 19:05:43 \", \"7:32:21\"], [37.63, 37.73, 0.54, 0.05399999999999693, 0.0305208, 0.02347919999999693, \"Thu Oct 14 2021 05:41:00 \", \"Thu Oct 14 2021 19:06:36 \", \"13:25:35\"], [33.91, 33.93, 0.61, 0.012200000000001907, 0.0310368, -0.018836799999998093, \"Thu Oct 14 2021 20:30:05 \", \"Thu Oct 14 2021 20:41:31 \", \"0:11:26\"], [33.91, 33.98, 0.61, 0.042700000000000175, 0.03105967499999999, 0.011640325000000184, \"Thu Oct 14 2021 20:41:32 \", \"Thu Oct 14 2021 22:10:13 \", \"1:28:41\"], [33.32, 33.589999999999996, 0.61, 0.16469999999999757, 0.030611324999999995, 0.13408867499999758, \"Fri Oct 15 2021 00:21:05 \", \"Fri Oct 15 2021 01:24:19 \", \"1:03:14\"]], \"days\": [], \"all\": [[36.34, 38.32, 0.54, 1.0691999999999984, 0.0302373, 1.0389626999999984, \"Thu Oct 14 2021 03:33:24 \", \"Thu Oct 14 2021 04:41:33 \", \"1:08:09\"], [36.98, 38.32, 0.54, 0.7236000000000019, 0.030496499999999996, 0.6931035000000019, \"Thu Oct 14 2021 04:09:22 \", \"Thu Oct 14 2021 04:41:33 \", \"0:32:10\"], [37.63, 38.32, 0.53, 0.3656999999999988, 0.030190125, 0.3355098749999988, \"Thu Oct 14 2021 04:37:08 \", \"Thu Oct 14 2021 04:41:33 \", \"0:04:25\"], [38.29, 38.32, 0.52, 0.015600000000000593, 0.0298779, -0.014277899999999406, \"Thu Oct 14 2021 01:57:56 \", \"Thu Oct 14 2021 04:41:33 \", \"2:43:36\"], [38.29, 38.71509433962264, 0.53, 0.22529999999999867, 0.030609525000000005, 0.19469047499999867, \"Thu Oct 14 2021 05:25:21 \", \"Thu Oct 14 2021 05:36:15 \", \"0:10:54\"], [36.34, 36.66, 0.56, 0.1791999999999962, 0.030660000000000003, 0.1485399999999962, \"Thu Oct 14 2021 07:49:45 \", \"Thu Oct 14 2021 08:04:09 \", \"0:14:23\"], [36.34, 37.01, 0.56, 0.37519999999999704, 0.030807, 0.34439299999999706, \"Thu Oct 14 2021 10:31:03 \", \"Thu Oct 14 2021 11:28:08 \", \"0:57:05\"], [36.98, 37.04, 0.55, 0.03300000000000125, 0.030533249999999998, 0.0024667500000012527, \"Thu Oct 14 2021 09:20:59 \", \"Thu Oct 14 2021 11:28:59 \", \"2:07:59\"], [36.34, 36.41, 0.56, 0.03919999999999618, 0.030555000000000002, 0.00864499999999618, \"Thu Oct 14 2021 12:51:23 \", \"Thu Oct 14 2021 13:39:43 \", \"0:48:19\"], [35.72, 36.5, 0.56, 0.4368000000000007, 0.030332400000000002, 0.4064676000000007, \"Thu Oct 14 2021 15:41:55 \", \"Thu Oct 14 2021 17:26:03 \", \"1:44:07\"], [36.34, 36.5, 0.56, 0.0895999999999981, 0.030592800000000003, 0.059007199999998095, \"Thu Oct 14 2021 14:15:04 \", \"Thu Oct 14 2021 17:26:03 \", \"3:10:59\"], [35.72, 36.190000000000005, 0.57, 0.26790000000000336, 0.030741524999999995, 0.23715847500000337, \"Thu Oct 14 2021 18:12:46 \", \"Thu Oct 14 2021 19:03:57 \", \"0:51:10\"], [36.34, 37.059999999999995, 0.56, 0.4031999999999954, 0.030828000000000005, 0.3723719999999954, \"Thu Oct 14 2021 17:26:20 \", \"Thu Oct 14 2021 19:05:43 \", \"1:39:23\"], [36.98, 37.059999999999995, 0.55, 0.04399999999999907, 0.0305415, 0.013458499999999068, \"Thu Oct 14 2021 11:33:21 \", \"Thu Oct 14 2021 19:05:43 \", \"7:32:21\"], [37.63, 37.73, 0.54, 0.05399999999999693, 0.0305208, 0.02347919999999693, \"Thu Oct 14 2021 05:41:00 \", \"Thu Oct 14 2021 19:06:36 \", \"13:25:35\"], [33.91, 33.93, 0.61, 0.012200000000001907, 0.0310368, -0.018836799999998093, \"Thu Oct 14 2021 20:30:05 \", \"Thu Oct 14 2021 20:41:31 \", \"0:11:26\"], [33.91, 33.98, 0.61, 0.042700000000000175, 0.03105967499999999, 0.011640325000000184, \"Thu Oct 14 2021 20:41:32 \", \"Thu Oct 14 2021 22:10:13 \", \"1:28:41\"], [33.32, 33.589999999999996, 0.61, 0.16469999999999757, 0.030611324999999995, 0.13408867499999758, \"Fri Oct 15 2021 00:21:05 \", \"Fri Oct 15 2021 01:24:19 \", \"1:03:14\"]] } }, \"onoff\": true, \"settings\": { \"botname\": \"BADGERUSDT-1634165657\", \"isrunning\": false, \"handyzapretnazakup\": false, \"comment\": null, \"quotacoin\": \"BADGER\", \"basecoin\": \"USDT\", \"moneta\": \"BADGERUSDT\", \"digitq\": \"2\", \"digitprice\": \"2\", \"minprice\": \"30\", \"maxprice\": \"60\", \"profitproc\": \"0.9\", \"ordersize\": \"20\", \"ofsetbottom\": \"0.1\", \"ofsettop\": \"0.6\", \"ma1\": 3, \"ma2\": 30, \"maxpriceforzakup\": null, \"minpriceforzakup\": null, \"userid\": \"d3fmoh2rVoVNgIcpLTFZBE0jHnI2\" }, \"status\": { \"currentprice\": 34.08, \"lastprice\": -1, \"currentfloor\": 8, \"lastfloor\": 8, \"sr_ma_big\": 33.59299999999999, \"sr_ma_small\": 34.093333333333334, \"rezhim\": \"МА - закуп запрещён\", \"updated\": 1634165657 }, \"ttp\": { \"raschstopprice\": 33.9, \"curstop\": 0, \"curorderid\": 0, \"quantity\": 0, \"ttpbusy\": false, \"sold\": true, \"currentprice\": 34.1, \"final_price\": 34.01, \"finalorder\": 0, \"proskal\": false }, \"ttpbusy\": false, \"floors\": [[1, 30, 30.525, 30.03, 30.075000000000003, 30.255000000000003, 30.345000000000002, 0, 0, 0, 0, 0, 0, 0, 0], [2, 30.525, 31.0591875, 30.555525, 30.6013125, 30.7844625, 30.8760375, 0, 0, 0, 0, 0, 0, 0, 0], [3, 31.0591875, 31.60272328125, 31.0902466875, 31.13683546875, 31.32319059375, 31.416368156249998, 0, 0, 0, 0, 0, 0, 0, 0], [4, 31.60272328125, 32.15577093867188, 31.63432600453125, 31.681730089453126, 31.871346429140626, 31.966154598984375, 0, 0, 0, 0, 0, 0, 0, 0], [5, 32.15577093867188, 32.71849693009864, 32.18792670961055, 32.23616036601856, 32.429094991650594, 32.525562304466604, 0, 0, 0, 0, 0, 0, 0, 0], [6, 32.71849693009864, 33.291070626375365, 32.75121542702874, 32.800293172423885, 32.99660415400448, 33.09475964479478, 0, 0, 0, 0, 0, 0, 0, 0], [7, 33.291070626375365, 33.87366436233693, 33.32436169700174, 33.374298302941305, 33.574044726699555, 33.67391793857868, 3, 72992481, 1634252542436, \"33.32000000\", 0, 0, 0, \"0.61000000\"], [8, 33.87366436233693, 34.46645348867783, 33.90753802669927, 33.958348523242776, 34.1615905094168, 34.26321150250381, 3, 72904989, 1634239107684, \"33.91000000\", 0, 0, 0, \"0.61000000\"], [9, 34.46645348867783, 35.06961642472969, 34.500919942166504, 34.55261962239952, 34.75941834333159, 34.862817703797624, 0, 0, 0, 0, 0, 0, 0, 0], [10, 35.06961642472969, 35.683334712162456, 35.104686041154416, 35.15729046579151, 35.36770816433989, 35.47291701361408, 0, 0, 0, 0, 0, 0, 0, 0], [11, 35.683334712162456, 36.3077930696253, 35.719018046874616, 35.77254304894286, 35.98664305721583, 36.09369306135232, 2, 72780629, 1634227811609, \"35.72000000\", 0, 0, 0, \"0.58000000\"], [12, 36.3077930696253, 36.94317944834374, 36.34410086269492, 36.39856255229936, 36.61640931071711, 36.72533268992599, 0, 0, 0, 0, 0, 0, 0, 0], [13, 36.94317944834374, 37.589685088689755, 36.980122627792085, 37.0355373969646, 37.25719647365466, 37.368026011999696, 0, 0, 0, 0, 0, 0, 0, 0], [14, 37.589685088689755, 38.24750457774183, 37.627274773778446, 37.68365930141148, 37.90919741194362, 38.02196646720969, 0, 0, 0, 0, 0, 0, 0, 0], [15, 38.24750457774183, 38.91683590785231, 38.28575208231957, 38.34312333918618, 38.57260836665263, 38.68735088038586, 0, 0, 0, 0, 0, 0, 0, 0], [16, 38.91683590785231, 39.59788053623973, 38.955752743760165, 39.01412799762194, 39.24762901306905, 39.36437952079262, 0, 0, 0, 0, 0, 0, 0, 0], [17, 39.59788053623973, 40.29084344562392, 39.63747841677597, 39.69687523758033, 39.934462520797766, 40.053256162406484, 0, 0, 0, 0, 0, 0, 0, 0], [18, 40.29084344562392, 40.99593320592234, 40.331134289069546, 40.39157055423798, 40.63331561491172, 40.7541881452486, 0, 0, 0, 0, 0, 0, 0, 0], [19, 40.99593320592234, 41.71336203702598, 41.03692913912826, 41.09842303893714, 41.34439863817268, 41.467386437790445, 0, 0, 0, 0, 0, 0, 0, 0], [20, 41.71336203702598, 42.44334587267394, 41.75507539906301, 41.81764544211855, 42.0679256143407, 42.19306570045178, 0, 0, 0, 0, 0, 0, 0, 0], [21, 42.44334587267394, 43.186104425445734, 42.485789218546614, 42.549454237355626, 42.80411431259167, 42.93144435020969, 0, 0, 0, 0, 0, 0, 0, 0], [22, 43.186104425445734, 43.94186125289104, 43.22929052987118, 43.294069686509346, 43.55318631306202, 43.68274462633836, 0, 0, 0, 0, 0, 0, 0, 0], [23, 43.94186125289104, 44.71084382481663, 43.98580311414393, 44.05171590602326, 44.31536707354061, 44.44719265729928, 0, 0, 0, 0, 0, 0, 0, 0], [24, 44.71084382481663, 45.49328359175092, 44.755554668641444, 44.82262093437867, 45.09088599732757, 45.22501852880202, 0, 0, 0, 0, 0, 0, 0, 0], [25, 45.49328359175092, 46.289416054606555, 45.53877687534267, 45.6070168007303, 45.879976502280805, 46.01645635305606, 0, 0, 0, 0, 0, 0, 0, 0], [26, 46.289416054606555, 47.09948083556217, 46.33570547066116, 46.40513959474307, 46.68287609107071, 46.82174433923453, 0, 0, 0, 0, 0, 0, 0, 0], [27, 47.09948083556217, 47.923721750184505, 47.14658031639773, 47.21722953765107, 47.49982642266445, 47.641124865171136, 0, 0, 0, 0, 0, 0, 0, 0], [28, 47.923721750184505, 48.762386880812734, 47.97164547193469, 48.04353105455997, 48.331073385061075, 48.47484455031163, 0, 0, 0, 0, 0, 0, 0, 0], [29, 48.762386880812734, 49.61572865122696, 48.811149267693544, 48.884292848014766, 49.17686716929964, 49.32315432994208, 0, 0, 0, 0, 0, 0, 0, 0], [30, 49.61572865122696, 50.48400390262343, 49.665344379878185, 49.73976797285503, 50.03746234476239, 50.186309530716066, 0, 0, 0, 0, 0, 0, 0, 0], [31, 50.48400390262343, 51.367473970919335, 50.53448790652605, 50.61021391237999, 50.91311793579573, 51.0645699475036, 0, 0, 0, 0, 0, 0, 0, 0], [32, 51.367473970919335, 52.26640476541042, 51.418841444890255, 51.49589265584663, 51.804097499672146, 51.95819992158491, 0, 0, 0, 0, 0, 0, 0, 0], [33, 52.26640476541042, 53.1810668488051, 52.31867117017583, 52.39707077732395, 52.71066920591641, 52.867468420212646, 0, 0, 0, 0, 0, 0, 0, 0], [34, 53.1810668488051, 54.11173551865919, 53.23424791565391, 53.314019515927114, 53.63310591701995, 53.79264911756636, 0, 0, 0, 0, 0, 0, 0, 0], [35, 54.11173551865919, 55.058690890235724, 54.16584725417785, 54.24701485745584, 54.57168527056779, 54.73402047712377, 0, 0, 0, 0, 0, 0, 0, 0], [36, 55.058690890235724, 56.02221798081485, 55.11374958112596, 55.19633761746131, 55.526689762802725, 55.691865835473436, 0, 0, 0, 0, 0, 0, 0, 0], [37, 56.02221798081485, 57.00260679547911, 56.07824019879567, 56.16227352576689, 56.49840683365178, 56.666473487594224, 0, 0, 0, 0, 0, 0, 0, 0], [38, 57.00260679547911, 58.00015241439999, 57.05960940227459, 57.14511331246781, 57.48712895324068, 57.65813677362712, 0, 0, 0, 0, 0, 0, 0, 0], [39, 58.00015241439999, 59.01515508165199, 58.05815256681439, 58.14515279543599, 58.49315370992239, 58.66715416716559, 0, 0, 0, 0, 0, 0, 0, 0], [40, 59.01515508165199, 60.0479202955809, 59.07417023673364, 59.16269296935612, 59.51678389984603, 59.69382936509099, 0, 0, 0, 0, 0, 0, 0, 0]], \"finance\": { \"startdepo\": \"100\", \"depo\": 103.6, \"quotanal\": \"0.58\", \"quotainorders\": \"1.22\", \"basenal\": \"42.26\", \"baseinorders\": \"0.00\", \"profittoday\": 0 }, \"sales\": { \"today\": [[36.34, 38.32, 0.54, 1.0691999999999984, 0.0302373, 1.0389626999999984, \"Thu Oct 14 2021 03:33:24 \", \"Thu Oct 14 2021 04:41:33 \", \"1:08:09\"], [36.98, 38.32, 0.54, 0.7236000000000019, 0.030496499999999996, 0.6931035000000019, \"Thu Oct 14 2021 04:09:22 \", \"Thu Oct 14 2021 04:41:33 \", \"0:32:10\"], [37.63, 38.32, 0.53, 0.3656999999999988, 0.030190125, 0.3355098749999988, \"Thu Oct 14 2021 04:37:08 \", \"Thu Oct 14 2021 04:41:33 \", \"0:04:25\"], [38.29, 38.32, 0.52, 0.015600000000000593, 0.0298779, -0.014277899999999406, \"Thu Oct 14 2021 01:57:56 \", \"Thu Oct 14 2021 04:41:33 \", \"2:43:36\"], [38.29, 38.71509433962264, 0.53, 0.22529999999999867, 0.030609525000000005, 0.19469047499999867, \"Thu Oct 14 2021 05:25:21 \", \"Thu Oct 14 2021 05:36:15 \", \"0:10:54\"], [36.34, 36.66, 0.56, 0.1791999999999962, 0.030660000000000003, 0.1485399999999962, \"Thu Oct 14 2021 07:49:45 \", \"Thu Oct 14 2021 08:04:09 \", \"0:14:23\"], [36.34, 37.01, 0.56, 0.37519999999999704, 0.030807, 0.34439299999999706, \"Thu Oct 14 2021 10:31:03 \", \"Thu Oct 14 2021 11:28:08 \", \"0:57:05\"], [36.98, 37.04, 0.55, 0.03300000000000125, 0.030533249999999998, 0.0024667500000012527, \"Thu Oct 14 2021 09:20:59 \", \"Thu Oct 14 2021 11:28:59 \", \"2:07:59\"], [36.34, 36.41, 0.56, 0.03919999999999618, 0.030555000000000002, 0.00864499999999618, \"Thu Oct 14 2021 12:51:23 \", \"Thu Oct 14 2021 13:39:43 \", \"0:48:19\"], [35.72, 36.5, 0.56, 0.4368000000000007, 0.030332400000000002, 0.4064676000000007, \"Thu Oct 14 2021 15:41:55 \", \"Thu Oct 14 2021 17:26:03 \", \"1:44:07\"], [36.34, 36.5, 0.56, 0.0895999999999981, 0.030592800000000003, 0.059007199999998095, \"Thu Oct 14 2021 14:15:04 \", \"Thu Oct 14 2021 17:26:03 \", \"3:10:59\"], [35.72, 36.190000000000005, 0.57, 0.26790000000000336, 0.030741524999999995, 0.23715847500000337, \"Thu Oct 14 2021 18:12:46 \", \"Thu Oct 14 2021 19:03:57 \", \"0:51:10\"], [36.34, 37.059999999999995, 0.56, 0.4031999999999954, 0.030828000000000005, 0.3723719999999954, \"Thu Oct 14 2021 17:26:20 \", \"Thu Oct 14 2021 19:05:43 \", \"1:39:23\"], [36.98, 37.059999999999995, 0.55, 0.04399999999999907, 0.0305415, 0.013458499999999068, \"Thu Oct 14 2021 11:33:21 \", \"Thu Oct 14 2021 19:05:43 \", \"7:32:21\"], [37.63, 37.73, 0.54, 0.05399999999999693, 0.0305208, 0.02347919999999693, \"Thu Oct 14 2021 05:41:00 \", \"Thu Oct 14 2021 19:06:36 \", \"13:25:35\"], [33.91, 33.93, 0.61, 0.012200000000001907, 0.0310368, -0.018836799999998093, \"Thu Oct 14 2021 20:30:05 \", \"Thu Oct 14 2021 20:41:31 \", \"0:11:26\"], [33.91, 33.98, 0.61, 0.042700000000000175, 0.03105967499999999, 0.011640325000000184, \"Thu Oct 14 2021 20:41:32 \", \"Thu Oct 14 2021 22:10:13 \", \"1:28:41\"], [33.32, 33.589999999999996, 0.61, 0.16469999999999757, 0.030611324999999995, 0.13408867499999758, \"Fri Oct 15 2021 00:21:05 \", \"Fri Oct 15 2021 01:24:19 \", \"1:03:14\"]], \"days\": [], \"all\": [[36.34, 38.32, 0.54, 1.0691999999999984, 0.0302373, 1.0389626999999984, \"Thu Oct 14 2021 03:33:24 \", \"Thu Oct 14 2021 04:41:33 \", \"1:08:09\"], [36.98, 38.32, 0.54, 0.7236000000000019, 0.030496499999999996, 0.6931035000000019, \"Thu Oct 14 2021 04:09:22 \", \"Thu Oct 14 2021 04:41:33 \", \"0:32:10\"], [37.63, 38.32, 0.53, 0.3656999999999988, 0.030190125, 0.3355098749999988, \"Thu Oct 14 2021 04:37:08 \", \"Thu Oct 14 2021 04:41:33 \", \"0:04:25\"], [38.29, 38.32, 0.52, 0.015600000000000593, 0.0298779, -0.014277899999999406, \"Thu Oct 14 2021 01:57:56 \", \"Thu Oct 14 2021 04:41:33 \", \"2:43:36\"], [38.29, 38.71509433962264, 0.53, 0.22529999999999867, 0.030609525000000005, 0.19469047499999867, \"Thu Oct 14 2021 05:25:21 \", \"Thu Oct 14 2021 05:36:15 \", \"0:10:54\"], [36.34, 36.66, 0.56, 0.1791999999999962, 0.030660000000000003, 0.1485399999999962, \"Thu Oct 14 2021 07:49:45 \", \"Thu Oct 14 2021 08:04:09 \", \"0:14:23\"], [36.34, 37.01, 0.56, 0.37519999999999704, 0.030807, 0.34439299999999706, \"Thu Oct 14 2021 10:31:03 \", \"Thu Oct 14 2021 11:28:08 \", \"0:57:05\"], [36.98, 37.04, 0.55, 0.03300000000000125, 0.030533249999999998, 0.0024667500000012527, \"Thu Oct 14 2021 09:20:59 \", \"Thu Oct 14 2021 11:28:59 \", \"2:07:59\"], [36.34, 36.41, 0.56, 0.03919999999999618, 0.030555000000000002, 0.00864499999999618, \"Thu Oct 14 2021 12:51:23 \", \"Thu Oct 14 2021 13:39:43 \", \"0:48:19\"], [35.72, 36.5, 0.56, 0.4368000000000007, 0.030332400000000002, 0.4064676000000007, \"Thu Oct 14 2021 15:41:55 \", \"Thu Oct 14 2021 17:26:03 \", \"1:44:07\"], [36.34, 36.5, 0.56, 0.0895999999999981, 0.030592800000000003, 0.059007199999998095, \"Thu Oct 14 2021 14:15:04 \", \"Thu Oct 14 2021 17:26:03 \", \"3:10:59\"], [35.72, 36.190000000000005, 0.57, 0.26790000000000336, 0.030741524999999995, 0.23715847500000337, \"Thu Oct 14 2021 18:12:46 \", \"Thu Oct 14 2021 19:03:57 \", \"0:51:10\"], [36.34, 37.059999999999995, 0.56, 0.4031999999999954, 0.030828000000000005, 0.3723719999999954, \"Thu Oct 14 2021 17:26:20 \", \"Thu Oct 14 2021 19:05:43 \", \"1:39:23\"], [36.98, 37.059999999999995, 0.55, 0.04399999999999907, 0.0305415, 0.013458499999999068, \"Thu Oct 14 2021 11:33:21 \", \"Thu Oct 14 2021 19:05:43 \", \"7:32:21\"], [37.63, 37.73, 0.54, 0.05399999999999693, 0.0305208, 0.02347919999999693, \"Thu Oct 14 2021 05:41:00 \", \"Thu Oct 14 2021 19:06:36 \", \"13:25:35\"], [33.91, 33.93, 0.61, 0.012200000000001907, 0.0310368, -0.018836799999998093, \"Thu Oct 14 2021 20:30:05 \", \"Thu Oct 14 2021 20:41:31 \", \"0:11:26\"], [33.91, 33.98, 0.61, 0.042700000000000175, 0.03105967499999999, 0.011640325000000184, \"Thu Oct 14 2021 20:41:32 \", \"Thu Oct 14 2021 22:10:13 \", \"1:28:41\"], [33.32, 33.589999999999996, 0.61, 0.16469999999999757, 0.030611324999999995, 0.13408867499999758, \"Fri Oct 15 2021 00:21:05 \", \"Fri Oct 15 2021 01:24:19 \", \"1:03:14\"]] }, \"zapret_na_zakup\": true }, \"trackname\": \"track-BADGERUSDT-16341656576de6a6f6190fe321\", \"_event\": \"node:c80bf4b14fe4742e\", \"rate\": 250, \"service\": false }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3570,
        "y": 2420,
        "wires": [
            [
                "8602261aa2a7c90e"
            ]
        ]
    },
    {
        "id": "7ca70cad7c1b8ea9",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "6d2ff214f4cce1f5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3430,
        "y": 2440,
        "wires": [
            [
                "a43d8ab136391cb3"
            ]
        ]
    },
    {
        "id": "4f807437e6687a2e",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 1420,
        "wires": []
    },
    {
        "id": "8ca24d0db8eebc32",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1500,
        "wires": []
    },
    {
        "id": "db8f112c8ac7899b",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "ex1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "rl",
        "payload": "ex1",
        "payloadType": "str",
        "x": 2830,
        "y": 1680,
        "wires": [
            [
                "e209af4aab1f7ac9"
            ]
        ]
    },
    {
        "id": "e209af4aab1f7ac9",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "push rl",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 1680,
        "wires": [
            [
                "29ddb0eca4432c0b"
            ]
        ]
    },
    {
        "id": "29ddb0eca4432c0b",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "rpush",
        "name": "",
        "topic": "rl",
        "obj": true,
        "x": 3110,
        "y": 1680,
        "wires": []
    },
    {
        "id": "44c2acacbd21ff06",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "push rl",
        "func": "msg = {\n    payload : \"ex2\",\n    topic : \"rl\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3150,
        "y": 1800,
        "wires": [
            [
                "01c9c91c25e56a7f"
            ]
        ]
    },
    {
        "id": "eeaddb0cea22557b",
        "type": "function",
        "z": "5df15275.2888ec",
        "d": true,
        "name": "getresurse()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet getresurse = function () {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = \"rl\";\n    msg.payload = 1;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getresurse', getresurse);",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 1240,
        "wires": [
            [
                "42f7432cf6eea21c"
            ]
        ]
    },
    {
        "id": "42dd990c5eabca0d",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 1240,
        "wires": []
    },
    {
        "id": "c6ae1967c55857c8",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "1",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 1430,
        "y": 1240,
        "wires": [
            [
                "eeaddb0cea22557b"
            ]
        ]
    },
    {
        "id": "35e21fea0d2b6543",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2220,
        "y": 1200,
        "wires": []
    },
    {
        "id": "2f95913438661684",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "debug 14",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2400,
        "y": 1200,
        "wires": []
    },
    {
        "id": "51055b3c02e3f699",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "getresurse ",
        "func": "const gp = global.get('getresurse')();\n\ngp.then(gp => {\n\n    msg.payload = gp;\n   \n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 1600,
        "wires": [
            [
                "e897b07be5041631"
            ]
        ]
    },
    {
        "id": "a6ce0324bb76ac94",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1140,
        "wires": []
    },
    {
        "id": "bb7bcb6c571572bb",
        "type": "function",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "name": "getbot global",
        "func": "\nmsg.botname = msg.payload;\nmsg.bot = {};\nmsg.bot.busy = global.get(msg.botname + \"-busy\");\nmsg.bot.data = global.get(msg.botname + \"-data\");\nmsg.bot.onoff = global.get(msg.botname + \"-onoff\");\nmsg.bot.settings = global.get(msg.botname + \"-settings\");\nmsg.bot.status = global.get(msg.botname + \"-status\");\nmsg.bot.ttp = global.get(msg.botname + \"-ttp\");\nmsg.bot.ttpbusy = global.get(msg.botname + \"-ttpbusy\");\n\nmsg.bot.floors = msg.bot.data.floors;\nmsg.bot.finance = msg.bot.data.finance;\nmsg.bot.sales = msg.bot.data.sales;\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1020,
        "wires": [
            [
                "cea8b787784f06b7"
            ]
        ]
    },
    {
        "id": "e897b07be5041631",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 1600,
        "wires": []
    },
    {
        "id": "d78761febdb1624d",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1740,
        "y": 1440,
        "wires": []
    },
    {
        "id": "c40127e6457bc2f9",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "debug 18",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1800,
        "y": 1380,
        "wires": []
    },
    {
        "id": "54234c0d2bb55066",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "qq",
                "v": "fff",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "rl",
        "payload": "1",
        "payloadType": "num",
        "x": 1770,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "7a49d332955c1ad1",
        "type": "redis-out",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "worked",
        "obj": false,
        "x": 1700,
        "y": 1300,
        "wires": []
    },
    {
        "id": "dc805cc2ded290f6",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "ask msg",
        "func": "msg = {\n    payload: 1,\n    topic: \"\" ,\n   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 1300,
        "wires": [
            [
                "7a49d332955c1ad1"
            ]
        ]
    },
    {
        "id": "2737c804d7a7e024",
        "type": "filter",
        "z": "5df15275.2888ec",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "payload",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "nnull",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1390,
        "y": 1300,
        "wires": [
            [
                "dc805cc2ded290f6"
            ]
        ]
    },
    {
        "id": "42f7432cf6eea21c",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "LPOP",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1770,
        "y": 1240,
        "wires": [
            [
                "42dd990c5eabca0d"
            ]
        ]
    },
    {
        "id": "9a45884a4734bee1",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "LPOP",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": true,
        "x": 1230,
        "y": 1340,
        "wires": [
            [
                "bc70ce255a0dca6c",
                "2737c804d7a7e024",
                "44b4d1261992baf2"
            ]
        ]
    },
    {
        "id": "f87ce112cc243605",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "function 1",
        "func": "msg = {\n    topic:\"rl\",\n    payload : 1,\n    bot: msg.bot\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1340,
        "wires": [
            [
                "9a45884a4734bee1",
                "189947d3a6fb24fa"
            ]
        ]
    },
    {
        "id": "e6fecf3b6779bfd9",
        "type": "redis-command",
        "z": "5df15275.2888ec",
        "server": "f120eab2.0a60a8",
        "command": "LPOP",
        "name": "",
        "topic": "rl",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": true,
        "x": 1390,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "44b4d1261992baf2",
        "type": "function",
        "z": "5df15275.2888ec",
        "name": "хак с LPOP",
        "func": "msg = {\n    topic:\"rl\",\n    payload : 1\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1420,
        "wires": [
            [
                "e6fecf3b6779bfd9"
            ]
        ]
    },
    {
        "id": "189947d3a6fb24fa",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1260,
        "wires": []
    },
    {
        "id": "d7ed826dde4a9ede",
        "type": "debug",
        "z": "5df15275.2888ec",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1420,
        "y": 1800,
        "wires": []
    },
    {
        "id": "c80bf4b14fe4742e",
        "type": "link out",
        "z": "5df15275.2888ec",
        "g": "47ccdad2d228ed4b",
        "name": "",
        "links": [
            "014337f1bd6ded08",
            "6da88e54160574f4",
            "fa71d31d5b1ae6f3"
        ],
        "x": 1715,
        "y": 1020,
        "wires": []
    },
    {
        "id": "e60b4814138add22",
        "type": "inject",
        "z": "5df15275.2888ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "b81dcd4ee6e797ca",
        "type": "inject",
        "z": "5df15275.2888ec",
        "g": "814fe3ad47c48a59",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 400,
        "wires": [
            [
                "b8dd96d5d9b54edd"
            ]
        ]
    },
    {
        "id": "612afd6e7357c83c",
        "type": "inject",
        "z": "b89efe2b1fe909cb",
        "g": "3eb02193332f12bf",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1530,
        "y": 940,
        "wires": [
            [
                "d91519a58a8c207d"
            ]
        ]
    },
    {
        "id": "d91519a58a8c207d",
        "type": "redis-out",
        "z": "b89efe2b1fe909cb",
        "g": "3eb02193332f12bf",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 1530,
        "y": 980,
        "wires": []
    },
    {
        "id": "cb5d9749197b77cb",
        "type": "inject",
        "z": "b89efe2b1fe909cb",
        "g": "3eb02193332f12bf",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1110,
        "y": 940,
        "wires": [
            [
                "49c2385c498a19b0"
            ]
        ]
    },
    {
        "id": "49c2385c498a19b0",
        "type": "redis-out",
        "z": "b89efe2b1fe909cb",
        "g": "3eb02193332f12bf",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 1110,
        "y": 980,
        "wires": []
    },
    {
        "id": "7cd9eafcc8ebd4e1",
        "type": "inject",
        "z": "b89efe2b1fe909cb",
        "g": "3eb02193332f12bf",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1290,
        "y": 940,
        "wires": [
            [
                "b82d786610a88e2a"
            ]
        ]
    },
    {
        "id": "b82d786610a88e2a",
        "type": "redis-out",
        "z": "b89efe2b1fe909cb",
        "g": "3eb02193332f12bf",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 1290,
        "y": 980,
        "wires": []
    },
    {
        "id": "5b7bb9d6beb5e5a8",
        "type": "redis-instance",
        "z": "b89efe2b1fe909cb",
        "g": "3eb02193332f12bf",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 1730,
        "y": 960,
        "wires": []
    },
    {
        "id": "9b725c848724b3b0",
        "type": "redis-in",
        "z": "b89efe2b1fe909cb",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "resurse-que",
        "obj": false,
        "timeout": 0,
        "x": 1390,
        "y": 100,
        "wires": [
            [
                "374680c4e3820dfe"
            ]
        ]
    },
    {
        "id": "df8949bac971e658",
        "type": "inject",
        "z": "b89efe2b1fe909cb",
        "g": "3b0abdc7dbed87d7",
        "name": "start onLoad",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 1180,
        "wires": [
            [
                "dc2aeff7a359f934"
            ]
        ]
    },
    {
        "id": "dc2aeff7a359f934",
        "type": "function",
        "z": "b89efe2b1fe909cb",
        "g": "3b0abdc7dbed87d7",
        "name": "push ex0",
        "func": "msg.topic = \"resurse-que\";\nmsg.payload = [\"push\",\"ex0\"];\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1180,
        "wires": [
            [
                "c1b1c62e6b0f4e2a"
            ]
        ]
    },
    {
        "id": "c1b1c62e6b0f4e2a",
        "type": "redis-out",
        "z": "b89efe2b1fe909cb",
        "g": "3b0abdc7dbed87d7",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "resurse-que",
        "obj": true,
        "x": 550,
        "y": 1180,
        "wires": []
    },
    {
        "id": "5f4515f84461838f",
        "type": "redis-in",
        "z": "b89efe2b1fe909cb",
        "g": "3b0abdc7dbed87d7",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "resurse:ex0",
        "obj": true,
        "timeout": 0,
        "x": 190,
        "y": 1260,
        "wires": [
            [
                "f09138c9d7915de9"
            ]
        ]
    },
    {
        "id": "5cce569343d969d1",
        "type": "inject",
        "z": "b89efe2b1fe909cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "tasks-que",
        "payload": "{\"bot\":\"botdata\"}",
        "payloadType": "json",
        "x": 180,
        "y": 600,
        "wires": [
            [
                "2c689edc998203f7"
            ]
        ]
    },
    {
        "id": "23b585db6c496f17",
        "type": "inject",
        "z": "b89efe2b1fe909cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 540,
        "wires": [
            [
                "0252f89edc84dd25"
            ]
        ]
    },
    {
        "id": "0252f89edc84dd25",
        "type": "change",
        "z": "b89efe2b1fe909cb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "trigger",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 540,
        "wires": [
            [
                "2c689edc998203f7"
            ]
        ]
    },
    {
        "id": "714ede0b7051318b",
        "type": "inject",
        "z": "b89efe2b1fe909cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payload": "ttl 1000",
        "payloadType": "str",
        "x": 100,
        "y": 700,
        "wires": [
            [
                "9fd5c669605caab8"
            ]
        ]
    },
    {
        "id": "9fd5c669605caab8",
        "type": "change",
        "z": "b89efe2b1fe909cb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ttl",
                "pt": "msg",
                "to": "1000",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 700,
        "wires": [
            [
                "2c689edc998203f7"
            ]
        ]
    },
    {
        "id": "9d45f3353deb6529",
        "type": "inject",
        "z": "b89efe2b1fe909cb",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 660,
        "wires": [
            [
                "65fcf83d0f2bf39e"
            ]
        ]
    },
    {
        "id": "65fcf83d0f2bf39e",
        "type": "change",
        "z": "b89efe2b1fe909cb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "1",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 660,
        "wires": [
            [
                "2c689edc998203f7"
            ]
        ]
    },
    {
        "id": "d359eb0e488073e4",
        "type": "inject",
        "z": "b89efe2b1fe909cb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 740,
        "wires": [
            [
                "e3ec3e3cecd251ef"
            ]
        ]
    },
    {
        "id": "e3ec3e3cecd251ef",
        "type": "change",
        "z": "b89efe2b1fe909cb",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "queueCount",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 740,
        "wires": [
            [
                "2c689edc998203f7"
            ]
        ]
    },
    {
        "id": "2c689edc998203f7",
        "type": "simple-queue",
        "z": "b89efe2b1fe909cb",
        "name": "tasksque",
        "firstMessageBypass": true,
        "bypassInterval": "0",
        "x": 560,
        "y": 600,
        "wires": [
            [
                "956535fcf2543f37"
            ]
        ]
    },
    {
        "id": "98b717c0054f370c",
        "type": "function",
        "z": "b89efe2b1fe909cb",
        "name": "getresurse()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet getresurse = function () {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = \"resurse-list\";\n    msg.payload = 1;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getresurse', getresurse);",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 100,
        "wires": [
            [
                "93c214ff307913cd"
            ]
        ]
    },
    {
        "id": "ee67c78202abae19",
        "type": "function",
        "z": "b89efe2b1fe909cb",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 100,
        "wires": []
    },
    {
        "id": "677e987c0cd9a00f",
        "type": "inject",
        "z": "b89efe2b1fe909cb",
        "name": "1",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 630,
        "y": 100,
        "wires": [
            [
                "98b717c0054f370c"
            ]
        ]
    },
    {
        "id": "06a96de74bf8bfaf",
        "type": "function",
        "z": "b89efe2b1fe909cb",
        "name": "resurse push",
        "func": "let resurses = global.get('resurse-list') || [];\n\nresurses.push(msg.payload[1]);\nglobal.set('resurse-list',resurses);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "374680c4e3820dfe",
        "type": "json",
        "z": "b89efe2b1fe909cb",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1530,
        "y": 100,
        "wires": [
            [
                "06a96de74bf8bfaf"
            ]
        ]
    },
    {
        "id": "93c214ff307913cd",
        "type": "function",
        "z": "b89efe2b1fe909cb",
        "name": " resurses.pop()",
        "func": "let resurses = global.get('resurse-list') || [];\n\nmsg.payload = resurses.pop();\nglobal.set('resurse-list', resurses);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 100,
        "wires": [
            [
                "ee67c78202abae19"
            ]
        ]
    },
    {
        "id": "87127cf4dbe6e9a4",
        "type": "function",
        "z": "b89efe2b1fe909cb",
        "name": "getresurse ",
        "func": "const gp = global.get('getresurse')();\n\ngp.then(gp => {\n\n    msg.resurse = gp;\n   \n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 600,
        "wires": [
            [
                "075eef81d6e1252e"
            ]
        ]
    },
    {
        "id": "075eef81d6e1252e",
        "type": "switch",
        "z": "b89efe2b1fe909cb",
        "name": "ресурсы есть ?",
        "property": "resurse",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1080,
        "y": 600,
        "wires": [
            [
                "0252f89edc84dd25",
                "b57180d959a441bd"
            ],
            [
                "11e2a8e445749dd0"
            ]
        ]
    },
    {
        "id": "11e2a8e445749dd0",
        "type": "delay",
        "z": "b89efe2b1fe909cb",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1270,
        "y": 640,
        "wires": [
            [
                "87127cf4dbe6e9a4"
            ]
        ]
    },
    {
        "id": "5d363fb6aed28df1",
        "type": "redis-out",
        "z": "b89efe2b1fe909cb",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "",
        "obj": true,
        "x": 1440,
        "y": 560,
        "wires": []
    },
    {
        "id": "b57180d959a441bd",
        "type": "function",
        "z": "b89efe2b1fe909cb",
        "name": "send payload ",
        "func": "msg ={\ntopic : \"resurse:\" + msg.resurse,\npayload : msg.payload\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 560,
        "wires": [
            [
                "5d363fb6aed28df1"
            ]
        ]
    },
    {
        "id": "f09138c9d7915de9",
        "type": "delay",
        "z": "b89efe2b1fe909cb",
        "g": "3b0abdc7dbed87d7",
        "name": "",
        "pauseType": "random",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "2",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 360,
        "y": 1260,
        "wires": [
            [
                "a36d19b4ca26282e",
                "f8727ffca66ea75d"
            ]
        ]
    },
    {
        "id": "a36d19b4ca26282e",
        "type": "function",
        "z": "b89efe2b1fe909cb",
        "g": "3b0abdc7dbed87d7",
        "name": "push ex0",
        "func": "msg.topic = \"resurse-que\";\nmsg.payload = [\"push\",\"ex0\"];\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1260,
        "wires": [
            [
                "32a0c5684062bd5e"
            ]
        ]
    },
    {
        "id": "32a0c5684062bd5e",
        "type": "redis-out",
        "z": "b89efe2b1fe909cb",
        "g": "3b0abdc7dbed87d7",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "resurse-que",
        "obj": true,
        "x": 730,
        "y": 1260,
        "wires": []
    },
    {
        "id": "f8727ffca66ea75d",
        "type": "debug",
        "z": "b89efe2b1fe909cb",
        "g": "3b0abdc7dbed87d7",
        "name": "debug 36",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1340,
        "wires": []
    },
    {
        "id": "e8bdce28439340e5",
        "type": "comment",
        "z": "b89efe2b1fe909cb",
        "name": "Повторный запрос ресурса",
        "info": "",
        "x": 1500,
        "y": 640,
        "wires": []
    },
    {
        "id": "e2a93dd287c21f7c",
        "type": "comment",
        "z": "b89efe2b1fe909cb",
        "name": "Core",
        "info": "",
        "x": 90,
        "y": 40,
        "wires": []
    },
    {
        "id": "956535fcf2543f37",
        "type": "filter",
        "z": "b89efe2b1fe909cb",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "payload",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "eq",
                "v": "tasks-que",
                "vt": "str",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 710,
        "y": 600,
        "wires": [
            [
                "87127cf4dbe6e9a4"
            ]
        ]
    },
    {
        "id": "de723e566820324e",
        "type": "function",
        "z": "b89efe2b1fe909cb",
        "name": "reset resurse-list",
        "func": "\nglobal.set('resurse-list',[])\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "b35ccfd6d536108a",
        "type": "inject",
        "z": "b89efe2b1fe909cb",
        "name": "1",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "de723e566820324e"
            ]
        ]
    },
    {
        "id": "b38fc6a51aebc0c0",
        "type": "link in",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "links": [
            "f073e9dbe313502b",
            "2aaf81456a47ee40",
            "4970e284f21b629f",
            "681efc1017a9cf2a",
            "15864b4634126e66",
            "c088aefe8e6fc1a7",
            "2d5ad73752c276d9",
            "4cddd51017c75769",
            "d208742dc4eeb9ef",
            "2c9442a2b966c69a",
            "3b6485dd0466a494",
            "4aabfb6e8ad7be52",
            "13be00812f46687f",
            "8edaf0bfe566f9ce",
            "10f5ad379a6e24f0",
            "aa5c8214700f80d1",
            "90a8b3f2dbc8401b",
            "ccdecaaa4dad9420",
            "0faae939f8adb6b8",
            "259ed3055db88035",
            "56d57c1b4e2f677a",
            "c4e7fe8c6e0bf4af",
            "16146dbc07188184",
            "b13f786bfc2cd8e1",
            "a35cd6db05d8aaec",
            "4a300454ae21e69d",
            "ac9c9bb484e63566",
            "8e3e7ee3c94c910d",
            "10c24a2e7aabc7a2",
            "e72bd24e8beee673",
            "a3234b5ef94f37cc",
            "57d792e7e0d32ef0",
            "c437521a71866a57",
            "8f4ebb70b246f37c"
        ],
        "x": 175,
        "y": 200,
        "wires": [
            [
                "d1f5e69b0d94d6c0"
            ]
        ]
    },
    {
        "id": "a0bc75354d0a725c",
        "type": "link in",
        "z": "f6f5d41e533a8b1a",
        "name": "in",
        "links": [
            "b2784332410b0273",
            "7b6c884e840b62d8"
        ],
        "x": 155,
        "y": 540,
        "wires": [
            [
                "399369ecbdbd4769",
                "65f1dac344fbcf69"
            ]
        ]
    },
    {
        "id": "2c9cea372d81dae4",
        "type": "comment",
        "z": "f6f5d41e533a8b1a",
        "name": "1 - Покупаем",
        "info": "",
        "x": 550,
        "y": 440,
        "wires": []
    },
    {
        "id": "35082b820f6983ad",
        "type": "comment",
        "z": "f6f5d41e533a8b1a",
        "name": "2 - Купили. Держим",
        "info": "",
        "x": 580,
        "y": 720,
        "wires": []
    },
    {
        "id": "9a38708bdacba1eb",
        "type": "comment",
        "z": "f6f5d41e533a8b1a",
        "name": "3 - Продаём",
        "info": "",
        "x": 550,
        "y": 980,
        "wires": []
    },
    {
        "id": "399369ecbdbd4769",
        "type": "switch",
        "z": "f6f5d41e533a8b1a",
        "name": "статус этажа",
        "property": "bot.currentfloor[7]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 300,
        "y": 540,
        "wires": [
            [
                "681efc1017a9cf2a"
            ],
            [
                "ca26ee5a95fef8d5"
            ],
            [
                "6a00d8108e7ecad5"
            ],
            [
                "4aabfb6e8ad7be52"
            ],
            [],
            [
                "4aabfb6e8ad7be52"
            ]
        ]
    },
    {
        "id": "2adcce216c2d5f30",
        "type": "comment",
        "z": "f6f5d41e533a8b1a",
        "name": "0 - Свободно",
        "info": "",
        "x": 550,
        "y": 280,
        "wires": []
    },
    {
        "id": "5584ad17328bc081",
        "type": "comment",
        "z": "f6f5d41e533a8b1a",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 1670,
        "y": 840,
        "wires": []
    },
    {
        "id": "681efc1017a9cf2a",
        "type": "link out",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "links": [
            "b38fc6a51aebc0c0"
        ],
        "x": 495,
        "y": 320,
        "wires": []
    },
    {
        "id": "ca26ee5a95fef8d5",
        "type": "switch",
        "z": "f6f5d41e533a8b1a",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 480,
        "wires": [
            [
                "b97c75c4795c7a54"
            ],
            [
                "03ee665e5c8a03af"
            ]
        ]
    },
    {
        "id": "f659a7fc8871547e",
        "type": "comment",
        "z": "f6f5d41e533a8b1a",
        "name": "NEW",
        "info": "",
        "x": 1590,
        "y": 620,
        "wires": []
    },
    {
        "id": "1028aeac112b31f1",
        "type": "switch",
        "z": "f6f5d41e533a8b1a",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1340,
        "y": 740,
        "wires": [
            [
                "216b6d5fc3879786"
            ],
            [
                "ac9c9bb484e63566",
                "854cd1387cc64c6f"
            ],
            [
                "2cc90763e4badd98"
            ],
            [
                "eb140da1dd7d23c2"
            ],
            [
                "8e3e7ee3c94c910d"
            ],
            [
                "8e3e7ee3c94c910d"
            ],
            [
                "8e3e7ee3c94c910d"
            ]
        ]
    },
    {
        "id": "03ee665e5c8a03af",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "prepare get order status",
        "func": "let orderid = msg.bot.currentfloor[8];\nmsg.moneta = msg.bot.settings.moneta;\nmsg.orderid = orderid;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: orderid });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 640,
        "wires": [
            [
                "f5f5eea4121dfeae"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "96ef1e634eb7ca7f",
        "type": "comment",
        "z": "f6f5d41e533a8b1a",
        "name": "FILLED",
        "info": "",
        "x": 1590,
        "y": 780,
        "wires": []
    },
    {
        "id": "658da0cc26c8b4d5",
        "type": "comment",
        "z": "f6f5d41e533a8b1a",
        "name": "CANCELED",
        "info": "",
        "x": 1610,
        "y": 700,
        "wires": []
    },
    {
        "id": "a09acf20b594c112",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "change floors",
        "func": "//node.warn(\"cancel order \" + msg.bot.currentfloor[14]);\n//let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//\n//msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n//\n//if (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\n//if (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet botname = msg.bot.settings.botname;\n\nlet data = \"Ордер на покупку отменен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(botname, data);\ntilog;\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[10] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 420,
        "wires": [
            [
                "4d4c9e185fb62bd1"
            ]
        ]
    },
    {
        "id": "4dd553c4ba9fb648",
        "type": "comment",
        "z": "f6f5d41e533a8b1a",
        "name": "NEW",
        "info": "",
        "x": 1590,
        "y": 300,
        "wires": []
    },
    {
        "id": "88923b60a1ca022b",
        "type": "switch",
        "z": "f6f5d41e533a8b1a",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1340,
        "y": 460,
        "wires": [
            [
                "c088aefe8e6fc1a7"
            ],
            [
                "c088aefe8e6fc1a7"
            ],
            [
                "a09acf20b594c112"
            ],
            [
                "faf982cf40388f8b"
            ],
            [],
            [],
            [
                "c088aefe8e6fc1a7"
            ]
        ]
    },
    {
        "id": "b97c75c4795c7a54",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "prepare get order status",
        "func": "let orderid = msg.bot.currentfloor[8];\n\nmsg.moneta = msg.bot.settings.moneta;\nmsg.orderid = orderid;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: orderid });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 460,
        "wires": [
            [
                "234c24d9b690fa2f"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "1dd97652ce218fd2",
        "type": "comment",
        "z": "f6f5d41e533a8b1a",
        "name": "FILLED",
        "info": "",
        "x": 1590,
        "y": 500,
        "wires": []
    },
    {
        "id": "a9b2850b296eef81",
        "type": "comment",
        "z": "f6f5d41e533a8b1a",
        "name": "CANCELED",
        "info": "",
        "x": 1610,
        "y": 420,
        "wires": []
    },
    {
        "id": "faf982cf40388f8b",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "change floors",
        "func": "node.warn(\"filled order \" + msg.bot.currentfloor[14]);\nlet node_time = new Date().getTime();\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\ncurrentfloor[9] = node_time;\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nlet data = \"Ордер на покупку исполнен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname, data);\ntilog;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 500,
        "wires": [
            [
                "e1d49c305166a4b1"
            ]
        ]
    },
    {
        "id": "c088aefe8e6fc1a7",
        "type": "link out",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "links": [
            "b38fc6a51aebc0c0"
        ],
        "x": 1515,
        "y": 300,
        "wires": []
    },
    {
        "id": "ac9c9bb484e63566",
        "type": "link out",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "links": [
            "b38fc6a51aebc0c0"
        ],
        "x": 1555,
        "y": 840,
        "wires": []
    },
    {
        "id": "4b2c048e134181cf",
        "type": "comment",
        "z": "f6f5d41e533a8b1a",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 1630,
        "y": 360,
        "wires": []
    },
    {
        "id": "58192c7a7348fcce",
        "type": "comment",
        "z": "f6f5d41e533a8b1a",
        "name": "null",
        "info": "",
        "x": 1710,
        "y": 300,
        "wires": []
    },
    {
        "id": "6a00d8108e7ecad5",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "check price for sale start",
        "func": "if (msg.bot.status.currentprice >= msg.bot.currentfloor[5]){\n    \n    msg.bot.currentfloor[7] = 3;\n\n    return [null,msg];\n} else {\n\n    return [msg,null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 840,
        "wires": [
            [
                "3b6485dd0466a494"
            ],
            [
                "0dd12336c70146c5"
            ]
        ]
    },
    {
        "id": "3b6485dd0466a494",
        "type": "link out",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "links": [
            "b38fc6a51aebc0c0"
        ],
        "x": 775,
        "y": 800,
        "wires": []
    },
    {
        "id": "4aabfb6e8ad7be52",
        "type": "link out",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "links": [
            "b38fc6a51aebc0c0"
        ],
        "x": 495,
        "y": 1020,
        "wires": []
    },
    {
        "id": "8e3e7ee3c94c910d",
        "type": "link out",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "links": [
            "b38fc6a51aebc0c0"
        ],
        "x": 1555,
        "y": 900,
        "wires": []
    },
    {
        "id": "0dd12336c70146c5",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "change floors",
        "func": "node.warn(\"start ttp on floor \"+msg.bot.currentfloor[0]);     \n\n//let tempfin = Number(Number(msg.bot.finance.quotainorders) + Number(msg.bot.currentfloor[14]));\n//\n//let tempfin2 = Number(Number(msg.bot.finance.quotanal) - Number(msg.bot.currentfloor[14]));\n//\n//msg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n//\n//if (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\n//if (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 3;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nnode.status({fill: \"green\", shape: \"ring\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 860,
        "wires": [
            [
                "5cc390c3f83465ac"
            ]
        ]
    },
    {
        "id": "234c24d9b690fa2f",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "get_order_status",
        "func": "let moneta = msg.bot.settings.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 460,
        "wires": [
            [
                "88923b60a1ca022b"
            ]
        ]
    },
    {
        "id": "34a174525af4de47",
        "type": "comment",
        "z": "f6f5d41e533a8b1a",
        "name": "null",
        "info": "",
        "x": 1630,
        "y": 900,
        "wires": []
    },
    {
        "id": "ae6be044919cdb53",
        "type": "comment",
        "z": "f6f5d41e533a8b1a",
        "name": "запрещено закупать",
        "info": "",
        "x": 700,
        "y": 580,
        "wires": []
    },
    {
        "id": "f5f5eea4121dfeae",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "get_order_status",
        "func": "let moneta = msg.bot.settings.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 640,
        "wires": [
            [
                "1028aeac112b31f1",
                "caf329a590763118"
            ]
        ]
    },
    {
        "id": "2cc90763e4badd98",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "change floors",
        "func": "//node.warn(\"cancel order \" + msg.bot.currentfloor[14]);\n//let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//\n//msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n//\n//if (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\n//if (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet botname = msg.bot.settings.botname;\n\nlet data = \"Ордер на покупку отменен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(botname, data);\ntilog;\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[10] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 700,
        "wires": [
            [
                "a5b4394319cc2495"
            ]
        ]
    },
    {
        "id": "eb140da1dd7d23c2",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "change floors",
        "func": "node.warn(\"filled order \" + msg.bot.currentfloor[14]);\nlet node_time = new Date().getTime();\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\ncurrentfloor[9] = node_time;\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nlet data = \"Ордер на покупку исполнен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname, data);\ntilog;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 780,
        "wires": [
            [
                "78a4c125bfc3d6eb"
            ]
        ]
    },
    {
        "id": "259ed3055db88035",
        "type": "link out",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "links": [
            "b38fc6a51aebc0c0"
        ],
        "x": 2255,
        "y": 420,
        "wires": []
    },
    {
        "id": "c4e7fe8c6e0bf4af",
        "type": "link out",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "links": [
            "b38fc6a51aebc0c0"
        ],
        "x": 2255,
        "y": 500,
        "wires": []
    },
    {
        "id": "16146dbc07188184",
        "type": "link out",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "links": [
            "b38fc6a51aebc0c0"
        ],
        "x": 2355,
        "y": 780,
        "wires": []
    },
    {
        "id": "b13f786bfc2cd8e1",
        "type": "link out",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "links": [
            "b38fc6a51aebc0c0"
        ],
        "x": 2255,
        "y": 700,
        "wires": []
    },
    {
        "id": "4a300454ae21e69d",
        "type": "link out",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "links": [
            "b38fc6a51aebc0c0"
        ],
        "x": 1315,
        "y": 860,
        "wires": []
    },
    {
        "id": "d1f5e69b0d94d6c0",
        "type": "link out",
        "z": "f6f5d41e533a8b1a",
        "name": "out",
        "links": [
            "371a0062c65d9bd9",
            "e04dadffe51e86f0"
        ],
        "x": 245,
        "y": 200,
        "wires": []
    },
    {
        "id": "216b6d5fc3879786",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "orderexec cansel",
        "func": "let cmd = \"cansel\";\n\nlet orderid = msg.orderid;\nlet moneta = msg.bot.settings.moneta;\nlet floor = msg.bot.currentfloor[0] - 1;\nlet data = {\"moneta\":moneta, \"orderid\": orderid};\nconst orderexec = global.get('order_exec')(cmd,data);\n\nlet botname = msg.botname;\n\n//let data2 = botname+\":\"+cmd+\": orderid:\"+orderid;\n//const tilog = global.get('tilog')(botname,data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\"){\n        node.status({fill:\"green\",shape:\"dot\", text: orderexec.statusBody.orderId});\n        //msg.bot = msg.orderexec.bot;\n\n                                //msg.bot.ttp.curorderid = resp.orderId;\n                        //msg.bot.ttp.curstop = stopprice;\n                        //msg.bot.ttp.quantity = quantity;\n        \n        //let floor = msg.floorindex + 1;\n        //node.warn(\"cansel buy: \" + botname + \" on floor:\" + floor);\n\n        node.send(msg);\n        \n    } else {\n        node.status({fill:\"red\",shape:\"dot\"});\n        //msg.bot.ttp.curorderid = 0;\n        node.done();\n        node.send(msg);\n    }\n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 620,
        "wires": [
            [
                "d69e6da326cef9a2",
                "b0c3da4b8eee953d"
            ]
        ]
    },
    {
        "id": "d69e6da326cef9a2",
        "type": "switch",
        "z": "f6f5d41e533a8b1a",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1970,
        "y": 620,
        "wires": [
            [
                "2268486f2299fb42"
            ],
            [
                "c437521a71866a57",
                "47bf7e7a091fd3d1"
            ]
        ]
    },
    {
        "id": "2268486f2299fb42",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "register cansel",
        "func": "let floor = msg.bot.currentfloor[0] - 1;\nlet currentfloor = msg.bot.floors[floor];\n\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[14] = 0;\ncurrentfloor[10] = 0;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 580,
        "wires": [
            [
                "1032a3d1b544f969"
            ]
        ]
    },
    {
        "id": "1032a3d1b544f969",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 580,
        "wires": [
            [
                "57d792e7e0d32ef0",
                "acc7c64cd8870e8e"
            ]
        ]
    },
    {
        "id": "57d792e7e0d32ef0",
        "type": "link out",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "links": [
            "b38fc6a51aebc0c0"
        ],
        "x": 2695,
        "y": 580,
        "wires": []
    },
    {
        "id": "c437521a71866a57",
        "type": "link out",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "links": [
            "b38fc6a51aebc0c0"
        ],
        "x": 2115,
        "y": 640,
        "wires": []
    },
    {
        "id": "47bf7e7a091fd3d1",
        "type": "debug",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 660,
        "wires": []
    },
    {
        "id": "caf329a590763118",
        "type": "debug",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 620,
        "wires": []
    },
    {
        "id": "b0c3da4b8eee953d",
        "type": "debug",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 560,
        "wires": []
    },
    {
        "id": "acc7c64cd8870e8e",
        "type": "debug",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2630,
        "y": 520,
        "wires": []
    },
    {
        "id": "65f1dac344fbcf69",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "78a4c125bfc3d6eb",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 780,
        "wires": [
            [
                "16146dbc07188184"
            ]
        ]
    },
    {
        "id": "e1d49c305166a4b1",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 500,
        "wires": [
            [
                "c4e7fe8c6e0bf4af"
            ]
        ]
    },
    {
        "id": "5cc390c3f83465ac",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 860,
        "wires": [
            [
                "4a300454ae21e69d"
            ]
        ]
    },
    {
        "id": "4d4c9e185fb62bd1",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 420,
        "wires": [
            [
                "259ed3055db88035"
            ]
        ]
    },
    {
        "id": "a5b4394319cc2495",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 700,
        "wires": [
            [
                "b13f786bfc2cd8e1"
            ]
        ]
    },
    {
        "id": "2557b87adbaa7798",
        "type": "inject",
        "z": "f6f5d41e533a8b1a",
        "g": "666006aaa2e325fc",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1630,
        "y": 1220,
        "wires": [
            [
                "72b2337126188c59"
            ]
        ]
    },
    {
        "id": "72b2337126188c59",
        "type": "redis-out",
        "z": "f6f5d41e533a8b1a",
        "g": "666006aaa2e325fc",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 1630,
        "y": 1260,
        "wires": []
    },
    {
        "id": "f098d607e8496579",
        "type": "inject",
        "z": "f6f5d41e533a8b1a",
        "g": "666006aaa2e325fc",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "9",
        "topic": "",
        "payloadType": "date",
        "x": 1210,
        "y": 1220,
        "wires": [
            [
                "97b5e1ee8ca22c3b"
            ]
        ]
    },
    {
        "id": "97b5e1ee8ca22c3b",
        "type": "redis-out",
        "z": "f6f5d41e533a8b1a",
        "g": "666006aaa2e325fc",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 1210,
        "y": 1260,
        "wires": []
    },
    {
        "id": "368ab34e94865c42",
        "type": "inject",
        "z": "f6f5d41e533a8b1a",
        "g": "666006aaa2e325fc",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1390,
        "y": 1220,
        "wires": [
            [
                "b5d09701ed5f5d6d"
            ]
        ]
    },
    {
        "id": "b5d09701ed5f5d6d",
        "type": "redis-out",
        "z": "f6f5d41e533a8b1a",
        "g": "666006aaa2e325fc",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 1390,
        "y": 1260,
        "wires": []
    },
    {
        "id": "7fad8acded27ae4f",
        "type": "redis-instance",
        "z": "f6f5d41e533a8b1a",
        "g": "666006aaa2e325fc",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 1830,
        "y": 1240,
        "wires": []
    },
    {
        "id": "2021e6863a9553e4",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "change floors",
        "func": "node.warn(\"partially filled order \" + msg.bot.currentfloor[14]);\nlet node_time = new Date().getTime();\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\ncurrentfloor[9] = node_time;\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nlet data = \"Ордер на покупку исполнен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname, data);\ntilog;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 920,
        "wires": [
            [
                "49f619df70e35b42"
            ]
        ]
    },
    {
        "id": "8f4ebb70b246f37c",
        "type": "link out",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "links": [
            "b38fc6a51aebc0c0"
        ],
        "x": 2615,
        "y": 920,
        "wires": []
    },
    {
        "id": "49f619df70e35b42",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\n//global.set(msg.botname, msg.bot);\n\nlet volname = guid + \"-bots:\" + botname + \":data\";\nlet botdata = {\n    \"finance\": JSON.stringify(finance),\n    \"floors\": JSON.stringify(floors),\n    \"sales\": JSON.stringify(sales)\n\n};\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n\n    node.status({ fill: \"green\", shape: \"ring\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2360,
        "y": 920,
        "wires": [
            [
                "8f4ebb70b246f37c"
            ]
        ]
    },
    {
        "id": "854cd1387cc64c6f",
        "type": "function",
        "z": "f6f5d41e533a8b1a",
        "name": "partially filled buy order",
        "func": "let tgmsg = \"partially filled buy order \" + msg.bot.currentfloor[8];\nnode.warn(msg);\nlet guid = global.get('guid');\nmsg = {};\nmsg.payload = {tgmsg, guid};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 860,
        "wires": [
            [
                "35b8988efad55898"
            ]
        ]
    },
    {
        "id": "ac32c8c3d627c357",
        "type": "redis-out",
        "z": "f6f5d41e533a8b1a",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 2410,
        "y": 860,
        "wires": []
    },
    {
        "id": "35b8988efad55898",
        "type": "rbe",
        "z": "f6f5d41e533a8b1a",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 2260,
        "y": 860,
        "wires": [
            [
                "ac32c8c3d627c357"
            ]
        ]
    },
    {
        "id": "c1de80b9cafdd278",
        "type": "link in",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "f073e9dbe313502b",
            "2aaf81456a47ee40",
            "4970e284f21b629f",
            "3b2d899666aacef2",
            "15864b4634126e66",
            "8f0c5b57b5119af8",
            "2d5ad73752c276d9",
            "4cddd51017c75769",
            "d208742dc4eeb9ef",
            "2c9442a2b966c69a",
            "bd8595f08c41505b",
            "db5671252a8f49ee",
            "13be00812f46687f",
            "b7d66df51452c263",
            "10f5ad379a6e24f0",
            "aa5c8214700f80d1",
            "90a8b3f2dbc8401b",
            "ccdecaaa4dad9420",
            "0faae939f8adb6b8",
            "a7bb2946f8f0ea4d",
            "56d57c1b4e2f677a",
            "143a749463398893",
            "3a80ac675cc5b41a",
            "f8477aadd0dec13b",
            "a35cd6db05d8aaec",
            "dd998b700bdae2f0",
            "b35ad3fd7395deda",
            "c2bd72e5639f646b",
            "10c24a2e7aabc7a2",
            "84065a7178289056",
            "34ae5b9f4b1fedc4",
            "7e04d87f3c65e53f",
            "8d10b8e8b4a2df34",
            "f2d991f44297d869",
            "41a9873ca478fbd4",
            "c54248bd9b2a7809",
            "3479749d95070158",
            "18cc618e220d306b",
            "48730dc914400d86"
        ],
        "x": 55,
        "y": 40,
        "wires": [
            [
                "a2375dc0e61e0bfc"
            ]
        ]
    },
    {
        "id": "179defa09285937f",
        "type": "link in",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "895dddf9d5cdfdae",
            "9540463a0607bccd",
            "5b558081f66acb32"
        ],
        "x": 155,
        "y": 480,
        "wires": [
            [
                "8790159c0111f669",
                "9e90068f641b1386"
            ]
        ]
    },
    {
        "id": "726689ed5c0a7303",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "1 - Покупаем",
        "info": "",
        "x": 550,
        "y": 380,
        "wires": []
    },
    {
        "id": "aef42f1841b33e5b",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "2 - Купили. Держим",
        "info": "",
        "x": 580,
        "y": 660,
        "wires": []
    },
    {
        "id": "19eccd7b4e15cba7",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "3 - Продаём",
        "info": "",
        "x": 550,
        "y": 920,
        "wires": []
    },
    {
        "id": "8790159c0111f669",
        "type": "switch",
        "z": "64c098ab57cae330",
        "name": "статус этажа",
        "property": "bot.currentfloor[7]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 300,
        "y": 480,
        "wires": [
            [
                "4d88c0e87e6c8b36"
            ],
            [
                "c247093c113fff21"
            ],
            [
                "efba0babdaabbdb4"
            ],
            [
                "db5671252a8f49ee"
            ],
            [],
            [
                "db5671252a8f49ee"
            ]
        ]
    },
    {
        "id": "4d88c0e87e6c8b36",
        "type": "switch",
        "z": "64c098ab57cae330",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 260,
        "wires": [
            [
                "b5da4416e6d8f280"
            ],
            [
                "3b2d899666aacef2"
            ]
        ]
    },
    {
        "id": "11f0b67d23b208cb",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "запрещено закупать",
        "info": "",
        "x": 900,
        "y": 260,
        "wires": []
    },
    {
        "id": "04a7b30ad52a4789",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "0 - Свободно",
        "info": "",
        "x": 550,
        "y": 220,
        "wires": []
    },
    {
        "id": "1301be39818eabba",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 1670,
        "y": 780,
        "wires": []
    },
    {
        "id": "3b2d899666aacef2",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 1035,
        "y": 260,
        "wires": []
    },
    {
        "id": "c247093c113fff21",
        "type": "switch",
        "z": "64c098ab57cae330",
        "name": "проверка запрета на закуп",
        "property": "bot.zapret_na_zakup",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 420,
        "wires": [
            [
                "b4145de635699943"
            ],
            [
                "6cdbd44cf8421fa0"
            ]
        ]
    },
    {
        "id": "2f9b458633a6f9aa",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "NEW",
        "info": "",
        "x": 1590,
        "y": 560,
        "wires": []
    },
    {
        "id": "8d3fe3d273fe15fd",
        "type": "switch",
        "z": "64c098ab57cae330",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1340,
        "y": 680,
        "wires": [
            [
                "103f92e316371166"
            ],
            [
                "b35ad3fd7395deda",
                "d7492a66d6fdb9e7"
            ],
            [
                "fca5d924d34e5947"
            ],
            [
                "e1965619ce8c768d"
            ],
            [
                "c2bd72e5639f646b"
            ],
            [
                "c2bd72e5639f646b"
            ],
            [
                "c2bd72e5639f646b"
            ]
        ]
    },
    {
        "id": "6cdbd44cf8421fa0",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "prepare get order status",
        "func": "let orderid = msg.bot.currentfloor[8];\nmsg.moneta = msg.bot.settings.moneta;\nmsg.orderid = orderid;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: orderid });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 580,
        "wires": [
            [
                "01f55c268871d97d"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "62c002a7378a7bbe",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "FILLED",
        "info": "",
        "x": 1590,
        "y": 720,
        "wires": []
    },
    {
        "id": "9b514bd436e3d4ed",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "CANCELED",
        "info": "",
        "x": 1610,
        "y": 640,
        "wires": []
    },
    {
        "id": "cf3d5d02c2733e7b",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "change floors",
        "func": "//node.warn(\"cancel order \" + msg.bot.currentfloor[14]);\n//let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//\n//msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n//\n//if (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\n//if (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet botname = msg.bot.settings.botname;\n\nlet data = \"Ордер на покупку отменен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(botname, data);\ntilog;\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[10] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 360,
        "wires": [
            [
                "1983ee28c14da90f"
            ]
        ]
    },
    {
        "id": "631b9d675397bcac",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "NEW",
        "info": "",
        "x": 1610,
        "y": 260,
        "wires": []
    },
    {
        "id": "80a561dd15f6d54a",
        "type": "switch",
        "z": "64c098ab57cae330",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 1340,
        "y": 400,
        "wires": [
            [
                "8f0c5b57b5119af8"
            ],
            [
                "8f0c5b57b5119af8"
            ],
            [
                "cf3d5d02c2733e7b"
            ],
            [
                "7c6e44661c565069"
            ],
            [],
            [],
            [
                "8f0c5b57b5119af8"
            ]
        ]
    },
    {
        "id": "b4145de635699943",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "prepare get order status",
        "func": "let orderid = msg.bot.currentfloor[8];\n\nmsg.moneta = msg.bot.settings.moneta;\nmsg.orderid = orderid;\n\nnode.status({ fill: \"green\", shape: \"ring\", text: orderid });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 400,
        "wires": [
            [
                "8a6d47cfe7e6b0b8"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "2b172e9d328c2d36",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "FILLED",
        "info": "",
        "x": 1590,
        "y": 440,
        "wires": []
    },
    {
        "id": "65ec62648934ebc3",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "CANCELED",
        "info": "",
        "x": 1610,
        "y": 360,
        "wires": []
    },
    {
        "id": "7c6e44661c565069",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "change floors",
        "func": "node.warn(\"filled order \" + msg.bot.currentfloor[14]);\nlet node_time = new Date().getTime();\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\ncurrentfloor[9] = node_time;\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nlet data = \"Ордер на покупку исполнен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname, data);\ntilog;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 440,
        "wires": [
            [
                "446039aefc6efaf0"
            ]
        ]
    },
    {
        "id": "8f0c5b57b5119af8",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 1535,
        "y": 260,
        "wires": []
    },
    {
        "id": "b35ad3fd7395deda",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 1555,
        "y": 780,
        "wires": []
    },
    {
        "id": "bad3556cd3b1cbdd",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 1650,
        "y": 300,
        "wires": []
    },
    {
        "id": "c0a5d2ee9b66f698",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "null",
        "info": "",
        "x": 1730,
        "y": 260,
        "wires": []
    },
    {
        "id": "efba0babdaabbdb4",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "check price for sale start",
        "func": "if (msg.bot.status.currentprice >= msg.bot.currentfloor[5]){\n    \n    msg.bot.currentfloor[7] = 3;\n\n    return [null,msg];\n} else {\n\n    return [msg,null];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 780,
        "wires": [
            [
                "bd8595f08c41505b"
            ],
            [
                "7999575a552e1f50"
            ]
        ]
    },
    {
        "id": "bd8595f08c41505b",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 775,
        "y": 740,
        "wires": []
    },
    {
        "id": "db5671252a8f49ee",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 495,
        "y": 960,
        "wires": []
    },
    {
        "id": "c2bd72e5639f646b",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 1555,
        "y": 840,
        "wires": []
    },
    {
        "id": "7999575a552e1f50",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "change floors",
        "func": "node.warn(\"start ttp on floor \"+msg.bot.currentfloor[0]);     \n\n//let tempfin = Number(Number(msg.bot.finance.quotainorders) + Number(msg.bot.currentfloor[14]));\n//\n//let tempfin2 = Number(Number(msg.bot.finance.quotanal) - Number(msg.bot.currentfloor[14]));\n//\n//msg.bot.finance.quotainorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.quotanal = tempfin2.toFixed(msg.bot.settings.digitq);\n//\n//if (msg.bot.finance.baseinorders == -0) {msg.bot.finance.baseinorders = 0;}\n//if (msg.bot.finance.basenal == -0) {msg.bot.finance.basenal = 0;}\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 3;\n\nmsg.bot.floors[currentfloor[0]-1] = currentfloor;\n\nnode.status({fill: \"green\", shape: \"ring\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 800,
        "wires": [
            [
                "6047d32d13caab4d"
            ]
        ]
    },
    {
        "id": "8a6d47cfe7e6b0b8",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "get_order_status",
        "func": "let moneta = msg.bot.settings.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 400,
        "wires": [
            [
                "80a561dd15f6d54a"
            ]
        ]
    },
    {
        "id": "71427f80fb3ce3c7",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "null",
        "info": "",
        "x": 1630,
        "y": 840,
        "wires": []
    },
    {
        "id": "78dc2bd8eb16e546",
        "type": "comment",
        "z": "64c098ab57cae330",
        "name": "запрещено закупать",
        "info": "",
        "x": 700,
        "y": 520,
        "wires": []
    },
    {
        "id": "01f55c268871d97d",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "get_order_status",
        "func": "let moneta = msg.bot.settings.moneta;\nlet orderid = Number(msg.orderid);\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 580,
        "wires": [
            [
                "8d3fe3d273fe15fd",
                "ad35fc1a6d370428"
            ]
        ]
    },
    {
        "id": "fca5d924d34e5947",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "change floors",
        "func": "//node.warn(\"cancel order \" + msg.bot.currentfloor[14]);\n//let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.currentfloor[14]) * Number(msg.bot.currentfloor[10]));\n//\n//msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n//\n//if (msg.bot.finance.baseinorders == -0) { msg.bot.finance.baseinorders = 0; }\n//if (msg.bot.finance.basenal == -0) { msg.bot.finance.basenal = 0; }\n\nlet botname = msg.bot.settings.botname;\n\nlet data = \"Ордер на покупку отменен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(botname, data);\ntilog;\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[10] = 0;\ncurrentfloor[14] = 0;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 640,
        "wires": [
            [
                "c3e5d17dde715ead"
            ]
        ]
    },
    {
        "id": "e1965619ce8c768d",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "change floors",
        "func": "node.warn(\"filled order \" + msg.bot.currentfloor[14]);\nlet node_time = new Date().getTime();\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\ncurrentfloor[9] = node_time;\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nlet data = \"Ордер на покупку исполнен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname, data);\ntilog;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 720,
        "wires": [
            [
                "d8536023cc099910"
            ]
        ]
    },
    {
        "id": "b5da4416e6d8f280",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "проверка баланса",
        "func": "let quantity = Number((Number(msg.bot.finance.depo) * Number(msg.bot.settings.ordersize) / 100 / msg.bot.status.currentprice).toFixed(msg.bot.settings.digitq));\nlet price = Number((msg.bot.currentfloor[3]).toFixed(msg.bot.settings.digitprice));\n\nlet ordersum = price * quantity;\n//node.warn(ordersum);\n\nif (ordersum <= msg.bot.finance.basenal) {\n    return [msg, null];\n} else {\n    return [null, msg];\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 160,
        "wires": [
            [
                "8a163bfb42beec87"
            ],
            [
                "b7d66df51452c263"
            ]
        ]
    },
    {
        "id": "b7d66df51452c263",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 995,
        "y": 200,
        "wires": []
    },
    {
        "id": "a7bb2946f8f0ea4d",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 2255,
        "y": 360,
        "wires": []
    },
    {
        "id": "143a749463398893",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 2255,
        "y": 440,
        "wires": []
    },
    {
        "id": "3a80ac675cc5b41a",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 2355,
        "y": 720,
        "wires": []
    },
    {
        "id": "f8477aadd0dec13b",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 2255,
        "y": 640,
        "wires": []
    },
    {
        "id": "dd998b700bdae2f0",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 1315,
        "y": 800,
        "wires": []
    },
    {
        "id": "a2375dc0e61e0bfc",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "out",
        "links": [
            "33f2b93ae8d315c4",
            "35158053d0f5b216"
        ],
        "x": 125,
        "y": 40,
        "wires": []
    },
    {
        "id": "8a163bfb42beec87",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "orderexec setbuy",
        "func": "let cmd = \"setbuy\";\n\nlet quantity = Number((Number(msg.bot.finance.depo) * Number(msg.bot.settings.ordersize) / 100 / msg.bot.status.currentprice).toFixed(msg.bot.settings.digitq));\nlet floor = msg.bot.currentfloor[0] - 1;\nlet price = msg.bot.floors[floor][3].toFixed(msg.bot.settings.digitprice);\nlet data = { moneta: msg.bot.settings.moneta, price: price, quantity: quantity};\nconst orderexec = global.get('order_exec')(cmd, data);\n\nlet botname = msg.bot.settings.botname;\n\n//let data2 = botname + \":\" + cmd + \": price:\" + data.price + \", quantity: \" + data.quantity;\n//const tilog = global.get('tilog')(botname, data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n\n        node.done();\n\n        //node.warn(\"set buy: \" + botname + \" on floor:\" + flooor + \" q: \" + quantity );\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n        node.done();\n        node.send(msg);\n    }\n    \n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 100,
        "wires": [
            [
                "c32f1fa5032c4323"
            ]
        ]
    },
    {
        "id": "c32f1fa5032c4323",
        "type": "switch",
        "z": "64c098ab57cae330",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 100,
        "wires": [
            [
                "4f5fa5a9b0d51cb8"
            ],
            [
                "34ae5b9f4b1fedc4",
                "eae3c1f8279dd086"
            ]
        ]
    },
    {
        "id": "4f5fa5a9b0d51cb8",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "register buy",
        "func": "let floor = msg.bot.currentfloor[0] - 1;\nlet currentfloor = msg.bot.floors[floor];\n\ncurrentfloor[7] = 1;\ncurrentfloor[8] = msg.orderexec.statusBody.orderId;\ncurrentfloor[14] = msg.orderexec.statusBody.origQty;\ncurrentfloor[10] = msg.orderexec.statusBody.price;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\n//msg.bot.finance.baseinorders = (Number(Number(msg.bot.finance.baseinorders) + Number(msg.orderexec.statusBody.origQty) * Number(msg.orderexec.statusBody.price))).toFixed(msg.bot.settings.digitprice);\n//msg.bot.finance.basenal = (Number(Number(msg.bot.finance.basenal) - Number(msg.orderexec.statusBody.origQty) * Number(msg.orderexec.statusBody.price))).toFixed(msg.bot.settings.digitprice);\n\nnode.status({ fill: \"green\", shape: \"ring\", text: currentfloor[0] });\n\n//let data = \"Выставлен ордер - \" + currentfloor[8];\n//const tilog = global.get('tilog')(msg.bot.settings.botname, data);\n//tilog;\n//\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 60,
        "wires": [
            [
                "f5e627c305bce996"
            ]
        ]
    },
    {
        "id": "84065a7178289056",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 1935,
        "y": 60,
        "wires": []
    },
    {
        "id": "34ae5b9f4b1fedc4",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 1415,
        "y": 140,
        "wires": []
    },
    {
        "id": "eae3c1f8279dd086",
        "type": "debug",
        "z": "64c098ab57cae330",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 160,
        "wires": []
    },
    {
        "id": "103f92e316371166",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "orderexec cansel",
        "func": "let cmd = \"cansel\";\n\nlet orderid = msg.orderid;\nlet moneta = msg.bot.settings.moneta;\nlet floor = msg.bot.currentfloor[0] - 1;\nlet data = {\"moneta\":moneta, \"orderid\": orderid};\nconst orderexec = global.get('order_exec')(cmd,data);\n\nlet botname = msg.botname;\n\n//let data2 = botname+\":\"+cmd+\": orderid:\"+orderid;\n//const tilog = global.get('tilog')(botname,data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\"){\n        node.status({fill:\"green\",shape:\"dot\", text: orderexec.statusBody.orderId});\n        //msg.bot = msg.orderexec.bot;\n\n                                //msg.bot.ttp.curorderid = resp.orderId;\n                        //msg.bot.ttp.curstop = stopprice;\n                        //msg.bot.ttp.quantity = quantity;\n        \n        //let floor = msg.floorindex + 1;\n        //node.warn(\"cansel buy: \" + botname + \" on floor:\" + floor);\n\n        node.send(msg);\n        \n    } else {\n        node.status({fill:\"red\",shape:\"dot\"});\n        //msg.bot.ttp.curorderid = 0;\n        node.done();\n        node.send(msg);\n    }\n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 560,
        "wires": [
            [
                "d634154670aac73d",
                "8b470cb58c3b12b7"
            ]
        ]
    },
    {
        "id": "d634154670aac73d",
        "type": "switch",
        "z": "64c098ab57cae330",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1970,
        "y": 560,
        "wires": [
            [
                "b1fed369105d32f6"
            ],
            [
                "8d10b8e8b4a2df34",
                "2e3d1535d7fcaaf4"
            ]
        ]
    },
    {
        "id": "b1fed369105d32f6",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "register cansel",
        "func": "let floor = msg.bot.currentfloor[0] - 1;\nlet currentfloor = msg.bot.floors[floor];\n\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[14] = 0;\ncurrentfloor[10] = 0;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 520,
        "wires": [
            [
                "d4c0d6032458a433"
            ]
        ]
    },
    {
        "id": "d4c0d6032458a433",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 520,
        "wires": [
            [
                "7e04d87f3c65e53f",
                "d4ca3f391474fb93"
            ]
        ]
    },
    {
        "id": "7e04d87f3c65e53f",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 2695,
        "y": 520,
        "wires": []
    },
    {
        "id": "f5e627c305bce996",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\n\n//global.set(msg.botname, msg.bot);\n\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 60,
        "wires": [
            [
                "84065a7178289056"
            ]
        ]
    },
    {
        "id": "8d10b8e8b4a2df34",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 2115,
        "y": 580,
        "wires": []
    },
    {
        "id": "2e3d1535d7fcaaf4",
        "type": "debug",
        "z": "64c098ab57cae330",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 600,
        "wires": []
    },
    {
        "id": "ad35fc1a6d370428",
        "type": "debug",
        "z": "64c098ab57cae330",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 560,
        "wires": []
    },
    {
        "id": "02bfaff19623e58c",
        "type": "inject",
        "z": "64c098ab57cae330",
        "g": "c723fa7827c597d2",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1630,
        "y": 1160,
        "wires": [
            [
                "108d162050f2bedb"
            ]
        ]
    },
    {
        "id": "108d162050f2bedb",
        "type": "redis-out",
        "z": "64c098ab57cae330",
        "g": "c723fa7827c597d2",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 1630,
        "y": 1200,
        "wires": []
    },
    {
        "id": "692c5e5bb70e41c4",
        "type": "inject",
        "z": "64c098ab57cae330",
        "g": "c723fa7827c597d2",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "9",
        "topic": "",
        "payloadType": "date",
        "x": 1210,
        "y": 1160,
        "wires": [
            [
                "9a1bc6c73bf93cea"
            ]
        ]
    },
    {
        "id": "9a1bc6c73bf93cea",
        "type": "redis-out",
        "z": "64c098ab57cae330",
        "g": "c723fa7827c597d2",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 1210,
        "y": 1200,
        "wires": []
    },
    {
        "id": "5f58ba037a88ad40",
        "type": "inject",
        "z": "64c098ab57cae330",
        "g": "c723fa7827c597d2",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1390,
        "y": 1160,
        "wires": [
            [
                "b1e85c33253a7bc1"
            ]
        ]
    },
    {
        "id": "b1e85c33253a7bc1",
        "type": "redis-out",
        "z": "64c098ab57cae330",
        "g": "c723fa7827c597d2",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 1390,
        "y": 1200,
        "wires": []
    },
    {
        "id": "2f83bb2fab63d1bd",
        "type": "redis-instance",
        "z": "64c098ab57cae330",
        "g": "c723fa7827c597d2",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 1830,
        "y": 1180,
        "wires": []
    },
    {
        "id": "8b470cb58c3b12b7",
        "type": "debug",
        "z": "64c098ab57cae330",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 500,
        "wires": []
    },
    {
        "id": "d4ca3f391474fb93",
        "type": "debug",
        "z": "64c098ab57cae330",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2630,
        "y": 460,
        "wires": []
    },
    {
        "id": "9e90068f641b1386",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "d8536023cc099910",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 720,
        "wires": [
            [
                "3a80ac675cc5b41a"
            ]
        ]
    },
    {
        "id": "446039aefc6efaf0",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 440,
        "wires": [
            [
                "143a749463398893"
            ]
        ]
    },
    {
        "id": "6047d32d13caab4d",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 800,
        "wires": [
            [
                "dd998b700bdae2f0"
            ]
        ]
    },
    {
        "id": "1983ee28c14da90f",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 360,
        "wires": [
            [
                "a7bb2946f8f0ea4d"
            ]
        ]
    },
    {
        "id": "c3e5d17dde715ead",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 640,
        "wires": [
            [
                "f8477aadd0dec13b"
            ]
        ]
    },
    {
        "id": "d7492a66d6fdb9e7",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "partially filled buy order",
        "func": "let tgmsg = \"partially filled buy order \" + msg.bot.currentfloor[8];\n\n//node.warn(msg);\nlet guid = global.get('guid');\nmsg = {};\nmsg.payload = {tgmsg, guid};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 840,
        "wires": [
            [
                "747087ec9dfc7f2c"
            ]
        ]
    },
    {
        "id": "194bbbae22fd308a",
        "type": "redis-out",
        "z": "64c098ab57cae330",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 2450,
        "y": 840,
        "wires": []
    },
    {
        "id": "93eae2cd196c21ef",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "change floors",
        "func": "node.warn(\"partially filled order \" + msg.bot.currentfloor[14]);\nlet node_time = new Date().getTime();\n\nlet currentfloor = msg.bot.currentfloor;\ncurrentfloor[7] = 2;\ncurrentfloor[9] = node_time;\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\n\nlet data = \"Ордер на покупку исполнен, ID - \" + msg.bot.currentfloor[8];\nconst tilog = global.get('tilog')(msg.bot.settings.botname, data);\ntilog;\n\nnode.status({ fill: \"green\", shape: \"ring\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 780,
        "wires": [
            [
                "f939b4e2ea9138bb"
            ]
        ]
    },
    {
        "id": "41a9873ca478fbd4",
        "type": "link out",
        "z": "64c098ab57cae330",
        "name": "",
        "links": [
            "c1de80b9cafdd278"
        ],
        "x": 2515,
        "y": 780,
        "wires": []
    },
    {
        "id": "f939b4e2ea9138bb",
        "type": "function",
        "z": "64c098ab57cae330",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\n//global.set(msg.botname, msg.bot);\n\nlet volname = guid + \"-bots:\" + botname + \":data\";\nlet botdata = {\n    \"finance\": JSON.stringify(finance),\n    \"floors\": JSON.stringify(floors),\n    \"sales\": JSON.stringify(sales)\n\n};\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n\n    node.status({ fill: \"green\", shape: \"ring\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 780,
        "wires": [
            [
                "41a9873ca478fbd4"
            ]
        ]
    },
    {
        "id": "747087ec9dfc7f2c",
        "type": "rbe",
        "z": "64c098ab57cae330",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 2260,
        "y": 840,
        "wires": [
            [
                "194bbbae22fd308a"
            ]
        ]
    },
    {
        "id": "5494eedc72f35966",
        "type": "link in",
        "z": "33b4301963931e6c",
        "name": "in",
        "links": [
            "2242dddf10ab2255"
        ],
        "x": 425,
        "y": 260,
        "wires": [
            [
                "8d69bad807ed3ea7",
                "521a921a1d97656f"
            ]
        ]
    },
    {
        "id": "57340a5a1850b3b4",
        "type": "link out",
        "z": "33b4301963931e6c",
        "name": "out",
        "links": [
            "e5cb5e61bab31688"
        ],
        "x": 2155,
        "y": 260,
        "wires": []
    },
    {
        "id": "8d69bad807ed3ea7",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "get bot global",
        "func": "msg.botname = msg.payload.botname;\n\nmsg.bot = {};\nmsg.bot.busy = global.get(msg.botname + \"-busy\");\nmsg.bot.data = global.get(msg.botname + \"-data\");\nmsg.bot.onoff = global.get(msg.botname + \"-onoff\");\nmsg.bot.settings = global.get(msg.botname + \"-settings\");\nmsg.bot.status = global.get(msg.botname + \"-status\");\nmsg.bot.ttp = global.get(msg.botname + \"-ttp\");\nmsg.bot.ttpbusy = global.get(msg.botname + \"-ttpbusy\");\n\nmsg.bot.floors = msg.bot.data.floors;\nmsg.bot.finance = msg.bot.data.finance;\nmsg.bot.sales = msg.bot.data.sales;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 260,
        "wires": [
            [
                "db47911710446680",
                "ddd1ce17027c10e0"
            ]
        ]
    },
    {
        "id": "db47911710446680",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "stop pair bot",
        "func": "\nglobal.set(msg.botname + \"-onoff\", false);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 260,
        "wires": [
            [
                "2e3673018cf2d7e8"
            ]
        ]
    },
    {
        "id": "2e3673018cf2d7e8",
        "type": "delay",
        "z": "33b4301963931e6c",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 260,
        "wires": [
            [
                "d437e1cfab19f43f"
            ]
        ]
    },
    {
        "id": "fc0d5f43c5188c22",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "floors array prepare",
        "func": "msg.payload = msg.bot.floors;\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 860,
        "wires": [
            [
                "a0ec5cccb4b5b0cd"
            ]
        ]
    },
    {
        "id": "a0ec5cccb4b5b0cd",
        "type": "split",
        "z": "33b4301963931e6c",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 410,
        "y": 860,
        "wires": [
            [
                "2af44f7e1dfd47b1"
            ]
        ]
    },
    {
        "id": "2af44f7e1dfd47b1",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "concrete floor select",
        "func": "msg.bot.currentfloor = msg.payload;\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 860,
        "wires": [
            [
                "d34b3c0c75d059d3",
                "5b5a67719dfd578a"
            ]
        ]
    },
    {
        "id": "756bae0e7a15c510",
        "type": "join",
        "z": "33b4301963931e6c",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2030,
        "y": 760,
        "wires": [
            [
                "9cb75b285306a721",
                "1c395bfd44253282"
            ]
        ]
    },
    {
        "id": "f7cc33bb43d97ae2",
        "type": "comment",
        "z": "33b4301963931e6c",
        "name": "1 - Покупаем",
        "info": "",
        "x": 1150,
        "y": 740,
        "wires": []
    },
    {
        "id": "202b437b8ba68e25",
        "type": "comment",
        "z": "33b4301963931e6c",
        "name": "2 - Купили. Держим",
        "info": "",
        "x": 1180,
        "y": 840,
        "wires": []
    },
    {
        "id": "bf6980d35acc99e9",
        "type": "comment",
        "z": "33b4301963931e6c",
        "name": "3 - Продаём",
        "info": "",
        "x": 1210,
        "y": 900,
        "wires": []
    },
    {
        "id": "d34b3c0c75d059d3",
        "type": "switch",
        "z": "33b4301963931e6c",
        "name": "статус этажа",
        "property": "bot.currentfloor[7]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 920,
        "y": 860,
        "wires": [
            [
                "a7515aadd09994cf"
            ],
            [
                "8a71c18422193c46"
            ],
            [
                "72d72fc312f10188"
            ],
            [
                "658fb29a09aa9afe"
            ],
            [
                "a7515aadd09994cf"
            ],
            [
                "a7515aadd09994cf"
            ]
        ]
    },
    {
        "id": "e7e6c6d29c3201f1",
        "type": "link in",
        "z": "33b4301963931e6c",
        "name": "",
        "links": [
            "a7515aadd09994cf",
            "658fb29a09aa9afe",
            "72d72fc312f10188",
            "a50be74ebdb51877",
            "59a1b7b66a529f05",
            "2ef6f55c6229628a"
        ],
        "x": 1895,
        "y": 760,
        "wires": [
            [
                "756bae0e7a15c510"
            ]
        ]
    },
    {
        "id": "a7515aadd09994cf",
        "type": "link out",
        "z": "33b4301963931e6c",
        "name": "",
        "links": [
            "e7e6c6d29c3201f1"
        ],
        "x": 1095,
        "y": 960,
        "wires": []
    },
    {
        "id": "658fb29a09aa9afe",
        "type": "link out",
        "z": "33b4301963931e6c",
        "name": "",
        "links": [
            "e7e6c6d29c3201f1"
        ],
        "x": 1335,
        "y": 900,
        "wires": []
    },
    {
        "id": "72d72fc312f10188",
        "type": "link out",
        "z": "33b4301963931e6c",
        "name": "",
        "links": [
            "e7e6c6d29c3201f1"
        ],
        "x": 1335,
        "y": 840,
        "wires": []
    },
    {
        "id": "8a71c18422193c46",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "orderexec cansel",
        "func": "let cmd = \"cansel\";\n\nlet orderid = msg.bot.currentfloor[8];\nlet moneta = msg.bot.settings.moneta;\nlet floor = msg.bot.currentfloor[0] - 1;\nlet data = {\"moneta\":moneta, \"orderid\": orderid};\nconst orderexec = global.get('order_exec')(cmd,data);\n\nlet botname = msg.botname;\n\n//let data2 = botname+\":\"+cmd+\": orderid:\"+orderid;\n//const tilog = global.get('tilog')(botname,data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\"){\n        node.status({fill:\"green\",shape:\"dot\", text: orderexec.statusBody.orderId});\n        //msg.bot = msg.orderexec.bot;\n\n                                //msg.bot.ttp.curorderid = resp.orderId;\n                        //msg.bot.ttp.curstop = stopprice;\n                        //msg.bot.ttp.quantity = quantity;\n        \n        //let floor = msg.floorindex + 1;\n        //node.warn(\"cansel buy: \" + botname + \" on floor:\" + floor);\n\n        node.send(msg);\n        \n    } else {\n        node.status({fill:\"red\",shape:\"dot\"});\n        //msg.bot.ttp.curorderid = 0;\n        node.done();\n        node.send(msg);\n    }\n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 780,
        "wires": [
            [
                "346d0b967a77cd8e",
                "c08ff0dddf9ba18f"
            ]
        ]
    },
    {
        "id": "346d0b967a77cd8e",
        "type": "switch",
        "z": "33b4301963931e6c",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1370,
        "y": 780,
        "wires": [
            [
                "7cbd5a1dfe6dab9b"
            ],
            [
                "2ef6f55c6229628a"
            ]
        ]
    },
    {
        "id": "7cbd5a1dfe6dab9b",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "register cansel",
        "func": "let floor = msg.bot.currentfloor[0] - 1;\nlet currentfloor = msg.bot.floors[floor];\n\ncurrentfloor[7] = 0;\ncurrentfloor[8] = 0;\ncurrentfloor[14] = 0;\ncurrentfloor[10] = 0;\n\nmsg.bot.floors[currentfloor[0] - 1] = currentfloor;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 740,
        "wires": [
            [
                "59a1b7b66a529f05"
            ]
        ]
    },
    {
        "id": "1c395bfd44253282",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "update bot floors, finance triger + on redis",
        "func": "let botname = msg.botname;\nlet guid = global.get('guid');\n\nlet finance = msg.bot.finance;\nlet floors = msg.bot.floors;\nlet sales = msg.bot.sales;\n\nlet sumsales = 0;\nsales.all.forEach(function (element) {\n    sumsales = sumsales + element[5];\n\n});\n\nlet quotanal = 0;\nlet quotainorders = 0;\nlet basenal = Number(finance.startdepo) + Number(sumsales);\nlet baseinorders = 0;\n\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 1) {\n        baseinorders = baseinorders + Number(item[14]) * Number(item[3]);\n        basenal = basenal - Number(item[14]) * Number(item[3]);\n\n    }\n    if (item[7] === 2) {\n        quotanal = quotanal + Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n    if (item[7] === 3) {\n        quotainorders = quotainorders + Number(item[14]);\n        //quotanal = quotanal - Number(item[14]);\n        basenal = basenal - Number(item[14]) * Number(item[10]);\n    }\n\n\n\n});\nfinance.quotanal = (Number(quotanal)).toFixed(msg.bot.settings.digitq);\nfinance.quotainorders = (Number(quotainorders)).toFixed(msg.bot.settings.digitq);\nfinance.basenal = (Number(basenal)).toFixed(msg.bot.settings.digitprice);\nfinance.baseinorders = (Number(baseinorders)).toFixed(msg.bot.settings.digitprice);\n\nlet p = Number(msg.bot.status.currentprice);\nfinance.depo = Number((Number(finance.quotanal) * p + Number(finance.quotainorders) * p + Number(finance.basenal) + Number(finance.baseinorders)).toFixed(msg.bot.settings.digitprice));\n\n\n\n\nmsg.bot.finance = finance;\nmsg.bot.floors = floors;\nmsg.bot.sales = sales;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 760,
        "wires": [
            [
                "367e7b34d7b15b6f"
            ]
        ]
    },
    {
        "id": "c08ff0dddf9ba18f",
        "type": "debug",
        "z": "33b4301963931e6c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 720,
        "wires": []
    },
    {
        "id": "59a1b7b66a529f05",
        "type": "link out",
        "z": "33b4301963931e6c",
        "name": "",
        "links": [
            "e7e6c6d29c3201f1"
        ],
        "x": 1735,
        "y": 740,
        "wires": []
    },
    {
        "id": "2ef6f55c6229628a",
        "type": "link out",
        "z": "33b4301963931e6c",
        "name": "",
        "links": [
            "e7e6c6d29c3201f1"
        ],
        "x": 1595,
        "y": 800,
        "wires": []
    },
    {
        "id": "636ebc28a6ece0f8",
        "type": "switch",
        "z": "33b4301963931e6c",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 980,
        "y": 1360,
        "wires": [
            [
                "38d459665db55cc4"
            ],
            [
                "87c41ada5a05cf73"
            ],
            [
                "41cba21f8e60eb99",
                "4b4b2227743912b3"
            ],
            [
                "41cba21f8e60eb99",
                "4b4b2227743912b3"
            ],
            [
                "41cba21f8e60eb99",
                "4b4b2227743912b3"
            ],
            [
                "41cba21f8e60eb99",
                "4b4b2227743912b3"
            ],
            []
        ]
    },
    {
        "id": "f9e4b56d264b8a43",
        "type": "comment",
        "z": "33b4301963931e6c",
        "name": "NEW",
        "info": "",
        "x": 1190,
        "y": 1280,
        "wires": []
    },
    {
        "id": "12ab2506993a988d",
        "type": "comment",
        "z": "33b4301963931e6c",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 1230,
        "y": 1320,
        "wires": []
    },
    {
        "id": "038e67b20ae6cb88",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "get_order_status",
        "func": "let moneta = msg.bot.settings.moneta;\nmsg.moneta = moneta;\nlet orderid = msg.bot.ttp.curorderid\nmsg.orderid = orderid;\n\n\n///msg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 1360,
        "wires": [
            [
                "636ebc28a6ece0f8",
                "41e5f1d6913376fc"
            ]
        ]
    },
    {
        "id": "41e5f1d6913376fc",
        "type": "debug",
        "z": "33b4301963931e6c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1420,
        "wires": []
    },
    {
        "id": "ddd1ce17027c10e0",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "Panic",
        "func": "let tgmsg = \"Panic sale\" + msg.botname;;\n\nlet guid = global.get('guid');\nmsg = {};\nmsg.payload = {tgmsg, guid};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 320,
        "wires": [
            [
                "2992ecd2cc67df5a"
            ]
        ]
    },
    {
        "id": "2992ecd2cc67df5a",
        "type": "redis-out",
        "z": "33b4301963931e6c",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 890,
        "y": 320,
        "wires": []
    },
    {
        "id": "acad7e4b27ade450",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "orderexec marketsell",
        "func": "\n\nlet cmd = \"marketsell\";\nlet quantity = Number(msg.bot.finance.quotanal);\n\n\nnode.warn(\"q:\" + quantity);\n\nif (quantity > 0) {\n\nlet data = {\n    \"moneta\": msg.bot.settings.moneta, \n    \"quantity\": quantity,\n    \"botname\": msg.botname,\n    \"trackname\": msg.trackname\n};\n\nconst orderexec = global.get('order_exec')(cmd, data);\n\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode == \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n\n        msg.bot.ttp.finalorder = orderexec.statusBody.orderId;\n\n        node.done();\n        node.send([msg, null]);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});\n\n} else {\n    return [null, msg];\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1960,
        "y": 1160,
        "wires": [
            [
                "218da2037df85760",
                "10185dd6bf272096",
                "011bafab556fc7b8"
            ],
            [
                "e5e307279b1e5b73"
            ]
        ]
    },
    {
        "id": "38d459665db55cc4",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "orderexec cansel",
        "func": "let cmd = \"cansel\";\nlet orderid = msg.bot.ttp.curorderid;\n\nlet data = {\n    \"moneta\": msg.bot.settings.moneta,\n    \"orderid\": orderid,\n    \"botname\": msg.botname,\n    \"trackname\": msg.trackname\n};\nconst orderexec = global.get('order_exec')(cmd, data);\n\nlet botname = msg.bot.settings.botname;\n\n//let data2 = \"cansel order id:\" + orderid;\n//const tilog = global.get('tilog')(botname, data2);\n//tilog;\n//msg.bot.ttp.proskal = true;\n//msg.bot.ttp.ttpbusy = true;\n//global.set(msg.botname + \"-ttp\", msg.bot.ttp);\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n\n        msg.bot.ttp.curorderid = 0;\n\n        let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.ttp.quantity) * Number(msg.bot.ttp.curstop));\n        let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.ttp.quantity) * Number(msg.bot.ttp.curstop));\n\n        msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n        msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\n        node.status({ fill: \"green\", shape: \"dot\" });\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.warn(msg);\n    node.error(error);\n});\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 1200,
        "wires": [
            [
                "06290d8cd99cc3ff",
                "dd01c18f05f9c522",
                "c1afb6ccd11edd0a"
            ]
        ]
    },
    {
        "id": "06290d8cd99cc3ff",
        "type": "switch",
        "z": "33b4301963931e6c",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1710,
        "y": 1200,
        "wires": [
            [
                "acad7e4b27ade450"
            ],
            [
                "789ef1b61dfeff2f",
                "2a4fe9c89c4e3bab"
            ]
        ]
    },
    {
        "id": "41cba21f8e60eb99",
        "type": "link out",
        "z": "33b4301963931e6c",
        "name": "",
        "links": [
            "b0b96c97c9a08193"
        ],
        "x": 1115,
        "y": 1480,
        "wires": []
    },
    {
        "id": "720d827187f55619",
        "type": "comment",
        "z": "33b4301963931e6c",
        "name": "не проработано \\n надо словить частично заполненный ордер на продажу",
        "info": "",
        "x": 1430,
        "y": 1380,
        "wires": []
    },
    {
        "id": "d437e1cfab19f43f",
        "type": "link out",
        "z": "33b4301963931e6c",
        "name": "",
        "links": [
            "9bf9f8e6defb0b21"
        ],
        "x": 1085,
        "y": 340,
        "wires": []
    },
    {
        "id": "9bf9f8e6defb0b21",
        "type": "link in",
        "z": "33b4301963931e6c",
        "name": "",
        "links": [
            "d437e1cfab19f43f"
        ],
        "x": 75,
        "y": 860,
        "wires": [
            [
                "fc0d5f43c5188c22"
            ]
        ]
    },
    {
        "id": "b0b96c97c9a08193",
        "type": "link in",
        "z": "33b4301963931e6c",
        "name": "",
        "links": [
            "b48199825203da51",
            "41cba21f8e60eb99",
            "6dbca5c98b6ee67f",
            "64630a52d9ec6c2c",
            "d32df1b1dcc8f85d",
            "c828c0e7829625e4",
            "1b8f9e431b18f8f2",
            "e5e307279b1e5b73"
        ],
        "x": 1855,
        "y": 260,
        "wires": [
            [
                "e301f202834ee82c"
            ]
        ]
    },
    {
        "id": "4b4b2227743912b3",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "ошибка panic 1",
        "func": "let tgmsg = \"ошибка panic 1\" + msg.botname;;\n\nlet guid = global.get('guid');\nmsg = {};\nmsg.payload = {tgmsg, guid};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 1500,
        "wires": [
            [
                "dd166dd975fbbe10"
            ]
        ]
    },
    {
        "id": "dd166dd975fbbe10",
        "type": "redis-out",
        "z": "33b4301963931e6c",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 1290,
        "y": 1540,
        "wires": []
    },
    {
        "id": "789ef1b61dfeff2f",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "ошибка panic 2",
        "func": "let tgmsg = \"ошибка panic 2\" + msg.botname;;\n\nlet guid = global.get('guid');\nmsg = {};\nmsg.payload = {tgmsg, guid};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 1280,
        "wires": [
            [
                "113551eaad93e268"
            ]
        ]
    },
    {
        "id": "113551eaad93e268",
        "type": "redis-out",
        "z": "33b4301963931e6c",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 1830,
        "y": 1320,
        "wires": []
    },
    {
        "id": "2a4fe9c89c4e3bab",
        "type": "debug",
        "z": "33b4301963931e6c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 1240,
        "wires": []
    },
    {
        "id": "218da2037df85760",
        "type": "switch",
        "z": "33b4301963931e6c",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2190,
        "y": 1160,
        "wires": [
            [
                "51d106340c83c4e1"
            ],
            [
                "7d9910cb9a840ff3",
                "bdc837972cd5e395",
                "6dbca5c98b6ee67f"
            ]
        ]
    },
    {
        "id": "7d9910cb9a840ff3",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении market ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2370,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "205428aeb56b2986",
        "type": "delay",
        "z": "33b4301963931e6c",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2430,
        "y": 940,
        "wires": [
            [
                "51d106340c83c4e1",
                "5ffc2cbbe6a88056"
            ]
        ]
    },
    {
        "id": "51d106340c83c4e1",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "get_order_status",
        "func": "let moneta = msg.bot.settings.moneta;\nmsg.moneta = moneta;\nlet orderid = msg.bot.ttp.finalorder;\nmsg.orderid = orderid;\n\n\n///msg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1020,
        "wires": [
            [
                "8d84e38652c8f2b0"
            ]
        ]
    },
    {
        "id": "8d84e38652c8f2b0",
        "type": "switch",
        "z": "33b4301963931e6c",
        "name": "статус ордера",
        "property": "orderexec.statusBody.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 2620,
        "y": 1020,
        "wires": [
            [
                "205428aeb56b2986"
            ],
            [
                "205428aeb56b2986"
            ],
            [
                "01dc1f515e3d64b2",
                "d32df1b1dcc8f85d"
            ],
            [
                "6ff6d12ef366fe0a"
            ],
            [
                "01dc1f515e3d64b2",
                "d32df1b1dcc8f85d"
            ],
            [
                "01dc1f515e3d64b2",
                "d32df1b1dcc8f85d"
            ]
        ]
    },
    {
        "id": "5ffc2cbbe6a88056",
        "type": "debug",
        "z": "33b4301963931e6c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2590,
        "y": 940,
        "wires": []
    },
    {
        "id": "75078050d4710787",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "msg.bot.ttp.final_price = msg.payload",
        "func": "let finalprice = Number(msg.statusBody.cummulativeQuoteQty) / Number(msg.statusBody.origQty);\nif (Number(finalprice) > 0) {\n    msg.bot.ttp.sold = true;\n    msg.bot.ttp.final_price = Number(finalprice);\n\n    msg.bot.ttp.curorderid = 0;\n    msg.bot.ttp.curstop = 0;\n    msg.bot.ttp.quantity = 0;\n   \n    msg.bot.finance.basenal = Number(msg.bot.finance.basenal) + Number(msg.bot.finance.quotanal) * Number(finalprice)\n    msg.bot.finance.quotanal = 0;\n\n    node.warn(\"basenal\" + msg.bot.finance.basenal);\n    \n    global.set(msg.botname + \"-ttp\", msg.bot.ttp);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3570,
        "y": 1020,
        "wires": [
            [
                "dc70381730ddde8d",
                "619b6c8b11b8332e"
            ]
        ]
    },
    {
        "id": "6ff6d12ef366fe0a",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "get orderstatus on binance",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\tuseServerTime: true,\n\tadjustForTimeDifference: true \n});\n\n\n\n\nlet moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nbinance.useServerTime(function() {\n    binance.orderStatus(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n\n        msg.err = err;\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        \n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.order_status = resp.status;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\t\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3020,
        "y": 1020,
        "wires": [
            [
                "24b9337646144b0f"
            ]
        ]
    },
    {
        "id": "24b9337646144b0f",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.statusCode = \"not ok\";\n    msg.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.statusCode = \"ok\";\n    msg.statusBody = msg.resp;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3280,
        "y": 1020,
        "wires": [
            [
                "75078050d4710787"
            ],
            [
                "b59a17ad5c15b98c",
                "1b8f9e431b18f8f2"
            ]
        ]
    },
    {
        "id": "dc70381730ddde8d",
        "type": "debug",
        "z": "33b4301963931e6c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3670,
        "y": 960,
        "wires": []
    },
    {
        "id": "d72b0239c08e57a5",
        "type": "comment",
        "z": "33b4301963931e6c",
        "name": "FILLED",
        "info": "",
        "x": 2810,
        "y": 1020,
        "wires": []
    },
    {
        "id": "bdc837972cd5e395",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "ошибка panic 3",
        "func": "let tgmsg = \"ошибка panic 3\" + msg.botname;;\n\nlet guid = global.get('guid');\nmsg = {};\nmsg.payload = {tgmsg, guid};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 1300,
        "wires": [
            [
                "c116abb4815fe6bb"
            ]
        ]
    },
    {
        "id": "c116abb4815fe6bb",
        "type": "redis-out",
        "z": "33b4301963931e6c",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 2430,
        "y": 1340,
        "wires": []
    },
    {
        "id": "6dbca5c98b6ee67f",
        "type": "link out",
        "z": "33b4301963931e6c",
        "name": "",
        "links": [
            "b0b96c97c9a08193"
        ],
        "x": 2535,
        "y": 1180,
        "wires": []
    },
    {
        "id": "01dc1f515e3d64b2",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "ошибка panic 3",
        "func": "let tgmsg = \"ошибка panic 3\" + msg.botname;;\n\nlet guid = global.get('guid');\nmsg = {};\nmsg.payload = {tgmsg, guid};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2840,
        "y": 1160,
        "wires": [
            [
                "e8e25565f203c82f"
            ]
        ]
    },
    {
        "id": "e8e25565f203c82f",
        "type": "redis-out",
        "z": "33b4301963931e6c",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 2870,
        "y": 1200,
        "wires": []
    },
    {
        "id": "d32df1b1dcc8f85d",
        "type": "link out",
        "z": "33b4301963931e6c",
        "name": "",
        "links": [
            "b0b96c97c9a08193"
        ],
        "x": 2775,
        "y": 1120,
        "wires": []
    },
    {
        "id": "c828c0e7829625e4",
        "type": "link out",
        "z": "33b4301963931e6c",
        "name": "",
        "links": [
            "b0b96c97c9a08193"
        ],
        "x": 3975,
        "y": 1020,
        "wires": []
    },
    {
        "id": "b59a17ad5c15b98c",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "ошибка panic 4",
        "func": "let tgmsg = \"ошибка panic 4\" + msg.botname;;\n\nlet guid = global.get('guid');\nmsg = {};\nmsg.payload = {tgmsg, guid};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3260,
        "y": 1120,
        "wires": [
            [
                "e5209a840ef5804e"
            ]
        ]
    },
    {
        "id": "e5209a840ef5804e",
        "type": "redis-out",
        "z": "33b4301963931e6c",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 3290,
        "y": 1160,
        "wires": []
    },
    {
        "id": "1b8f9e431b18f8f2",
        "type": "link out",
        "z": "33b4301963931e6c",
        "name": "",
        "links": [
            "b0b96c97c9a08193"
        ],
        "x": 3415,
        "y": 1120,
        "wires": []
    },
    {
        "id": "619b6c8b11b8332e",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "setbot_ttp reset",
        "func": "\nmsg.bot.ttp.curstop = 0;\nmsg.bot.ttp.raschstopprice = 0;\nmsg.bot.ttp.curorderid = 0;\nmsg.bot.ttp.sold = false;\n//msg.bot.ttp.ttpbusy = false;\nmsg.bot.ttp.currentprice = 0;\nmsg.bot.ttp.quantity = 0;\nmsg.bot.ttp.final_price = 0;\nmsg.bot.ttp.finalorder = 0;\nmsg.bot.ttp.proskal = false;\n\nglobal.set(msg.botname + \"-ttp\", msg.bot.ttp);\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3840,
        "y": 1020,
        "wires": [
            [
                "c828c0e7829625e4"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "e301f202834ee82c",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "setbot global",
        "func": "global.set(msg.botname + \"-ttp\", msg.bot.ttp);\nmsg.bot.data = {\n\n    \"floors\": msg.bot.floors,\n    \"finance\": msg.bot.finance,\n    \"sales\": msg.bot.sales,\n\n}\nglobal.set(msg.botname + \"-data\", msg.bot.data);\nmsg.bot.status.rezhim = \"Остановлен Panic Sale\"\nglobal.set(msg.botname + \"-status\", msg.bot.status);\nglobal.set(msg.botname + \"-onoff\", false);\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 260,
        "wires": [
            [
                "57340a5a1850b3b4",
                "2480c74123fae2dc",
                "e78b701972aa684b",
                "e5b4a1b6123336e1",
                "887167be31e8feb1",
                "4d25ac16275e85ad"
            ]
        ]
    },
    {
        "id": "9cb75b285306a721",
        "type": "debug",
        "z": "33b4301963931e6c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2220,
        "y": 640,
        "wires": []
    },
    {
        "id": "5b5a67719dfd578a",
        "type": "debug",
        "z": "33b4301963931e6c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 760,
        "wires": []
    },
    {
        "id": "521a921a1d97656f",
        "type": "debug",
        "z": "33b4301963931e6c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 140,
        "wires": []
    },
    {
        "id": "e5e307279b1e5b73",
        "type": "link out",
        "z": "33b4301963931e6c",
        "name": "",
        "links": [
            "b0b96c97c9a08193"
        ],
        "x": 2095,
        "y": 1240,
        "wires": []
    },
    {
        "id": "2480c74123fae2dc",
        "type": "debug",
        "z": "33b4301963931e6c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 320,
        "wires": []
    },
    {
        "id": "e5b4a1b6123336e1",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "setbot_data to redis",
        "func": "\nlet volname = msg.bot.settings.userid + \"-bots:\" + msg.botname + \":data\";\nlet botdata = {\n    \"finance\": JSON.stringify(msg.bot.data.finance),\n    \"floors\": JSON.stringify(msg.bot.data.floors),\n    \"sales\": JSON.stringify(msg.bot.data.sales)\n\n};\n\nconst upd = global.get('setbot_data')(volname, botdata);\n\nupd.then(upd => {\n\n    msg.payload = upd;\n    node.done();\n    node.status({ fill: \"green\", shape: \"ring\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"ring\", text: \"error\" });\n    node.error(error);\n});\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "e78b701972aa684b",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "setbot_ttp to redis",
        "func": "\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.botname + \":ttp\";\nmsg.payload = JSON.stringify(msg.bot.ttp);\n\nconst upd = global.get('setbot_ttp')(msg.topic, msg.payload);\n\nupd.then(upd => {\n    msg.payload = upd;\n    node.done();\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2170,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "887167be31e8feb1",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "setbot_status to redis",
        "func": "\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.botname + \":status\";\nmsg.payload = JSON.stringify(msg.bot.status);\n\nconst upd = global.get('setbot_status')(msg.topic, msg.payload);\n\nupd.then(upd => {\n    msg.payload = upd;\n    node.done();\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "4d25ac16275e85ad",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "setbot_onoff",
        "func": "\n\n\nmsg.topic = msg.bot.settings.userid + \"-bots:\" + msg.botname + \":onoff\";\nmsg.payload = JSON.stringify(false);\n\nconst upd = global.get('setbot_status')(msg.topic, msg.payload);\n\nupd.then(upd => {\n    msg.payload = upd;\n    node.done();\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "367e7b34d7b15b6f",
        "type": "switch",
        "z": "33b4301963931e6c",
        "name": "bot.ttp.curorderid > 0",
        "property": "bot.ttp.curorderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1220,
        "y": 1120,
        "wires": [
            [
                "038e67b20ae6cb88"
            ],
            [
                "acad7e4b27ade450"
            ]
        ]
    },
    {
        "id": "87c41ada5a05cf73",
        "type": "debug",
        "z": "33b4301963931e6c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 1300,
        "wires": []
    },
    {
        "id": "10185dd6bf272096",
        "type": "debug",
        "z": "33b4301963931e6c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2136.673583984375,
        "y": 1095.6666259765625,
        "wires": []
    },
    {
        "id": "011bafab556fc7b8",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "tilog",
        "func": "\nlet botdump = JSON.stringify(msg || \"\", null, '\\t');\n\nlet botname = msg.bot.settings.botname;\nlet data = \"panic market order: \" + botname + botdump;\n\nconst tilog = global.get('tilog')(botname, data);\n\ntilog.then(tilog => {\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "dd01c18f05f9c522",
        "type": "debug",
        "z": "33b4301963931e6c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 1080,
        "wires": []
    },
    {
        "id": "c1afb6ccd11edd0a",
        "type": "function",
        "z": "33b4301963931e6c",
        "name": "tilog",
        "func": "\nlet botdump = JSON.stringify(msg || \"\", null, '\\t');\n\nlet botname = msg.bot.settings.botname;\nlet data = \"panic market order: \" + botname + botdump;\n\nconst tilog = global.get('tilog')(botname, data);\n\ntilog.then(tilog => {\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "8cc76823.4b4e68",
        "type": "function",
        "z": "2a761808.610238",
        "name": "getprice",
        "func": "\nlet moneta = msg.bot.settings.moneta;\n\nconst gp = global.get('getprice')(moneta);\n\ngp.then(gp => {\n    let currentprice = Number(gp);\n    msg.bot.ttp.currentprice = currentprice;\n    msg.bot.ttp.raschstopprice = Number(Number(currentprice - currentprice / 100 * msg.bot.settings.ofsettop).toFixed(msg.bot.settings.digitprice));\n    msg.bot.ttp.curstop = Number(msg.bot.ttp.curstop);\n    msg.bot.ttp.curorderid = Number(msg.bot.ttp.curorderid);\n\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1020,
        "wires": [
            [
                "113ec5ce8fcdef3a"
            ]
        ]
    },
    {
        "id": "d9cd8b69.9e4298",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "raschstopprice ? curstop",
        "property": "bot.ttp.raschstopprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            },
            {
                "t": "lte",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 1000,
        "wires": [
            [
                "75de299e.39af68"
            ],
            [
                "58129e2b33a0a5c0"
            ]
        ]
    },
    {
        "id": "75de299e.39af68",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "order id > 0 ",
        "property": "bot.ttp.curorderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1570,
        "y": 820,
        "wires": [
            [
                "515429a6.bb3a88"
            ],
            [
                "8910df8c8a01ef46"
            ]
        ]
    },
    {
        "id": "d1ff77a2.4fa0d8",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 1980,
        "y": 1020,
        "wires": [
            [
                "1d26132c.06016d"
            ],
            [
                "1d26132c.06016d"
            ],
            [
                "53a7bd28e3a4888c"
            ],
            [
                "b33e3174bb59bb0b"
            ],
            [
                "4b4fa1ce.2d444"
            ],
            [
                "4b4fa1ce.2d444"
            ]
        ]
    },
    {
        "id": "4534916e.904b6",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "NEW",
        "info": "",
        "x": 2150,
        "y": 960,
        "wires": []
    },
    {
        "id": "587bbf9a.07aa8",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "CANCELED",
        "info": "",
        "x": 2170,
        "y": 1000,
        "wires": []
    },
    {
        "id": "f4e2a24.f2c696",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "FILLED",
        "info": "",
        "x": 2150,
        "y": 1040,
        "wires": []
    },
    {
        "id": "cb0cab38.a71d88",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "REJECTED или EXPIRED",
        "info": "",
        "x": 2210,
        "y": 1080,
        "wires": []
    },
    {
        "id": "b6e46ae5.962f68",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2310,
        "y": 960,
        "wires": []
    },
    {
        "id": "1d26132c.06016d",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 2435,
        "y": 960,
        "wires": []
    },
    {
        "id": "4b4fa1ce.2d444",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 2355,
        "y": 1080,
        "wires": []
    },
    {
        "id": "d65fadb6.35c73",
        "type": "function",
        "z": "2a761808.610238",
        "name": "get_order_status",
        "func": "let moneta = msg.bot.settings.moneta;\nmsg.moneta = moneta;\nlet orderid = msg.bot.ttp.curorderid;\nmsg.orderid = orderid;\n\n\n///msg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1020,
        "wires": [
            [
                "d1ff77a2.4fa0d8"
            ]
        ]
    },
    {
        "id": "515429a6.bb3a88",
        "type": "function",
        "z": "2a761808.610238",
        "name": "get_order_status",
        "func": "let moneta = msg.bot.settings.moneta;\nmsg.moneta = moneta;\nlet orderid = msg.bot.ttp.curorderid\nmsg.orderid = orderid;\n\n\n///msg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n    \n    msg.payload = result;\n  \n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n   \n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 720,
        "wires": [
            [
                "70ab31aebf851dec"
            ]
        ]
    },
    {
        "id": "2a35dba40cf875c4",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "586e39dc007e0cae",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3750,
        "y": 1540,
        "wires": [
            [
                "6900be342c7e23c4"
            ]
        ]
    },
    {
        "id": "6900be342c7e23c4",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "586e39dc007e0cae",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 3750,
        "y": 1580,
        "wires": []
    },
    {
        "id": "b9d560ba6b28bfe4",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "586e39dc007e0cae",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3330,
        "y": 1540,
        "wires": [
            [
                "c759fe83d1d68801"
            ]
        ]
    },
    {
        "id": "c759fe83d1d68801",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "586e39dc007e0cae",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 3330,
        "y": 1580,
        "wires": []
    },
    {
        "id": "1451734fb0602bf7",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "586e39dc007e0cae",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 3510,
        "y": 1540,
        "wires": [
            [
                "c447c89d479e742a"
            ]
        ]
    },
    {
        "id": "c447c89d479e742a",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "586e39dc007e0cae",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 3510,
        "y": 1580,
        "wires": []
    },
    {
        "id": "dd73e1c4557a5e65",
        "type": "redis-instance",
        "z": "2a761808.610238",
        "g": "586e39dc007e0cae",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 3950,
        "y": 1560,
        "wires": []
    },
    {
        "id": "369273d704a8a6bb",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "sold ?",
        "property": "bot.ttp.sold",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 960,
        "wires": [
            [
                "41ed2184ea044881",
                "ee531e0d29a02e98"
            ],
            [
                "5890758ada12b47b"
            ]
        ]
    },
    {
        "id": "41ed2184ea044881",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 395,
        "y": 840,
        "wires": []
    },
    {
        "id": "113ec5ce8fcdef3a",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "currentprice < curstop ",
        "property": "bot.ttp.currentprice",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            },
            {
                "t": "lt",
                "v": "bot.ttp.curstop",
                "vt": "msg"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1060,
        "y": 1020,
        "wires": [
            [
                "d9cd8b69.9e4298",
                "ae92ec1796ac14de"
            ],
            [
                "87238f2de96efe56",
                "8e2cdf6a6ea20e89"
            ]
        ]
    },
    {
        "id": "46607ceede3526b3",
        "type": "function",
        "z": "2a761808.610238",
        "name": "orderexec marketsell",
        "func": "\n\nlet cmd = \"marketsell\";\n\nlet data = {\n    \"moneta\": msg.bot.settings.moneta, \n    \"quantity\": msg.bot.ttp.quantity,\n    \"botname\": msg.botname,\n    \"trackname\": msg.trackname\n};\n\nconst orderexec = global.get('order_exec')(cmd, data);\n\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode == \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n\n        msg.bot.ttp.finalorder = orderexec.statusBody.orderId;\n\n        node.done();\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2080,
        "y": 1400,
        "wires": [
            [
                "44b5fd4edf5c653b"
            ]
        ]
    },
    {
        "id": "44b5fd4edf5c653b",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2290,
        "y": 1400,
        "wires": [
            [
                "8f615225ed83e13c",
                "c5bbb45629cea9ba"
            ],
            [
                "ae42249cd5628036",
                "a8153f71e95f058b"
            ]
        ]
    },
    {
        "id": "ae42249cd5628036",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении market ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 1420,
        "wires": [
            [
                "25e5da747f055ffb"
            ]
        ]
    },
    {
        "id": "25e5da747f055ffb",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 2575,
        "y": 1420,
        "wires": []
    },
    {
        "id": "5890758ada12b47b",
        "type": "function",
        "z": "2a761808.610238",
        "name": "calculate quantity",
        "func": "var floors = msg.bot.floors;\nlet quantity = 0;\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] === 3) {\n\n        quantity = Number(quantity) + Number(item[14]);\n\n\n    }\n});\n\nmsg.bot.ttp.quantity = Number(quantity);\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 980,
        "wires": [
            [
                "eb0cfd256b009b25"
            ]
        ]
    },
    {
        "id": "eb0cfd256b009b25",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "quantity > 0 ",
        "property": "bot.ttp.quantity",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 980,
        "wires": [
            [
                "400703b3d0a09d2f",
                "20c1f9ea417a9489"
            ],
            [
                "8cc76823.4b4e68",
                "534c6e0e72f6f9fe"
            ]
        ]
    },
    {
        "id": "400703b3d0a09d2f",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 825,
        "y": 940,
        "wires": []
    },
    {
        "id": "20c1f9ea417a9489",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "534c6e0e72f6f9fe",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "ae92ec1796ac14de",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "87238f2de96efe56",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "84ba06fc7512c1b7",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 1220,
        "y": 1540,
        "wires": [
            [
                "2bdb3fbb3925c0df",
                "91319a1e89f66e6c"
            ],
            [
                "9011d963f8a5cefa"
            ],
            [
                "21da88c81f6082a2"
            ],
            [
                "2cacbd2d7a056bd0"
            ],
            [
                "43656eb1fac8a3d6"
            ],
            [
                "43656eb1fac8a3d6"
            ]
        ]
    },
    {
        "id": "3c4c100f10ecd807",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "NEW",
        "info": "",
        "x": 1430,
        "y": 1460,
        "wires": []
    },
    {
        "id": "3bf753286f6614b5",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "CANCELED",
        "info": "",
        "x": 1450,
        "y": 1540,
        "wires": []
    },
    {
        "id": "1a3922257786e9b0",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "FILLED",
        "info": "",
        "x": 1430,
        "y": 1580,
        "wires": []
    },
    {
        "id": "dc961628ea7e3852",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "REJECTED или EXPIRED",
        "info": "",
        "x": 1490,
        "y": 1620,
        "wires": []
    },
    {
        "id": "c485474dbd0d5e74",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 1470,
        "y": 1500,
        "wires": []
    },
    {
        "id": "9011d963f8a5cefa",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 1595,
        "y": 1500,
        "wires": []
    },
    {
        "id": "43656eb1fac8a3d6",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 1395,
        "y": 1620,
        "wires": []
    },
    {
        "id": "06ee55c7f64e90e8",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 2415,
        "y": 1580,
        "wires": []
    },
    {
        "id": "9ea860d261239092",
        "type": "function",
        "z": "2a761808.610238",
        "name": "get_order_status",
        "func": "let moneta = msg.bot.settings.moneta;\nmsg.moneta = moneta;\nlet orderid = msg.bot.ttp.curorderid\nmsg.orderid = orderid;\n\n\n///msg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1540,
        "wires": [
            [
                "84ba06fc7512c1b7",
                "8663975ddd164e2d"
            ]
        ]
    },
    {
        "id": "f1ba9b6fb7dbbe41",
        "type": "function",
        "z": "2a761808.610238",
        "name": "msg.bot.ttp.final_price = msg.payload",
        "func": "let finalprice = Number(msg.statusBody.cummulativeQuoteQty) / Number(msg.statusBody.origQty);\nif (Number(finalprice) > 0) {\n    msg.bot.ttp.sold = true;\n    msg.bot.ttp.final_price = Number(finalprice);\n\n    msg.bot.ttp.curorderid = 0;\n    msg.bot.ttp.curstop = 0;\n    msg.bot.ttp.quantity = 0;\n\n    global.set(msg.botname + \"-ttp\", msg.bot.ttp);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2210,
        "y": 1580,
        "wires": [
            [
                "06ee55c7f64e90e8",
                "f0b40d15a51bec34",
                "1f7552f2fcf1468b"
            ]
        ]
    },
    {
        "id": "f0b40d15a51bec34",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2510,
        "y": 1580,
        "wires": []
    },
    {
        "id": "2ba6d3acf5701464",
        "type": "catch",
        "z": "2a761808.610238",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 3440,
        "y": 160,
        "wires": [
            [
                "a033d3e8b79f09f9",
                "a95db9dad596f929",
                "4d69f784c9a248c6"
            ]
        ]
    },
    {
        "id": "a033d3e8b79f09f9",
        "type": "function",
        "z": "2a761808.610238",
        "d": true,
        "name": "msg = {}",
        "func": "msg = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3680,
        "y": 80,
        "wires": [
            [
                "a17436c105450bb7"
            ]
        ]
    },
    {
        "id": "a17436c105450bb7",
        "type": "redis-out",
        "z": "2a761808.610238",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": true,
        "x": 3830,
        "y": 80,
        "wires": []
    },
    {
        "id": "2aa85ab3185272b1",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3810,
        "y": 160,
        "wires": []
    },
    {
        "id": "a95db9dad596f929",
        "type": "function",
        "z": "2a761808.610238",
        "name": "catch all ttp",
        "func": "msg.payload = \"catch all - \" + msg.botname;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3690,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "70ab31aebf851dec",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "статус ордера",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 2000,
        "y": 720,
        "wires": [
            [
                "359826635d024ff3"
            ],
            [
                "a30f7a41973f098b"
            ],
            [
                "8a25ccb6829d8c84"
            ],
            [
                "50b85d2b29c78da4"
            ],
            [
                "f3d254f3a9ced1b1"
            ],
            [
                "f3d254f3a9ced1b1"
            ]
        ]
    },
    {
        "id": "a30f7a41973f098b",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 2335,
        "y": 680,
        "wires": []
    },
    {
        "id": "e1baf23d830b0625",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "NEW",
        "info": "",
        "x": 2170,
        "y": 640,
        "wires": []
    },
    {
        "id": "22ab0fbf3279b36e",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "PARTIALLY_FILLED",
        "info": "",
        "x": 2210,
        "y": 680,
        "wires": []
    },
    {
        "id": "0a553883d3200a10",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "CANCELED",
        "info": "",
        "x": 2190,
        "y": 720,
        "wires": []
    },
    {
        "id": "be1c57524b76e1a1",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "FILLED",
        "info": "",
        "x": 2170,
        "y": 760,
        "wires": []
    },
    {
        "id": "fb7e7db1c59f91f5",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "REJECTED или EXPIRED",
        "info": "",
        "x": 2230,
        "y": 800,
        "wires": []
    },
    {
        "id": "f3d254f3a9ced1b1",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 2375,
        "y": 800,
        "wires": []
    },
    {
        "id": "4d69f784c9a248c6",
        "type": "function",
        "z": "2a761808.610238",
        "name": "get dump",
        "func": "\nlet trackname = msg.botname + '-dumpmsgttp';\nmsg.dump = flow.get(trackname);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3680,
        "y": 160,
        "wires": [
            [
                "2aa85ab3185272b1"
            ]
        ]
    },
    {
        "id": "2bdb3fbb3925c0df",
        "type": "function",
        "z": "2a761808.610238",
        "name": "orderexec cansel, proskal = true",
        "func": "let cmd = \"cansel\";\nlet orderid = msg.bot.ttp.curorderid;\n\nlet data = {\n    \"moneta\": msg.bot.settings.moneta,\n    \"orderid\": orderid,\n    \"botname\": msg.botname,\n    \"trackname\": msg.trackname\n};\nconst orderexec = global.get('order_exec')(cmd, data);\n\nlet botname = msg.bot.settings.botname;\n\n//let data2 = \"cansel order id:\" + orderid;\n//const tilog = global.get('tilog')(botname, data2);\n//tilog;\n//msg.bot.ttp.proskal = true;\n//msg.bot.ttp.ttpbusy = true;\n//global.set(msg.botname + \"-ttp\", msg.bot.ttp);\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n\n        msg.bot.ttp.curorderid = 0;\n\n        let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.ttp.quantity) * Number(msg.bot.ttp.curstop));\n        let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.ttp.quantity) * Number(msg.bot.ttp.curstop));\n\n        msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n        msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\n        node.status({ fill: \"green\", shape: \"dot\" });\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n        node.send(msg);\n    }\n\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n    node.warn(msg);\n    node.error(error);\n});\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1420,
        "wires": [
            [
                "aa5c6bf9f7f310ab"
            ]
        ]
    },
    {
        "id": "aa5c6bf9f7f310ab",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1870,
        "y": 1420,
        "wires": [
            [
                "46607ceede3526b3"
            ],
            [
                "69fa5228fd8ebd53"
            ]
        ]
    },
    {
        "id": "69fa5228fd8ebd53",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 1995,
        "y": 1460,
        "wires": []
    },
    {
        "id": "58129e2b33a0a5c0",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "order id > 0 ",
        "property": "bot.ttp.curorderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1570,
        "y": 1020,
        "wires": [
            [
                "d65fadb6.35c73"
            ],
            [
                "2055a0b0f09d357a",
                "abf9683151fef767"
            ]
        ]
    },
    {
        "id": "8e2cdf6a6ea20e89",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "order id > 0 ",
        "property": "bot.ttp.curorderid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 1540,
        "wires": [
            [
                "10028228c62e0e0f"
            ],
            [
                "2457696296d8e638",
                "1804a239e6edb063"
            ]
        ]
    },
    {
        "id": "2457696296d8e638",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 255,
        "y": 1600,
        "wires": []
    },
    {
        "id": "10028228c62e0e0f",
        "type": "delay",
        "z": "2a761808.610238",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 1540,
        "wires": [
            [
                "9ea860d261239092"
            ]
        ]
    },
    {
        "id": "a8153f71e95f058b",
        "type": "function",
        "z": "2a761808.610238",
        "name": "Ошибка при выставлении market ордера",
        "func": "msg.payload = \"Ошибка при выставлении market ордера - \" + msg.orderexec.statusBody;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2590,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "1804a239e6edb063",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "6f0677546806f704",
        "type": "trigger",
        "z": "2a761808.610238",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "topic",
        "topic": "botname",
        "outputs": 1,
        "x": 420,
        "y": 1580,
        "wires": [
            [
                "e5106d40dcf64eca",
                "40ab20ca4f61d995"
            ]
        ]
    },
    {
        "id": "f25897447e179389",
        "type": "function",
        "z": "2a761808.610238",
        "name": "reset",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1640,
        "wires": [
            [
                "6f0677546806f704"
            ]
        ]
    },
    {
        "id": "ee531e0d29a02e98",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tester___",
        "func": "let start_node_time = new Date().getTime();\n\nnode.status({fill: \"green\", shape: \"ring\", text: start_node_time});\n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "e5106d40dcf64eca",
        "type": "delay",
        "z": "2a761808.610238",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 430,
        "y": 1640,
        "wires": [
            [
                "f25897447e179389"
            ]
        ]
    },
    {
        "id": "40ab20ca4f61d995",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "reset is null",
        "property": "reset",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 1580,
        "wires": [
            [
                "10028228c62e0e0f"
            ]
        ]
    },
    {
        "id": "d5b4f825bb164cf8",
        "type": "delay",
        "z": "2a761808.610238",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2530,
        "y": 1180,
        "wires": [
            [
                "8f615225ed83e13c",
                "f16800a4deae0c91"
            ]
        ]
    },
    {
        "id": "8f615225ed83e13c",
        "type": "function",
        "z": "2a761808.610238",
        "name": "get_order_status",
        "func": "let moneta = msg.bot.settings.moneta;\nmsg.moneta = moneta;\nlet orderid = msg.bot.ttp.finalorder;\nmsg.orderid = orderid;\n\n\n///msg.topic = \"orders-status-\" + msg.bot.settings.userid + \":\" + moneta + \":\" + orderid;\n\n\n\nconst get_order_status = global.get('get_order_status')(moneta, orderid);\n\nget_order_status.then(result => {\n\n    msg.payload = result;\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 1260,
        "wires": [
            [
                "fa132a4e1b2b943f"
            ]
        ]
    },
    {
        "id": "fa132a4e1b2b943f",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "статус ордера",
        "property": "orderexec.statusBody.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PARTIALLY_FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "FILLED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECTED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXPIRED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 6,
        "x": 2720,
        "y": 1260,
        "wires": [
            [
                "d5b4f825bb164cf8"
            ],
            [
                "d5b4f825bb164cf8"
            ],
            [
                "b656d46ed57d42f2"
            ],
            [
                "d2750c54641cdf62"
            ],
            [
                "b656d46ed57d42f2"
            ],
            [
                "b656d46ed57d42f2"
            ]
        ]
    },
    {
        "id": "b656d46ed57d42f2",
        "type": "function",
        "z": "2a761808.610238",
        "name": "Ошибка при выставлении market ордера",
        "func": "msg.payload = \"Ошибка при исполнении market ордера - \" + msg.botname;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3030,
        "y": 1340,
        "wires": [
            [
                "8c12181324662e5c"
            ]
        ]
    },
    {
        "id": "8c12181324662e5c",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 3195,
        "y": 1380,
        "wires": []
    },
    {
        "id": "c5bbb45629cea9ba",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 1340,
        "wires": []
    },
    {
        "id": "f16800a4deae0c91",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2690,
        "y": 1180,
        "wires": []
    },
    {
        "id": "5cb78c95e9f5e431",
        "type": "switch",
        "z": "2a761808.610238",
        "g": "17b2eb4baaa826d1",
        "name": "bot.ttp.final_price == 0",
        "property": "bot.ttp.final_price",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3620,
        "y": 600,
        "wires": [
            [
                "77d59427d38fd283",
                "d7c6eafcf8852e61"
            ]
        ]
    },
    {
        "id": "77d59427d38fd283",
        "type": "function",
        "z": "2a761808.610238",
        "g": "17b2eb4baaa826d1",
        "name": "final price = 0",
        "func": "msg.payload = \"final price = 0\" + msg.botname;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3830,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "d7c6eafcf8852e61",
        "type": "function",
        "z": "2a761808.610238",
        "g": "17b2eb4baaa826d1",
        "name": "tilog",
        "func": "var floors = msg.bot.floors;\nlet nonzeroflors = [];\n\nfloors.forEach(function (item, i, floors) {\n\n    if (item[7] != 0) {\n\n        nonzeroflors.push(item);\n\n    }\n});\n\nnonzeroflors = JSON.stringify(nonzeroflors || \"\", null, '\\t');\n\nlet botdump = JSON.stringify(msg.bot.ttp || \"\", null, '\\t');\n\nlet botname = msg.bot.settings.botname;\nlet data = \"final price = 0 : \" + botname + botdump + nonzeroflors;\n\nconst tilog = global.get('tilog')(botname, data);\n\ntilog.then(tilog => {\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3800,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "503d53910c17c784",
        "type": "link in",
        "z": "2a761808.610238",
        "g": "17b2eb4baaa826d1",
        "name": "",
        "links": [
            "1f7552f2fcf1468b",
            "439bb71a7aa3d5e9",
            "4cc2c27ab3e8513c",
            "7d33f392693c5308",
            "bd807ea9c3ec6d9a",
            "d943da6452b63aba",
            "dacdddbb27b4bc0a",
            "5dcb47e1130ed706",
            "f89b0f809faf3044"
        ],
        "x": 3465,
        "y": 600,
        "wires": [
            [
                "5cb78c95e9f5e431"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "1f7552f2fcf1468b",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "503d53910c17c784",
            "b4f763508d707f79"
        ],
        "x": 2175,
        "y": 1640,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "2cacbd2d7a056bd0",
        "type": "function",
        "z": "2a761808.610238",
        "name": "get orderstatus on binance",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\tuseServerTime: true,\n\tadjustForTimeDifference: true \n});\n\n\n\n\nlet moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nbinance.useServerTime(function() {\n    binance.orderStatus(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n\n        msg.err = err;\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        \n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.order_status = resp.status;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\t\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 1580,
        "wires": [
            [
                "dc6e968162bd8abd"
            ]
        ]
    },
    {
        "id": "dc6e968162bd8abd",
        "type": "function",
        "z": "2a761808.610238",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.statusCode = \"not ok\";\n    msg.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.statusCode = \"ok\";\n    msg.statusBody = msg.resp;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 1580,
        "wires": [
            [
                "f1ba9b6fb7dbbe41"
            ],
            [
                "d9b0eb22e5a3033c"
            ]
        ]
    },
    {
        "id": "d9b0eb22e5a3033c",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 1995,
        "y": 1640,
        "wires": []
    },
    {
        "id": "396f3856733c5e5a",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 3875,
        "y": 1260,
        "wires": []
    },
    {
        "id": "86ce7e46c36fd95f",
        "type": "function",
        "z": "2a761808.610238",
        "name": "msg.bot.ttp.final_price = msg.payload",
        "func": "let finalprice = Number(msg.statusBody.cummulativeQuoteQty) / Number(msg.statusBody.origQty);\nif (Number(finalprice) > 0) {\n    msg.bot.ttp.sold = true;\n    msg.bot.ttp.final_price = Number(finalprice);\n\n    msg.bot.ttp.curorderid = 0;\n    msg.bot.ttp.curstop = 0;\n    msg.bot.ttp.quantity = 0;\n\n    global.set(msg.botname + \"-ttp\", msg.bot.ttp);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3670,
        "y": 1260,
        "wires": [
            [
                "396f3856733c5e5a",
                "bd807ea9c3ec6d9a",
                "65c2f9a089106bc8"
            ]
        ]
    },
    {
        "id": "bd807ea9c3ec6d9a",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "503d53910c17c784",
            "b4f763508d707f79"
        ],
        "x": 3795,
        "y": 1300,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "d2750c54641cdf62",
        "type": "function",
        "z": "2a761808.610238",
        "name": "get orderstatus on binance",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\tuseServerTime: true,\n\tadjustForTimeDifference: true \n});\n\n\n\n\nlet moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nbinance.useServerTime(function() {\n    binance.orderStatus(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n\n        msg.err = err;\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        \n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.order_status = resp.status;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\t\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3120,
        "y": 1260,
        "wires": [
            [
                "67d5ea40e52092a4"
            ]
        ]
    },
    {
        "id": "67d5ea40e52092a4",
        "type": "function",
        "z": "2a761808.610238",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.statusCode = \"not ok\";\n    msg.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.statusCode = \"ok\";\n    msg.statusBody = msg.resp;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3380,
        "y": 1260,
        "wires": [
            [
                "86ce7e46c36fd95f"
            ],
            [
                "cbede69abd64c9b3"
            ]
        ]
    },
    {
        "id": "cbede69abd64c9b3",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 3455,
        "y": 1300,
        "wires": []
    },
    {
        "id": "f3fda139104116cf",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 3115,
        "y": 1040,
        "wires": []
    },
    {
        "id": "4962f5cf3a439d26",
        "type": "function",
        "z": "2a761808.610238",
        "name": "msg.bot.ttp.final_price = msg.payload",
        "func": "let finalprice = Number(msg.statusBody.cummulativeQuoteQty) / Number(msg.statusBody.origQty);\nif (Number(finalprice) > 0) {\n    msg.bot.ttp.sold = true;\n    msg.bot.ttp.final_price = Number(finalprice);\n\n    msg.bot.ttp.curorderid = 0;\n    msg.bot.ttp.curstop = 0;\n    msg.bot.ttp.quantity = 0;\n\n    global.set(msg.botname + \"-ttp\", msg.bot.ttp);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 1040,
        "wires": [
            [
                "f3fda139104116cf",
                "7d33f392693c5308",
                "0a6f08d9f5a7acac"
            ]
        ]
    },
    {
        "id": "7d33f392693c5308",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "503d53910c17c784",
            "b4f763508d707f79"
        ],
        "x": 3075,
        "y": 1080,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "b33e3174bb59bb0b",
        "type": "function",
        "z": "2a761808.610238",
        "name": "get orderstatus on binance",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\tuseServerTime: true,\n\tadjustForTimeDifference: true \n});\n\n\n\n\nlet moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nbinance.useServerTime(function() {\n    binance.orderStatus(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n\n        msg.err = err;\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        \n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.order_status = resp.status;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\t\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2360,
        "y": 1040,
        "wires": [
            [
                "031ecc5c74916c63"
            ]
        ]
    },
    {
        "id": "031ecc5c74916c63",
        "type": "function",
        "z": "2a761808.610238",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.statusCode = \"not ok\";\n    msg.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.statusCode = \"ok\";\n    msg.statusBody = msg.resp;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2620,
        "y": 1040,
        "wires": [
            [
                "4962f5cf3a439d26"
            ],
            [
                "5e1ddf6dffe66d4e"
            ]
        ]
    },
    {
        "id": "5e1ddf6dffe66d4e",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 2715,
        "y": 1080,
        "wires": []
    },
    {
        "id": "639392368e9dd325",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 3135,
        "y": 760,
        "wires": []
    },
    {
        "id": "4e28f99472338707",
        "type": "function",
        "z": "2a761808.610238",
        "name": "msg.bot.ttp.final_price = msg.payload",
        "func": "let finalprice = Number(msg.statusBody.cummulativeQuoteQty) / Number(msg.statusBody.origQty);\nif (Number(finalprice) > 0) {\n    msg.bot.ttp.sold = true;\n    msg.bot.ttp.final_price = Number(finalprice);\n\n    msg.bot.ttp.curorderid = 0;\n    msg.bot.ttp.curstop = 0;\n    msg.bot.ttp.quantity = 0;\n\n    global.set(msg.botname + \"-ttp\", msg.bot.ttp);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2930,
        "y": 760,
        "wires": [
            [
                "639392368e9dd325",
                "d943da6452b63aba",
                "a6d6d5460bacac5a"
            ]
        ]
    },
    {
        "id": "d943da6452b63aba",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "503d53910c17c784",
            "b4f763508d707f79"
        ],
        "x": 3075,
        "y": 800,
        "wires": [],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "50b85d2b29c78da4",
        "type": "function",
        "z": "2a761808.610238",
        "name": "get orderstatus on binance",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\tuseServerTime: true,\n\tadjustForTimeDifference: true \n});\n\n\n\n\nlet moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nbinance.useServerTime(function() {\n    binance.orderStatus(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n\n        msg.err = err;\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        \n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.order_status = resp.status;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\t\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2380,
        "y": 760,
        "wires": [
            [
                "2dd346398c4d520f"
            ]
        ]
    },
    {
        "id": "2dd346398c4d520f",
        "type": "function",
        "z": "2a761808.610238",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.statusCode = \"not ok\";\n    msg.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.statusCode = \"ok\";\n    msg.statusBody = msg.resp;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2640,
        "y": 760,
        "wires": [
            [
                "4e28f99472338707"
            ],
            [
                "df02a0b8de9ad90d"
            ]
        ]
    },
    {
        "id": "df02a0b8de9ad90d",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 2735,
        "y": 820,
        "wires": []
    },
    {
        "id": "65c2f9a089106bc8",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3770,
        "y": 1200,
        "wires": []
    },
    {
        "id": "0a6f08d9f5a7acac",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3190,
        "y": 1040,
        "wires": []
    },
    {
        "id": "a6d6d5460bacac5a",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3230,
        "y": 760,
        "wires": []
    },
    {
        "id": "80ab5788d3fea38c",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "FILLED",
        "info": "",
        "x": 2910,
        "y": 1260,
        "wires": []
    },
    {
        "id": "8a25ccb6829d8c84",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 2315,
        "y": 720,
        "wires": []
    },
    {
        "id": "53a7bd28e3a4888c",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 2295,
        "y": 1000,
        "wires": []
    },
    {
        "id": "2055a0b0f09d357a",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 1655,
        "y": 1080,
        "wires": []
    },
    {
        "id": "abf9683151fef767",
        "type": "function",
        "z": "2a761808.610238",
        "name": "order0",
        "func": "msg.payload = \"order0  \" + msg.botname;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "8663975ddd164e2d",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1480,
        "wires": []
    },
    {
        "id": "21da88c81f6082a2",
        "type": "function",
        "z": "2a761808.610238",
        "name": "msg.bot.ttp.curorderid = 0;",
        "func": "\nmsg.bot.ttp.curorderid = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 1540,
        "wires": [
            [
                "46607ceede3526b3"
            ]
        ]
    },
    {
        "id": "c6432f180187879b",
        "type": "link in",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "27a31f448914945b"
        ],
        "x": 135,
        "y": 540,
        "wires": [
            [
                "5e059a0f6250624e"
            ]
        ]
    },
    {
        "id": "af5a40b52d7fe852",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "eaeb53af2f0c10d4"
        ],
        "x": 1995,
        "y": 540,
        "wires": []
    },
    {
        "id": "87e2b8e40f329a18",
        "type": "function",
        "z": "2a761808.610238",
        "name": "busy = true",
        "func": "\nglobal.set(msg.botname+\"-ttpbusy\", true);\nnode.status({ fill: \"green\", shape: \"dot\"});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 920,
        "wires": [
            [
                "369273d704a8a6bb"
            ]
        ]
    },
    {
        "id": "5e059a0f6250624e",
        "type": "function",
        "z": "2a761808.610238",
        "name": "busy === false ",
        "func": "if (msg.bot.ttpbusy === false) {\n    msg.rate = 250;\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    return [msg, null, null];\n}\n\nelse {\n\n    let id = msg.botname + \"-ttpbusy\";\n    msg.payload = [];\n\n    var count = flow.get(id) || 0;\n    count += 1;\n\n\n    node.status({ fill: \"blue\", shape: \"dot\" });\n\n\n    if (count > 32) {\n\n\n        let lasttrack = global.get(msg.botname + \"-data\");\n\n        lasttrack = JSON.stringify(lasttrack || \"\", null, '\\t');\n\n\n\n        //запись в журнал\n        let botname = \"syslog.txt\";\n        let data = \"Сброс \" + msg.botname + \" \\n \" + lasttrack;\n        const syslog = global.get('tilog')(botname, data);\n        syslog;\n\n        let botname2 = msg.botname;\n        let data2 = \"Сброс busy \\n \" + lasttrack;\n        const tilog = global.get('tilog')(botname2, data2);\n        tilog;\n        //запись в журнал\n\n        node.status({ fill: \"red\", shape: \"dot\" });\n        flow.set(msg.trackname);\n        flow.set(id, 0);\n\n        msg.bot.busy = false;\n        \n        return [null, null, msg];\n\n    }\n    flow.set(msg.trackname);\n    flow.set(id, count);\n    msg.topic = \"busy\";\n    return [null, msg, null];\n}\n\n\n\n\n\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 540,
        "wires": [
            [
                "87e2b8e40f329a18"
            ],
            [],
            [
                "87e2b8e40f329a18"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "7e41df572204717b",
        "type": "function",
        "z": "2a761808.610238",
        "name": "busy = false",
        "func": "\nglobal.set(msg.botname+\"-ttpbusy\", false);\nflow.set(msg.botname + \"-ttpbusy\", 0);\nnode.status({ fill: \"green\", shape: \"dot\"});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 540,
        "wires": [
            [
                "af5a40b52d7fe852",
                "2205f10eb930d4ad"
            ]
        ]
    },
    {
        "id": "349451d616a02802",
        "type": "function",
        "z": "2a761808.610238",
        "name": "setbot global",
        "func": "global.set(msg.botname + \"-ttp\", msg.bot.ttp);\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 540,
        "wires": [
            [
                "7e41df572204717b"
            ]
        ]
    },
    {
        "id": "368127c8f5307fe2",
        "type": "comment",
        "z": "2a761808.610238",
        "name": "Финиш трека",
        "info": "",
        "x": 1950,
        "y": 140,
        "wires": []
    },
    {
        "id": "41c17c0172b960ab",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "",
        "property": "trackname",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2010,
        "y": 300,
        "wires": [
            [
                "4883ea8cab26bf40"
            ]
        ]
    },
    {
        "id": "4883ea8cab26bf40",
        "type": "debug",
        "z": "2a761808.610238",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2160,
        "y": 300,
        "wires": []
    },
    {
        "id": "5439d7c0b172fac9",
        "type": "function",
        "z": "2a761808.610238",
        "g": "2044fa36820f41ee",
        "name": "finish track",
        "func": "//<трекер<\nlet trackname = msg.trackname;\nlet track = flow.get(trackname);\nif (track) {\n\n    let start_node_time = new Date().getTime();\n    let steptitle = node.name;\n\n    let laststep = track[track.length - 1];\n    let last_node_end_time = laststep.end_node_time;\n\n    let firststep = track[0];\n    let first_node_start_time = firststep.start_node_time;\n\n    let duration_track = last_node_end_time - first_node_start_time;\n    //>трекер>\n\n    //msg.bot.busy = false;\n    //>трекер>\n    let end_node_time = new Date().getTime();\n    let duration = end_node_time - start_node_time;\n    let duration_step = end_node_time - last_node_end_time;\n    track.push({\n        \"steptitle\": steptitle,\n        \"start_node_time\": start_node_time,\n        \"end_node_time\": end_node_time,\n        \"duration_node\": duration,\n        \"duration_step\": duration_track //только для финишной ноды\n    });\n    flow.set(trackname, track);\n\n    //flow.set(msg.botname, 0);\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    return msg;\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 180,
        "wires": [
            [
                "ee5baed57022e2b9"
            ]
        ],
        "icon": "font-awesome/fa-bolt"
    },
    {
        "id": "6bf31a93727ebe85",
        "type": "link out",
        "z": "2a761808.610238",
        "g": "2044fa36820f41ee",
        "name": "",
        "links": [
            "1719022f8617153c"
        ],
        "x": 2335,
        "y": 200,
        "wires": []
    },
    {
        "id": "ee5baed57022e2b9",
        "type": "function",
        "z": "2a761808.610238",
        "g": "2044fa36820f41ee",
        "name": "duration",
        "func": "let trackname = msg.trackname;\nlet track = flow.get(trackname);\nif (track) {\n\n    let laststep = track[track.length - 1];\n    let firststep = track[0];\n    let last_node_end_time = laststep.end_node_time;\n    let first_node_start_time = firststep.start_node_time;\n\n    let duration = last_node_end_time - first_node_start_time;\n    //node.warn(duration);\n    msg.payload = duration;\n\n    flow.set(trackname);\n\n    node.status({ fill: \"green\", shape: \"dot\" });\n\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2200,
        "y": 180,
        "wires": [
            [
                "6bf31a93727ebe85",
                "3520419ec219563a"
            ]
        ]
    },
    {
        "id": "eaeb53af2f0c10d4",
        "type": "link in",
        "z": "2a761808.610238",
        "g": "2044fa36820f41ee",
        "name": "",
        "links": [
            "be8533086c9decb4",
            "af5a40b52d7fe852"
        ],
        "x": 1895,
        "y": 180,
        "wires": [
            [
                "5439d7c0b172fac9",
                "806f4e430374bace",
                "41c17c0172b960ab"
            ]
        ]
    },
    {
        "id": "806f4e430374bace",
        "type": "debug",
        "z": "2a761808.610238",
        "g": "2044fa36820f41ee",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2210,
        "y": 240,
        "wires": []
    },
    {
        "id": "deb38cfe50913a6c",
        "type": "comment",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "name": "Старт трека",
        "info": "",
        "x": 170,
        "y": 120,
        "wires": []
    },
    {
        "id": "e2e400f68ab5c544",
        "type": "trigger",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 520,
        "y": 180,
        "wires": [
            [
                "b6388dc088be5a20"
            ]
        ]
    },
    {
        "id": "535ef5733e21adba",
        "type": "delay",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 180,
        "wires": [
            [
                "e2e400f68ab5c544"
            ]
        ]
    },
    {
        "id": "83c16a0c1d53cfa5",
        "type": "function",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "name": "stop",
        "func": "let botname = \"syslog.txt\";\nlet data = \"Стоп\";\nconst syslog = global.get('tilog')(botname,data);\nsyslog;\n        \n\n        \nmsg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 240,
        "wires": [
            [
                "e2e400f68ab5c544"
            ]
        ]
    },
    {
        "id": "f45609671f7e9784",
        "type": "redis-in",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 150,
        "y": 240,
        "wires": [
            [
                "83c16a0c1d53cfa5"
            ]
        ]
    },
    {
        "id": "320b0c3883a1e8fd",
        "type": "redis-in",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "d90a37138c4b882a",
                "535ef5733e21adba"
            ]
        ]
    },
    {
        "id": "e734327368dcf9d0",
        "type": "redis-in",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "start1",
        "obj": true,
        "timeout": 0,
        "x": 570,
        "y": 120,
        "wires": [
            [
                "b6388dc088be5a20"
            ]
        ]
    },
    {
        "id": "1ac8f5624eae6a21",
        "type": "filter",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "name": "filter off",
        "property": "bot.onoff",
        "propertyType": "msg",
        "asArray": false,
        "itemProperty": "",
        "itemPropertyType": "item",
        "rules": [
            {
                "t": "true",
                "output": 1
            }
        ],
        "checkall": "true",
        "outputs": 1,
        "x": 1200,
        "y": 180,
        "wires": [
            [
                "9dd325838189682e"
            ]
        ]
    },
    {
        "id": "d90a37138c4b882a",
        "type": "function",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "name": "syslog",
        "func": "let botname = \"syslog.txt\";\nlet data = \" \\n \\n Старт\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "53ab7852d77b30f0",
        "type": "function",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "name": "syslog",
        "func": "let botname = \"syslog.txt\";\nlet data = \"Стоп\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "da2c372e624784bb",
        "type": "debug",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 100,
        "wires": []
    },
    {
        "id": "b6388dc088be5a20",
        "type": "function",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "name": "getbotlist",
        "func": "msg.payload = global.get(\"botlist\");\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 180,
        "wires": [
            [
                "79d602de7809868d"
            ]
        ]
    },
    {
        "id": "79d602de7809868d",
        "type": "split",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "name": "",
        "splt": "1",
        "spltType": "len",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 180,
        "wires": [
            [
                "91d64739279d42f5"
            ]
        ]
    },
    {
        "id": "91d64739279d42f5",
        "type": "function",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "name": "getbot global",
        "func": "\nmsg.botname = msg.payload;\nmsg.bot = {};\nmsg.bot.busy = global.get(msg.botname + \"-busy\");\nmsg.bot.data = global.get(msg.botname + \"-data\");\nmsg.bot.onoff = global.get(msg.botname + \"-onoff\");\nmsg.bot.settings = global.get(msg.botname + \"-settings\");\nmsg.bot.status = global.get(msg.botname + \"-status\");\nmsg.bot.ttp = global.get(msg.botname + \"-ttp\");\nmsg.bot.ttpbusy = global.get(msg.botname + \"-ttpbusy\");\n\nmsg.bot.floors = msg.bot.data.floors;\nmsg.bot.finance = msg.bot.data.finance;\nmsg.bot.sales = msg.bot.data.sales;\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 180,
        "wires": [
            [
                "1ac8f5624eae6a21"
            ]
        ]
    },
    {
        "id": "c4b2d72375018faa",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 750,
        "y": 100,
        "wires": [
            [
                "b6388dc088be5a20"
            ]
        ]
    },
    {
        "id": "9dd325838189682e",
        "type": "function",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "name": "botname: msg.botname",
        "func": "msg.topic = msg.botname;\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 180,
        "wires": [
            [
                "da2c372e624784bb",
                "3aa78e92fd51af7b"
            ]
        ]
    },
    {
        "id": "27a31f448914945b",
        "type": "link out",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "name": "",
        "links": [
            "014337f1bd6ded08",
            "c6432f180187879b",
            "6da88e54160574f4"
        ],
        "x": 1715,
        "y": 180,
        "wires": []
    },
    {
        "id": "3aa78e92fd51af7b",
        "type": "function",
        "z": "2a761808.610238",
        "g": "55e30606c2e4a038",
        "name": "start",
        "func": "\n//<трекер<\n////>только для стартовой ноды>\nlet track = [];\nlet start_track_time = new Date().getTime();\nlet start_node_time = start_track_time;\nlet steptitle = node.name;\n\nlet end_node_time = new Date().getTime();\nlet duration = end_node_time - start_node_time;\ntrack.push({\n    \"steptitle\": steptitle,\n    \"start_node_time\": start_node_time,\n    \"end_node_time\": end_node_time,\n    \"duration_node\": duration,\n    \"duration_step\": 0\n});\n\nlet trackname = \"ttp-track-\" + msg.botname + msg._msgid;\nflow.set(trackname, track);\nmsg.trackname = trackname;\n//>трекер>\n\nnode.status({ fill: \"green\", shape: \"dot\", text: duration });\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 180,
        "wires": [
            [
                "27a31f448914945b"
            ]
        ]
    },
    {
        "id": "7b937af3a1325b74",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "73c30bbe5f45e91f",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1230,
        "y": 360,
        "wires": [
            [
                "fb4ce2a47470c9f5"
            ]
        ]
    },
    {
        "id": "fb4ce2a47470c9f5",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "73c30bbe5f45e91f",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 1230,
        "y": 400,
        "wires": []
    },
    {
        "id": "6a9ccb5eb1509a61",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "73c30bbe5f45e91f",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "9",
        "topic": "",
        "payloadType": "date",
        "x": 810,
        "y": 360,
        "wires": [
            [
                "fcbdfc36756b7f7c"
            ]
        ]
    },
    {
        "id": "fcbdfc36756b7f7c",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "73c30bbe5f45e91f",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 810,
        "y": 400,
        "wires": []
    },
    {
        "id": "f1e97b24b6e7bc2d",
        "type": "inject",
        "z": "2a761808.610238",
        "g": "73c30bbe5f45e91f",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 990,
        "y": 360,
        "wires": [
            [
                "b18736f457585989"
            ]
        ]
    },
    {
        "id": "b18736f457585989",
        "type": "redis-out",
        "z": "2a761808.610238",
        "g": "73c30bbe5f45e91f",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 990,
        "y": 400,
        "wires": []
    },
    {
        "id": "ca72074c8d540aae",
        "type": "redis-instance",
        "z": "2a761808.610238",
        "g": "73c30bbe5f45e91f",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 1430,
        "y": 380,
        "wires": []
    },
    {
        "id": "ba0d11a51ae4f860",
        "type": "link in",
        "z": "2a761808.610238",
        "name": "fibish ttp in",
        "links": [
            "06ee55c7f64e90e8",
            "1115296679a9cef0",
            "125460d2daa6c560",
            "1c88751ca624541e",
            "1d26132c.06016d",
            "2055a0b0f09d357a",
            "2457696296d8e638",
            "25e5da747f055ffb",
            "2c0ca6c8b35ddbad",
            "2cab2371e70473ee",
            "3257b8646462c83f",
            "396f3856733c5e5a",
            "3ab3f5ece6ebd7ba",
            "400703b3d0a09d2f",
            "41ed2184ea044881",
            "431d4a9d89f23bfd",
            "43656eb1fac8a3d6",
            "4715a6d7245e2835",
            "489ced1e0bff9a66",
            "4b4fa1ce.2d444",
            "53a7bd28e3a4888c",
            "550777029e1aaff1",
            "5e1ddf6dffe66d4e",
            "639392368e9dd325",
            "63cb05daef63aa4e",
            "69fa5228fd8ebd53",
            "6aa6b9efab30f353",
            "717f89b519c99b53",
            "7791762b8f3177d7",
            "8a25ccb6829d8c84",
            "8c12181324662e5c",
            "9011d963f8a5cefa",
            "952e6be0316b3cd3",
            "a30f7a41973f098b",
            "a4a508658e9f742d",
            "b7d10635e5230bc7",
            "be918fe0c6266db7",
            "cbede69abd64c9b3",
            "d97b347c8d93ee47",
            "d9b0eb22e5a3033c",
            "df02a0b8de9ad90d",
            "e0cd7d8281ad2e8d",
            "e356e4d991bd7fbc",
            "ebc54e94aedd6d5a",
            "eff1206988b0fd71",
            "f3d254f3a9ced1b1",
            "f3fda139104116cf",
            "f48f2978a8c94b10",
            "f6c1050a0ede61d5",
            "feeed921662c3ca8",
            "7349d9389a589eda",
            "ad0fb632abff683c",
            "08534863e7dbe58f",
            "2790f394c4a7bfa8",
            "79924451f338af84",
            "1c372c89f6e075ba",
            "b2c764649a3c8c12",
            "94857b749ffa68ee",
            "8a70cb85c15751f2"
        ],
        "x": 1555,
        "y": 540,
        "wires": [
            [
                "349451d616a02802"
            ]
        ]
    },
    {
        "id": "3520419ec219563a",
        "type": "ui_chart",
        "z": "2a761808.610238",
        "g": "2044fa36820f41ee",
        "name": "",
        "group": "f244fee6.d2627",
        "order": 0,
        "width": "4",
        "height": "7",
        "label": "ttp track",
        "chartType": "line",
        "legend": "false",
        "xformat": "ss",
        "interpolate": "cubic",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "10",
        "removeOlderPoints": "100",
        "removeOlderUnit": "1",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9a244f",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 2380,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "8910df8c8a01ef46",
        "type": "function",
        "z": "2a761808.610238",
        "name": "orderexec setsell",
        "func": "let cmd = \"setsell\";\nlet moneta = msg.bot.settings.moneta;\nlet quantity = (Number(msg.bot.ttp.quantity)).toFixed(msg.bot.settings.digitq);\n\nlet priceb = (Number((msg.bot.ttp.raschstopprice - msg.bot.ttp.raschstopprice / 100 * msg.bot.settings.ofsetbottom))).toFixed(msg.bot.settings.digitprice);\nlet stopprice = (Number(msg.bot.ttp.raschstopprice)).toFixed(msg.bot.settings.digitprice);\n\n\nlet data = { \"moneta\": moneta, \"quantity\": quantity, \"priceb\": priceb, \"stopprice\": stopprice,  };\nconst orderexec = global.get('order_exec')(cmd, data);\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n \n        msg.bot.ttp.curorderid = msg.orderexec.statusBody.orderId;\n        msg.bot.ttp.curstop = msg.bot.ttp.raschstopprice\n        //msg.bot.ttp.quantity = msg.orderexec.statusBody.origQty;\n        node.warn(\"bot: \"+ msg.botname + \"sp:\" + stopprice + \" p:\" + priceb + \" q:\" + quantity);\n\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n        node.send(msg);\n    }\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 880,
        "wires": [
            [
                "07b16a16aa5bb3a9"
            ]
        ]
    },
    {
        "id": "07b16a16aa5bb3a9",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1990,
        "y": 880,
        "wires": [
            [
                "7349d9389a589eda"
            ],
            [
                "6d4136b6b5f95b74"
            ]
        ]
    },
    {
        "id": "6d4136b6b5f95b74",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 900,
        "wires": [
            [
                "7349d9389a589eda"
            ]
        ]
    },
    {
        "id": "7349d9389a589eda",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 2275,
        "y": 860,
        "wires": []
    },
    {
        "id": "359826635d024ff3",
        "type": "function",
        "z": "2a761808.610238",
        "name": "orderexec cansel",
        "func": "let cmd = \"cansel\";\n\nlet orderid = msg.bot.ttp.curorderid;\nlet moneta = msg.bot.settings.moneta;\n\nlet data = {\"moneta\":moneta, \"orderid\": orderid};\nconst orderexec = global.get('order_exec')(cmd,data);\n\nlet botname = msg.topic;\n\n//let data2 = botname+\":\"+cmd+\": orderid:\"+orderid;\n//const tilog = global.get('tilog')(botname,data2);\n//tilog;\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\"){\n        node.status({fill:\"green\",shape:\"dot\", text: orderexec.statusBody.orderId});\n        //msg.bot.ttp.curorderid = 0;\n        //msg.bot.ttp.curstop = 0;\n        let tempfin = Number(Number(msg.bot.finance.baseinorders) - Number(msg.bot.ttp.quantity) * Number(msg.bot.ttp.curstop));\n        let tempfin2 = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.ttp.quantity) * Number(msg.bot.ttp.curstop));\n\n        msg.bot.finance.baseinorders = tempfin.toFixed(msg.bot.settings.digitprice);\n        msg.bot.finance.basenal = tempfin2.toFixed(msg.bot.settings.digitprice);\n\n        node.send(msg);\n        \n    } else {\n        node.status({fill:\"red\",shape:\"dot\"});\n        \n        node.send(msg);\n    }\n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 640,
        "wires": [
            [
                "a6c5cfab1d7f1824"
            ]
        ]
    },
    {
        "id": "a6c5cfab1d7f1824",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2530,
        "y": 640,
        "wires": [
            [
                "36d2e441fe71ddef"
            ],
            [
                "ad0fb632abff683c"
            ]
        ]
    },
    {
        "id": "36d2e441fe71ddef",
        "type": "function",
        "z": "2a761808.610238",
        "name": "orderexec setsell",
        "func": "let cmd = \"setsell\";\nlet moneta = msg.bot.settings.moneta;\nlet quantity = (Number(msg.bot.ttp.quantity)).toFixed(msg.bot.settings.digitq);\n\nlet priceb = (Number((msg.bot.ttp.raschstopprice - msg.bot.ttp.raschstopprice / 100 * msg.bot.settings.ofsetbottom))).toFixed(msg.bot.settings.digitprice);\nlet stopprice = (Number(msg.bot.ttp.raschstopprice)).toFixed(msg.bot.settings.digitprice);\n\n\nlet data = { \"moneta\": moneta, \"quantity\": quantity, \"priceb\": priceb, \"stopprice\": stopprice,  };\nconst orderexec = global.get('order_exec')(cmd, data);\n\norderexec.then(orderexec => {\n    msg.orderexec = orderexec;\n    if (orderexec.statusCode === \"ok\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: orderexec.statusBody.orderId });\n \n        msg.bot.ttp.curorderid = msg.orderexec.statusBody.orderId;\n        msg.bot.ttp.curstop = msg.bot.ttp.raschstopprice\n        //msg.bot.ttp.quantity = msg.orderexec.statusBody.origQty;\n        node.warn(\"bot: \"+ msg.botname + \"sp:\" + stopprice + \" p:\" + priceb + \" q:\" + quantity);\n\n        node.send(msg);\n\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\" });\n\n        node.send(msg);\n    }\n\n}).catch(error => {\n\n    msg.error = error;\n    node.status({ fill: \"red\", shape: \"ring\" });\n\n    node.error(error);\n});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2730,
        "y": 600,
        "wires": [
            [
                "5e25e412fd59d70a"
            ]
        ]
    },
    {
        "id": "5e25e412fd59d70a",
        "type": "switch",
        "z": "2a761808.610238",
        "name": "statusCode",
        "property": "orderexec.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "not ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2930,
        "y": 600,
        "wires": [
            [
                "08534863e7dbe58f"
            ],
            [
                "8f3ee867a169b3ce"
            ]
        ]
    },
    {
        "id": "8f3ee867a169b3ce",
        "type": "function",
        "z": "2a761808.610238",
        "name": "tilog",
        "func": "let botname = msg.bot.settings.botname;\nlet data = \"Ошибка при выставлении ордера - \"+msg.orderexec.statusBody;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2950,
        "y": 640,
        "wires": [
            [
                "08534863e7dbe58f"
            ]
        ]
    },
    {
        "id": "ad0fb632abff683c",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 2655,
        "y": 660,
        "wires": []
    },
    {
        "id": "08534863e7dbe58f",
        "type": "link out",
        "z": "2a761808.610238",
        "name": "",
        "links": [
            "ccd55cdb.7ed72",
            "ba0d11a51ae4f860"
        ],
        "x": 3095,
        "y": 600,
        "wires": []
    },
    {
        "id": "2d56ea2c54a7b479",
        "type": "function",
        "z": "2a761808.610238",
        "name": "msg = {}",
        "func": "\nmsg = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2800,
        "y": 100,
        "wires": [
            [
                "32784edae095e6a0",
                "cc629ad3a7b38b90"
            ]
        ]
    },
    {
        "id": "32784edae095e6a0",
        "type": "redis-out",
        "z": "2a761808.610238",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": true,
        "x": 2950,
        "y": 100,
        "wires": []
    },
    {
        "id": "cc629ad3a7b38b90",
        "type": "delay",
        "z": "2a761808.610238",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2960,
        "y": 160,
        "wires": [
            [
                "e7c214437f43cfe7"
            ]
        ]
    },
    {
        "id": "e7c214437f43cfe7",
        "type": "exec",
        "z": "2a761808.610238",
        "command": "reboot",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 3110,
        "y": 160,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "91319a1e89f66e6c",
        "type": "function",
        "z": "2a761808.610238",
        "name": "проскальзывание",
        "func": "let tgmsg = \"Проскальзывание - \" + msg.botname;;\n\nlet guid = global.get('guid');\nmsg = {};\nmsg.payload = {tgmsg, guid};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1360,
        "wires": [
            [
                "e69cc8920dbe3d97"
            ]
        ]
    },
    {
        "id": "e69cc8920dbe3d97",
        "type": "redis-out",
        "z": "2a761808.610238",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 1450,
        "y": 1360,
        "wires": []
    },
    {
        "id": "c754c72a8c1c863c",
        "type": "inject",
        "z": "2a761808.610238",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1430,
        "y": 660,
        "wires": [
            [
                "2205f10eb930d4ad"
            ]
        ]
    },
    {
        "id": "8c73867402bdc467",
        "type": "memqueue in",
        "z": "2a761808.610238",
        "name": "qu-ttp",
        "queue": "b0cef4ea50b252b0",
        "x": 670,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "834e32df51c5caa7",
        "type": "memqueue out",
        "z": "2a761808.610238",
        "name": "qu-ttp",
        "queue": "b0cef4ea50b252b0",
        "x": 170,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "2205f10eb930d4ad",
        "type": "memqueue ack",
        "z": "2a761808.610238",
        "name": "qu-ttp ask",
        "queue": "b0cef4ea50b252b0",
        "x": 1590,
        "y": 640,
        "wires": []
    },
    {
        "id": "387fcf8a.76cff",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "order_exec()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet order_exec = function (cmd = msg.topic, data = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = msg.botname;\n    msg.cmd = cmd;\n    msg.payload = data;\n    msg.botname = data.botname;\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('order_exec', order_exec);",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1200,
        "wires": [
            [
                "e99da6578187f6b1"
            ]
        ]
    },
    {
        "id": "c985b525.212f78",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "cmd, data",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 150,
        "y": 900,
        "wires": [
            [
                "387fcf8a.76cff"
            ]
        ]
    },
    {
        "id": "2bed7653.30adaa",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 900,
        "wires": []
    },
    {
        "id": "ade3bf55.b02e3",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "cmd",
        "property": "cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setbuy",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cansel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "setsell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "marketsell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "marketbuy",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1080,
        "y": 1020,
        "wires": [
            [
                "2cfa357e.60327a"
            ],
            [
                "241d62c4.835d6e"
            ],
            [
                "56c6a73caae35c2f"
            ],
            [
                "cc5b16dd.4820c8"
            ],
            [
                "46152e90.390ef8"
            ]
        ]
    },
    {
        "id": "9606b8d3.0957",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "setbuy",
        "info": "",
        "x": 1330,
        "y": 880,
        "wires": []
    },
    {
        "id": "2cfa357e.60327a",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "set buy order on binance",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\n//let key = global.get('key');\n//let secret = global.get('secret');\nlet key = env.get(\"BINANCEKEY\");\nlet secret = env.get(\"BINANCESECRET\");\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\tuseServerTime: true,\n\tadjustForTimeDifference: true \n});\n\n\n\n\nlet moneta = msg.payload.moneta;\nlet quantity = Number(msg.payload.quantity);\nlet price = Number(msg.payload.price);\n//node.warn(moneta+\" set buy order q = \"+quantity+\" p = \"+price);\n\n\n\n\nbinance.useServerTime(function() {\n    binance.buy(moneta, quantity, price, {type:'LIMIT'}, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n\n        msg.err = err;\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        \n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\t\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "gBinance",
                "module": "node-binance-api"
            }
        ],
        "x": 1510,
        "y": 880,
        "wires": [
            [
                "be53914b.bf62b"
            ]
        ]
    },
    {
        "id": "cc5b16dd.4820c8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "set market sell",
        "func": "\nfunction parseApiError(error) {\n    if (error.body) {\n        try {\n            var resp = JSON.parse(error.body);\n            return resp.msg;\n        } catch (error) {/* pass thru */ }\n    }\n    return \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//let key = global.get('key');\n//let secret = global.get('secret');\nlet key = env.get(\"BINANCEKEY\");\nlet secret = env.get(\"BINANCESECRET\");\n\nlet binance = new LBinance().options({\n    APIKEY: key,\n    APISECRET: secret,\n    reconnect: false,\n    useServerTime: true\n});\n\nlet moneta = msg.payload.moneta;\nlet quantity = Number(msg.payload.quantity);\n\nnode.warn(\"market sell sp:\" + \" q:\" + quantity);\n\nbinance.useServerTime(function () {\n    binance.marketSell(moneta, quantity, function (err, resp) {\n        if (err) {\n            var errorMsg = parseApiError(err);\n            msg.err = err;\n            node.error(errorMsg, msg);\n            node.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n            node.send(msg);\n\n\n        }\n        if (resp) {\n\n            msg.resp = resp;\n            node.status({ fill: \"green\", shape: \"ring\" });\n            node.send(msg);\n        }\n\n    })\n\n});\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1120,
        "wires": [
            [
                "c8becf6bb0419135"
            ]
        ]
    },
    {
        "id": "46152e90.390ef8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1480,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "df242fa3.762dc",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "cansel",
        "info": "",
        "x": 1330,
        "y": 960,
        "wires": []
    },
    {
        "id": "f8fb32fa.8c38e",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "setsell",
        "info": "",
        "x": 1330,
        "y": 1040,
        "wires": []
    },
    {
        "id": "7fc0c8c6.6d262",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "marketsell",
        "info": "",
        "x": 1340,
        "y": 1120,
        "wires": []
    },
    {
        "id": "594b48ef.1a0e68",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "marketbuy",
        "info": "",
        "x": 1340,
        "y": 1200,
        "wires": []
    },
    {
        "id": "8eca3137.03e0a8",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "work mode",
        "property": "workmode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "binance_backtest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 1200,
        "wires": [
            [
                "ade3bf55.b02e3"
            ],
            [
                "72c134ed.8f07cc"
            ]
        ]
    },
    {
        "id": "8af21b87.015cb",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "binance",
        "info": "",
        "x": 920,
        "y": 1160,
        "wires": []
    },
    {
        "id": "90c4f7da.42c3b8",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "binance_backtest",
        "info": "",
        "x": 950,
        "y": 1240,
        "wires": []
    },
    {
        "id": "ac3992bd.d4dd5",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "get workmode",
        "func": "let workmode = global.get('workmode');\nmsg.workmode = workmode;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1200,
        "wires": [
            [
                "8eca3137.03e0a8"
            ]
        ]
    },
    {
        "id": "1adeb6d2.0028b1",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "79e296b2.11a2d8",
        "name": "register work mode",
        "func": "let key = msg.payload;\n\nglobal.set('workmode',key);\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2890,
        "y": 80,
        "wires": [
            [
                "9a835f6c.6a1ab"
            ]
        ]
    },
    {
        "id": "174c55c9.364c72",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "79e296b2.11a2d8",
        "name": "workmode",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "binance",
        "payloadType": "str",
        "x": 2670,
        "y": 60,
        "wires": [
            [
                "1adeb6d2.0028b1"
            ]
        ]
    },
    {
        "id": "af87984e.38efa8",
        "type": "ui_button",
        "z": "5f98db3a.7ab21c",
        "g": "79e296b2.11a2d8",
        "name": "",
        "group": "261e447.e94ad3c",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "binance",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "binance",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 2640,
        "y": 100,
        "wires": [
            [
                "1adeb6d2.0028b1"
            ]
        ]
    },
    {
        "id": "af6bd09e.c7c798",
        "type": "ui_button",
        "z": "5f98db3a.7ab21c",
        "g": "79e296b2.11a2d8",
        "name": "",
        "group": "261e447.e94ad3c",
        "order": 1,
        "width": "4",
        "height": "1",
        "passthru": false,
        "label": "binance_backtest",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "binance_backtest",
        "payloadType": "str",
        "topic": "",
        "x": 2670,
        "y": 140,
        "wires": [
            [
                "1adeb6d2.0028b1"
            ]
        ]
    },
    {
        "id": "9a835f6c.6a1ab",
        "type": "ui_text",
        "z": "5f98db3a.7ab21c",
        "g": "79e296b2.11a2d8",
        "group": "261e447.e94ad3c",
        "order": 2,
        "width": "4",
        "height": "1",
        "name": "",
        "label": "mode now",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 3090,
        "y": 80,
        "wires": []
    },
    {
        "id": "72c134ed.8f07cc",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "cmd",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setbuy",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cansel",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "setsell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "marketsell",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "marketbuy",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 1080,
        "y": 1400,
        "wires": [
            [
                "d9e1bbad.d8dc4"
            ],
            [
                "7d460277.6d43cc"
            ],
            [
                "83dab1d2.d3929"
            ],
            [
                "c2ee13d8.13fab8"
            ],
            [
                "4fd27ca5.37d60c"
            ]
        ]
    },
    {
        "id": "937d8df0.8d461",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "setbuy",
        "info": "",
        "x": 1330,
        "y": 1320,
        "wires": []
    },
    {
        "id": "d9e1bbad.d8dc4",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1480,
        "y": 1320,
        "wires": [
            [
                "f6791e2.e72656"
            ]
        ]
    },
    {
        "id": "7d460277.6d43cc",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1480,
        "y": 1380,
        "wires": [
            [
                "4b18cb02.0baa0c"
            ]
        ]
    },
    {
        "id": "83dab1d2.d3929",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1480,
        "y": 1440,
        "wires": [
            [
                "2827f6dd.5c7162"
            ]
        ]
    },
    {
        "id": "c2ee13d8.13fab8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1480,
        "y": 1500,
        "wires": [
            [
                "5f7186a8.0ea498"
            ]
        ]
    },
    {
        "id": "4fd27ca5.37d60c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1480,
        "y": 1560,
        "wires": [
            [
                "e5d314a7.f6825"
            ]
        ]
    },
    {
        "id": "8044def5.ed945",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "cansel",
        "info": "",
        "x": 1330,
        "y": 1380,
        "wires": []
    },
    {
        "id": "f52a6bcf.7d3728",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "setsell",
        "info": "",
        "x": 1330,
        "y": 1440,
        "wires": []
    },
    {
        "id": "fa849ff6.802878",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "marketsell",
        "info": "",
        "x": 1340,
        "y": 1500,
        "wires": []
    },
    {
        "id": "f38ba797.bdd398",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "marketbuy",
        "info": "",
        "x": 1340,
        "y": 1560,
        "wires": []
    },
    {
        "id": "f6791e2.e72656",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1320,
        "wires": []
    },
    {
        "id": "4b18cb02.0baa0c",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1380,
        "wires": []
    },
    {
        "id": "2827f6dd.5c7162",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1440,
        "wires": []
    },
    {
        "id": "5f7186a8.0ea498",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1500,
        "wires": []
    },
    {
        "id": "e5d314a7.f6825",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1560,
        "wires": []
    },
    {
        "id": "be53914b.bf62b",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.payload.statusCode = \"not ok\";\n    msg.payload.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.payload.statusCode = \"ok\";\n    msg.payload.statusBody = msg.resp;\n    //msg.payload.bot = msg.bot;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 880,
        "wires": [
            [
                "563d14b6.3a5db4",
                "c4cfc0830f4e28bc"
            ],
            [
                "c0b46394.7bd6e",
                "c4cfc0830f4e28bc"
            ]
        ]
    },
    {
        "id": "5a624a9b.734534",
        "type": "link in",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "links": [
            "563d14b6.3a5db4",
            "c0b46394.7bd6e",
            "2253204.d02816",
            "874d8336.9507e",
            "11245d07d29c58d7",
            "f873485fa819703f",
            "0ba1f4d05ad6d76a",
            "6250c3310b6d177b"
        ],
        "x": 435,
        "y": 900,
        "wires": [
            [
                "2bed7653.30adaa"
            ]
        ]
    },
    {
        "id": "563d14b6.3a5db4",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 1935,
        "y": 860,
        "wires": []
    },
    {
        "id": "c0b46394.7bd6e",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 1935,
        "y": 900,
        "wires": []
    },
    {
        "id": "eb0ebfc5.9889a",
        "type": "file",
        "z": "5f98db3a.7ab21c",
        "g": "d508da9d29e25c1b",
        "name": "",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 830,
        "y": 680,
        "wires": [
            [
                "afaf3a2c.646c88"
            ]
        ]
    },
    {
        "id": "6868e3af.6c4b4c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "d508da9d29e25c1b",
        "name": "data prepare",
        "func": "var date = new Date();\nvar time = new Date().getTime();\n\nmsg.payload = date.toString().split('GMT')[0] + \"-\" + time +\" : \"+msg.payload;\nmsg.filename = \"/data/journals/\"+msg.topic+\".txt\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 680,
        "wires": [
            [
                "eb0ebfc5.9889a"
            ]
        ]
    },
    {
        "id": "6526e141.43af9",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "d508da9d29e25c1b",
        "name": "tilog()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\n\n\nlet tilog = function (botname = msg.topic, data = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = botname;\n    msg.payload = data;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('tilog', tilog);",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 680,
        "wires": [
            [
                "6868e3af.6c4b4c"
            ]
        ]
    },
    {
        "id": "eab25c49.10d9c8",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "d508da9d29e25c1b",
        "name": "botname, log msg",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 170,
        "y": 680,
        "wires": [
            [
                "6526e141.43af9"
            ]
        ]
    },
    {
        "id": "afaf3a2c.646c88",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "d508da9d29e25c1b",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 980,
        "y": 680,
        "wires": []
    },
    {
        "id": "9018737c.12e188",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "d508da9d29e25c1b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1220,
        "y": 680,
        "wires": [
            [
                "81a608ac.0eeab8"
            ]
        ]
    },
    {
        "id": "81a608ac.0eeab8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "d508da9d29e25c1b",
        "name": "tilog",
        "func": "let botname = \"LINKDOWNUSDT-1626469485\";\nlet data = \"dfdf\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1390,
        "y": 680,
        "wires": [
            [
                "d615849.c726078"
            ]
        ]
    },
    {
        "id": "d615849.c726078",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "d508da9d29e25c1b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 680,
        "wires": []
    },
    {
        "id": "241d62c4.835d6e",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "cansel order",
        "func": "\n\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\n//let key = global.get('key');\n//let secret = global.get('secret');\nlet key = env.get(\"BINANCEKEY\");\nlet secret = env.get(\"BINANCESECRET\");\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\treconnect: false,\n\tuseServerTime: true\n});\n\nlet moneta = msg.payload.moneta;\nlet orderid = msg.payload.orderid;\n\n//msg.payload = \"qjson.status\";\n\nbinance.useServerTime(function() {\nbinance.cancel(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n        \n\n    msg.err = err;\n    node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n    node.send(msg);\n        \n    \n    }\n    if (resp) {\n        msg.orderid = resp.orderId;\n        msg.resp = resp;\n        \n\n    node.status({fill: \"green\", shape: \"ring\"});\n    node.send(msg);\n        \n    }\n    //node.status({}); //clear status message\n})});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 960,
        "wires": [
            [
                "6f817e7d.c291c"
            ]
        ]
    },
    {
        "id": "6f817e7d.c291c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.payload.statusCode = \"not ok\";\n    msg.payload.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.payload.statusCode = \"ok\";\n    msg.payload.statusBody = msg.resp;\n    //msg.payload.bot = msg.bot;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 960,
        "wires": [
            [
                "85f53fe7.0846f8",
                "2253204.d02816"
            ],
            [
                "9ebc7b79.d11ad8",
                "874d8336.9507e"
            ]
        ]
    },
    {
        "id": "85f53fe7.0846f8",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 940,
        "wires": []
    },
    {
        "id": "9ebc7b79.d11ad8",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 980,
        "wires": []
    },
    {
        "id": "2253204.d02816",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 1935,
        "y": 940,
        "wires": []
    },
    {
        "id": "874d8336.9507e",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 1935,
        "y": 980,
        "wires": []
    },
    {
        "id": "130f3240.00961e",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "get_order_status()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n\n\nlet get_order_status = function (moneta = msg.moneta, orderid = msg.orderid) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.moneta = moneta;\n    msg.orderid = orderid;\n    \n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('get_order_status', get_order_status);",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1820,
        "wires": [
            [
                "607a1476.9d2f3c"
            ]
        ]
    },
    {
        "id": "f4452587.561d48",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 250,
        "y": 1740,
        "wires": [
            [
                "130f3240.00961e"
            ]
        ]
    },
    {
        "id": "6b7c6b19.00a204",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1740,
        "wires": []
    },
    {
        "id": "b1193833.175118",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "work mode",
        "property": "workmode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "binance",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "binance_backtest",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 2000,
        "wires": [
            [
                "b5f725fd.240e98"
            ],
            [
                "d73dab1c.a64828"
            ]
        ]
    },
    {
        "id": "efe6ca9d.d20898",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "binance",
        "info": "",
        "x": 390,
        "y": 1940,
        "wires": []
    },
    {
        "id": "2ccabce5.3df754",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "binance_backtest",
        "info": "",
        "x": 420,
        "y": 2060,
        "wires": []
    },
    {
        "id": "307f6fe7.76709",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "get workmode",
        "func": "let workmode = global.get('workmode');\nmsg.workmode = workmode;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 280,
        "y": 1880,
        "wires": [
            [
                "b1193833.175118"
            ]
        ]
    },
    {
        "id": "f83aa4a.5b36658",
        "type": "link in",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "",
        "links": [
            "840a8727.00fd28",
            "9fcdc428.e98b78",
            "6126ca08.741e74",
            "5419e44a.d5383c",
            "f6fb5868.e9bd18",
            "301639c.27435c6",
            "d73dab1c.a64828",
            "bf190e9d.225ad",
            "605bd5f0e5e8ae22",
            "dffbe6ee7486f03e",
            "1d3673435835237c"
        ],
        "x": 715,
        "y": 1740,
        "wires": [
            [
                "6b7c6b19.00a204"
            ]
        ]
    },
    {
        "id": "b5f725fd.240e98",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "get orderstatus on binance",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */}\n  }\n  return \"Unknown error. Status code: \"+error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//node.warn(LBinance);\nlet key = global.get('key');\nlet secret = global.get('secret');\n\n\nlet binance = new LBinance().options({\n\tAPIKEY: key,\n\tAPISECRET: secret,\n\tuseServerTime: true,\n\tadjustForTimeDifference: true \n});\n\n\n\n\nlet moneta = msg.moneta;\nlet orderid = Number(msg.orderid);\n\nbinance.useServerTime(function() {\n    binance.orderStatus(moneta, orderid, (err, resp) => {\n // console.info(\"Limit Buy response\", response);\n // console.info(\"order id: \" + response.orderId);\n    if (err) {\n        var errorMsg = parseApiError(err) + \", moneta:\" + moneta;\n        node.error(errorMsg, msg);\n\n        msg.err = err;\n        node.status({fill: \"red\", shape: \"ring\", text: errorMsg});\n        \n        node.send(msg);\n        //return [msg, null];\n    \n    }\n    if (resp) {\n        msg.order_status = resp.status;\n\n        msg.resp = resp;\n        node.status({fill: \"green\", shape: \"ring\", text: resp.orderId});\n        \n        node.send(msg);\n       // return [null,msg];\n                \n    }\n    //node.status({}); //clear status message\n});\n\t\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1940,
        "wires": [
            [
                "ec0d7b62.22bf98"
            ]
        ]
    },
    {
        "id": "f6fb5868.e9bd18",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "",
        "links": [
            "f83aa4a.5b36658"
        ],
        "x": 995,
        "y": 1980,
        "wires": []
    },
    {
        "id": "ec0d7b62.22bf98",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.statusCode = \"not ok\";\n    msg.statusBody = msg.err.body;\n    \n    return [null,msg];\n\n} else {\n    msg.statusCode = \"ok\";\n    msg.payload = msg.order_status;\n    msg.statusBody = msg.resp;\n    \n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1940,
        "wires": [
            [
                "9a627e02.c4ed6",
                "bf190e9d.225ad"
            ],
            [
                "f6fb5868.e9bd18"
            ]
        ]
    },
    {
        "id": "607a1476.9d2f3c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "prepare get order status",
        "func": "\nlet guid = global.get('guid');\nlet moneta = msg.moneta;\nlet orderid = msg.orderid;\n\nmsg.payload = [];\nmsg.topic = \"orders-status-\" + guid + \":\" + moneta + \":\" + orderid;\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1820,
        "wires": [
            [
                "d8222377.a5f0c"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "d8222377.a5f0c",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get order status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 740,
        "y": 1820,
        "wires": [
            [
                "f9b6f483.e38838"
            ]
        ]
    },
    {
        "id": "f9b6f483.e38838",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "обработчик ошибок",
        "func": "if (!msg.payload) {\n    msg.statusCode = \"not ok\";\n    msg.statusBody = msg.payload;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.statusCode = \"ok\";\n    msg.statusBody = msg.payload;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1820,
        "wires": [
            [
                "301639c.27435c6"
            ],
            [
                "307f6fe7.76709"
            ]
        ]
    },
    {
        "id": "301639c.27435c6",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "",
        "links": [
            "f83aa4a.5b36658"
        ],
        "x": 1135,
        "y": 1800,
        "wires": []
    },
    {
        "id": "d73dab1c.a64828",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "",
        "links": [
            "f83aa4a.5b36658"
        ],
        "x": 535,
        "y": 2060,
        "wires": []
    },
    {
        "id": "8c2b136a.c18c",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "server": "f120eab2.0a60a8",
        "command": "SET",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1300,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "bb1ad3fd.e2d78",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "binance error",
        "info": "",
        "x": 1090,
        "y": 1980,
        "wires": []
    },
    {
        "id": "9a627e02.c4ed6",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "prepare get order status",
        "func": "\nlet guid = global.get('guid');\nlet moneta = msg.moneta;\nlet orderid = msg.orderid;\n\nlet topic = \"orders-status-\" + guid + \":\" + moneta + \":\" + orderid;\nmsg.payload = [topic, msg.order_status, \"EX\", 3];\nmsg.topic = \"\";\n\nnode.status({fill: \"green\", shape: \"ring\", text: orderid});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 1920,
        "wires": [
            [
                "8c2b136a.c18c"
            ]
        ],
        "inputLabels": [
            "orderid"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "node-red-contrib-binance/binance.png"
    },
    {
        "id": "bf190e9d.225ad",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "b5c4460e3abcebce",
        "name": "",
        "links": [
            "f83aa4a.5b36658"
        ],
        "x": 995,
        "y": 1880,
        "wires": []
    },
    {
        "id": "20e930bc4e51c612",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "",
        "url": "/botslist",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2650,
        "y": 1160,
        "wires": [
            [
                "250d741d8a5745e6",
                "7bd59516ab8d154d"
            ]
        ]
    },
    {
        "id": "b36749c7a3e1b3d0",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3820,
        "y": 1160,
        "wires": []
    },
    {
        "id": "250d741d8a5745e6",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "getbotlist",
        "func": "\n\nlet guid = global.get('guid');\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = JSON.parse(gbl);\n    \n\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    \n\n    node.status({fill:\"red\",shape:\"dot\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2820,
        "y": 1160,
        "wires": [
            [
                "f33e9568474183b7",
                "de1dca5dd6ed3d50"
            ]
        ]
    },
    {
        "id": "b4a4e83ed0643f2c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "calculate indicators",
        "func": "let guid = global.get('guid');\n\n// $botlist[$key][2] = round(($botfinance[\"depo\"] - $botfinance[\"startdepo\"]), $botsettings[\"digitprice\"]); //прибыль/просадка\n// let a = msg.bot.finance.depo - msg.bot.finance.startdepo;\n\n\n\n//foreach($botsalesday as $keyq => $valueq) {\n//    $salessum = $salessum + $valueq[5];\n//    //    echo $value[5].\"<br>\";\n//}\n////echo $salessum.\"<br>------<br>\";\n//$botlist[$key][0] = $botsettings[\"isrunning\"];\n//$botlist[$key][2] = round(($botfinance[\"depo\"] - $botfinance[\"startdepo\"]), $botsettings[\"digitprice\"]); //прибыль/просадка\n//$botlist[$key][3] = round(($botfinance[\"depo\"] / $botfinance[\"startdepo\"] * 100 - 100), 2); //в процентах от стартового депо\n//$botlist[$key][4] = round($salessum, $botsettings[\"digitprice\"]);\n//$botlist[$key][5] = round(($salessum / $botfinance[\"startdepo\"] * 100), 2);\n//$botlist[$key][6] = round($botfinance[\"startdepo\"], $botsettings[\"digitprice\"]);\n//$botlist[$key][7] = round($botfinance[\"depo\"], $botsettings[\"digitprice\"]);\n//$procvlozh = (($botfinance[\"basenal\"] + $botfinance[\"baseinorders\"]) / $botfinance[\"startdepo\"]) * 100;\n//$botlist[$key][9] = round($procvlozh, 0); //сколько бабок вложено? в процентах от старового депо\n//$vlozh = ($botfinance[\"basenal\"] + $botfinance[\"baseinorders\"]);\n//$botlist[$key][10] = round($vlozh, 0); //сколько бабок вложено? в валюте от старового депо\n\n\nlet salessum = 0;\nmsg.bot.sales.today.forEach(function (item, i, floors) {\n\n  \n        salessum = Number(salessum) + Number(item[5]);\n\n\n   \n});\n\nmsg.botname = msg.payload;\nlet key0 = global.get(msg.botname+\"-onoff\");\nlet key2 = Number((msg.bot.finance.depo - msg.bot.finance.startdepo).toFixed(msg.bot.settings.digitprice));\nlet key3 = Number((msg.bot.finance.depo / msg.bot.finance.startdepo * 100 - 100).toFixed(2));\nlet key4 = Number((salessum).toFixed(msg.bot.settings.digitprice));\nlet key5 = Number((salessum / msg.bot.finance.startdepo * 100).toFixed(2));\nlet key6 =  Number(msg.bot.finance.startdepo);\nlet key7 = Number(msg.bot.finance.depo);\nlet procvlozh = Number(Number(msg.bot.finance.basenal) + Number(msg.bot.finance.baseinorders)) / Number(msg.bot.finance.startdepo) * 100;\nlet key9 = Number(procvlozh.toFixed(2));\nlet key10 = Number((Number(msg.bot.finance.basenal) + Number(msg.bot.finance.baseinorders)).toFixed(2));\nmsg.payload = [key0, msg.payload, key2, key3, key4, key5, key6, key7, guid, key9, key10];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3470,
        "y": 1160,
        "wires": [
            [
                "577c5da19353e540"
            ]
        ]
    },
    {
        "id": "f33e9568474183b7",
        "type": "split",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2970,
        "y": 1160,
        "wires": [
            [
                "bf1c13c6979ef555"
            ]
        ]
    },
    {
        "id": "577c5da19353e540",
        "type": "join",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 3650,
        "y": 1160,
        "wires": [
            [
                "b36749c7a3e1b3d0",
                "e8c7019d4c4acba1"
            ]
        ]
    },
    {
        "id": "12956f0cc39cecca",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "getbot_start_set",
        "func": "\nlet botname = msg.payload.botname;\n\nconst gb = global.get('getbot_start_set')(botname);\n\ngb.then(gb => {\nnode.warn(gb);\n    msg.payload = gb;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2880,
        "y": 1700,
        "wires": [
            [
                "5944b81ec7e464fc"
            ]
        ]
    },
    {
        "id": "11a4d1c2a44c2e16",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3150,
        "y": 1760,
        "wires": [
            []
        ]
    },
    {
        "id": "afd3deeae4d81bc8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "prepare data for create bot",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":data\";\n\nlet botdata = {\n    \"finance\":JSON.stringify(msg.payload.finance),\n    \"floors\":JSON.stringify(msg.payload.floors),\n    \"sales\":JSON.stringify(msg.payload.sales)\n    \n};\nmsg.payload = botdata;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2920,
        "y": 1760,
        "wires": [
            [
                "11a4d1c2a44c2e16"
            ]
        ]
    },
    {
        "id": "f1795e2079ad790a",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "prepare for add bot status",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":status\";\nmsg.payload.status.updated = new Date().getTime();\nmsg.payload = JSON.stringify(msg.payload.status);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 1820,
        "wires": [
            [
                "e54f6abd7ef3a04a"
            ]
        ]
    },
    {
        "id": "e54f6abd7ef3a04a",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3130,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "a2fba486886cf22e",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "prepare for add bot settings",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":settings\";\n\nmsg.payload = JSON.stringify(msg.payload.settings);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2920,
        "y": 1880,
        "wires": [
            [
                "b8a5c62032bf8a3a"
            ]
        ]
    },
    {
        "id": "b8a5c62032bf8a3a",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3150,
        "y": 1880,
        "wires": [
            []
        ]
    },
    {
        "id": "43efea3d8f426bec",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "prepare for add bot ttp",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":ttp\";\n\nmsg.payload = JSON.stringify(msg.payload.ttp);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2900,
        "y": 1940,
        "wires": [
            [
                "2c8bdda9aab7d259"
            ]
        ]
    },
    {
        "id": "2c8bdda9aab7d259",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3110,
        "y": 1940,
        "wires": [
            []
        ]
    },
    {
        "id": "aff96d6cd010b51b",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "prepare for add bot busy",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":busy\";\n\nmsg.payload = \"false\";\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 2000,
        "wires": [
            [
                "a96ba302000af312"
            ]
        ]
    },
    {
        "id": "a96ba302000af312",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3130,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "5944b81ec7e464fc",
        "type": "json",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 3050,
        "y": 1700,
        "wires": [
            [
                "afd3deeae4d81bc8",
                "f1795e2079ad790a",
                "a2fba486886cf22e",
                "43efea3d8f426bec",
                "aff96d6cd010b51b",
                "bb31b6f014975fd6",
                "26f6329ebf714e14",
                "48599bd8f32987bc",
                "ff9752e81f4c15f8"
            ]
        ]
    },
    {
        "id": "7cb62ba82bd10479",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "",
        "url": "/bot_reset",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2660,
        "y": 1700,
        "wires": [
            [
                "a968529fa548aff7",
                "12956f0cc39cecca",
                "8aa6fd668c527afd"
            ]
        ]
    },
    {
        "id": "a968529fa548aff7",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2680,
        "y": 1760,
        "wires": []
    },
    {
        "id": "f3d9f7caf8eb7213",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "LINKUPUSDT-1627480656",
        "payloadType": "str",
        "x": 2650,
        "y": 1640,
        "wires": [
            [
                "12956f0cc39cecca"
            ]
        ]
    },
    {
        "id": "bb31b6f014975fd6",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "tilog",
        "func": "let botname = msg.payload.settings.botname;\nlet data = \"Сброс к стартовым настройкам\";\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 2180,
        "wires": [
            [
                "f2d22858e4a7c429"
            ]
        ]
    },
    {
        "id": "f2d22858e4a7c429",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "syslog",
        "func": "let botname = \"syslog.txt\";\nlet data = \"Сброс к стартовым настройкам \"+msg.payload.settings.botname;\nconst tilog = global.get('tilog')(botname,data);\n\ntilog.then(tilog => {\n\n\n        node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n     \n    \n\n}).catch(error => {\n    \n    msg.error = error;\n    node.status({fill:\"red\",shape: \"ring\"});\n    \n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 2990,
        "y": 2180,
        "wires": [
            []
        ]
    },
    {
        "id": "21cd38c62816a61a",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "g": "f6ba3116da1e0f10",
        "name": "",
        "url": "/bot_delete",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2660,
        "y": 260,
        "wires": [
            [
                "bc33c7343d313967",
                "4459c9f4d6a83a36"
            ]
        ]
    },
    {
        "id": "bc33c7343d313967",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "g": "f6ba3116da1e0f10",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2680,
        "y": 320,
        "wires": []
    },
    {
        "id": "01ec9d5a0db3072d",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "g": "7f9b2dd857a6dfb2",
        "name": "",
        "url": "/bot_full",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2650,
        "y": 1280,
        "wires": [
            [
                "617b3f35705cc9e4"
            ]
        ]
    },
    {
        "id": "617b3f35705cc9e4",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "7f9b2dd857a6dfb2",
        "name": "getbot_status",
        "func": "\n\nlet bot = {};\nmsg.bot = bot;\nlet botname = msg.payload.botname;\n\nconst gb = global.get('getbot_status')(botname);\n\ngb.then(gb => {\n    \n    msg.bot.status = JSON.parse(gb);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2840,
        "y": 1280,
        "wires": [
            [
                "792187aede59b6ac"
            ]
        ]
    },
    {
        "id": "a79a0e925695b95b",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "g": "7f9b2dd857a6dfb2",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3380,
        "y": 1280,
        "wires": []
    },
    {
        "id": "47e93aedcfbe3a73",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "7f9b2dd857a6dfb2",
        "name": "prepare data",
        "func": "msg.payload = msg.bot;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 1280,
        "wires": [
            [
                "a79a0e925695b95b"
            ]
        ]
    },
    {
        "id": "792187aede59b6ac",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "7f9b2dd857a6dfb2",
        "name": "getbot_data",
        "func": "\nlet botname = msg.payload.botname;\n\nconst gb = global.get('getbot_data')(botname);\n\ngb.then(gb => {\n    //node.warn(gb);\n    let bot = {...msg.bot,\n        \"floors\":JSON.parse(gb.floors),\n        \"finance\":JSON.parse(gb.finance),\n        \"sales\":JSON.parse(gb.sales)\n    };\n    msg.bot = bot;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3030,
        "y": 1280,
        "wires": [
            [
                "47e93aedcfbe3a73"
            ]
        ]
    },
    {
        "id": "25e6c65f2f6568ee",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "name": "",
        "url": "/botcreate",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2660,
        "y": 640,
        "wires": [
            [
                "d252aac0e03336f6",
                "cac2d5e9466e8f59",
                "68c731b8655af003",
                "3c54d00c2b5d1331",
                "f934e581f21edc8d",
                "ce20d0a5a42d71b8",
                "1e7fa667be4955e4",
                "68f426595975577a",
                "f4dd7d500c4c6287",
                "1b0a7ba8e33f06b7",
                "942efac949d8330c"
            ]
        ]
    },
    {
        "id": "8e32192ecced4af9",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3150,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "d252aac0e03336f6",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "name": "prepare data for create bot",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":data\";\nlet botdata = {\"finance\":msg.payload.finance,\"floors\":msg.payload.floors,\"sales\":msg.payload.sales};\nglobal.set(msg.payload.botname + \"-data\", botdata);\nmsg.payload = botdata;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2920,
        "y": 640,
        "wires": [
            [
                "8e32192ecced4af9"
            ]
        ]
    },
    {
        "id": "cac2d5e9466e8f59",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "name": "prepare for get botlist",
        "func": "msg.botlistname = msg.payload.user_id_from_google+\"-botlist\";\nmsg.botname = msg.payload.botname;\nmsg.payload = msg.payload.user_id_from_google;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2900,
        "y": 700,
        "wires": [
            [
                "46931deb362dccab"
            ]
        ]
    },
    {
        "id": "46931deb362dccab",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "name": "getbotlist",
        "func": "\nlet guid = msg.payload;\n\nconst gbl = global.get('getbotlist')(guid);\n\ngbl.then(gbl => {\n    \n    msg.payload = JSON.parse(gbl);\n    node.status({fill:\"green\",shape:\"dot\"});\n    node.send(msg);\n\n}).catch(error => {\n    node.status({fill:\"red\",shape:\"dot\"});\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3100,
        "y": 700,
        "wires": [
            [
                "eb94008bbe99e1a5"
            ]
        ]
    },
    {
        "id": "eb94008bbe99e1a5",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "name": "prepare for add botlist",
        "func": "msg.topic = msg.botlistname;\n\nlet newbotlist = [];\nif (msg.payload == null) {\n    newbotlist = [msg.botname];\n} else {\n    let oldbotlist = msg.payload;\n    newbotlist = [...oldbotlist,msg.botname];\n    }\nglobal.set('botlist', newbotlist);\nmsg.payload = JSON.stringify(newbotlist);\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3300,
        "y": 700,
        "wires": [
            [
                "fc532f8a3c02ad09"
            ]
        ]
    },
    {
        "id": "fc532f8a3c02ad09",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3510,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "68c731b8655af003",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2680,
        "y": 700,
        "wires": []
    },
    {
        "id": "3c54d00c2b5d1331",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "name": "prepare for add bot status",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":status\";\nmsg.payload.status.updated = new Date().getTime();\nglobal.set(msg.payload.botname + \"-status\", msg.payload.status);\nmsg.payload = msg.payload.status;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 760,
        "wires": [
            [
                "9ed4d5038250d1db"
            ]
        ]
    },
    {
        "id": "9ed4d5038250d1db",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3130,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "f934e581f21edc8d",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "name": "prepare for add bot settings",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":settings\";\nglobal.set(msg.payload.botname + \"-settings\", msg.payload.settings);\nmsg.payload = msg.payload.settings;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2920,
        "y": 820,
        "wires": [
            [
                "2a35df248651359d"
            ]
        ]
    },
    {
        "id": "2a35df248651359d",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3150,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "ce20d0a5a42d71b8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "name": "prepare for add bot ttp",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":ttp\";\n\n\nglobal.set(msg.payload.botname + \"-ttp\", msg.payload.ttp);\nmsg.payload = msg.payload.ttp;\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2900,
        "y": 880,
        "wires": [
            [
                "16f60c9e05c72bee"
            ]
        ]
    },
    {
        "id": "16f60c9e05c72bee",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3110,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "1e7fa667be4955e4",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "name": "prepare for add bot onoff",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":onoff\";\nglobal.set(msg.payload.botname + \"-onoff\", msg.payload.onoff);\n\nmsg.payload = JSON.stringify(msg.payload.onoff);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 940,
        "wires": [
            [
                "c9f367c4c3c3a340"
            ]
        ]
    },
    {
        "id": "c9f367c4c3c3a340",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3110,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "68f426595975577a",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "name": "prepare for add bot busy",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":busy\";\nglobal.set(msg.payload.botname + \"-busy\", msg.payload.busy);\n\nmsg.payload = JSON.stringify(msg.payload.busy);\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 1000,
        "wires": [
            [
                "880c05f45c81c65f"
            ]
        ]
    },
    {
        "id": "880c05f45c81c65f",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3130,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "f4dd7d500c4c6287",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "name": "prepare for start_set",
        "func": "msg.topic = msg.payload.user_id_from_google+\"-bots:\"+msg.payload.botname+\":start_set\";\n\nmsg.payload = msg.payload.start_set;\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2900,
        "y": 1060,
        "wires": [
            [
                "e5b3f65c64087091"
            ]
        ]
    },
    {
        "id": "e5b3f65c64087091",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3130,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "f0645618c2050fce",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a6e4d859c0057b6f",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2090,
        "y": 1780,
        "wires": [
            [
                "565eaf27c4c6892e"
            ]
        ]
    },
    {
        "id": "565eaf27c4c6892e",
        "type": "redis-out",
        "z": "5f98db3a.7ab21c",
        "g": "a6e4d859c0057b6f",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 2090,
        "y": 1820,
        "wires": []
    },
    {
        "id": "e430451f890fe527",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a6e4d859c0057b6f",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1670,
        "y": 1780,
        "wires": [
            [
                "a4c3cc7bc8fa2565"
            ]
        ]
    },
    {
        "id": "a4c3cc7bc8fa2565",
        "type": "redis-out",
        "z": "5f98db3a.7ab21c",
        "g": "a6e4d859c0057b6f",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 1670,
        "y": 1820,
        "wires": []
    },
    {
        "id": "519959ee89f04190",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "a6e4d859c0057b6f",
        "name": "start1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1850,
        "y": 1780,
        "wires": [
            [
                "d952c932bb5874af"
            ]
        ]
    },
    {
        "id": "d952c932bb5874af",
        "type": "redis-out",
        "z": "5f98db3a.7ab21c",
        "g": "a6e4d859c0057b6f",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "start1",
        "obj": false,
        "x": 1850,
        "y": 1820,
        "wires": []
    },
    {
        "id": "c4cf96930d013efb",
        "type": "redis-instance",
        "z": "5f98db3a.7ab21c",
        "g": "a6e4d859c0057b6f",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 2290,
        "y": 1800,
        "wires": []
    },
    {
        "id": "26f6329ebf714e14",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "prepare for add ttp busy",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":ttpbusy\";\n\nmsg.payload = \"false\";\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2910,
        "y": 2060,
        "wires": [
            [
                "9f0a5643b5b416e8"
            ]
        ]
    },
    {
        "id": "9f0a5643b5b416e8",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3130,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "56c6a73caae35c2f",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "set stop sell order",
        "func": "\nfunction parseApiError(error) {\n  if (error.body) {\n    try {\n      var resp = JSON.parse(error.body);\n      return resp.msg;\n    } catch (error) {/* pass thru */ }\n  }\n  return \"Unknown error. Status code: \" + error.statsCode;\n}\n\nlet LBinance = global.get('gBinance');\n//let key = global.get('key');\n//let secret = global.get('secret');\nlet key = env.get(\"BINANCEKEY\");\nlet secret = env.get(\"BINANCESECRET\");\n\nlet binance = new LBinance().options({\n  APIKEY: key,\n  APISECRET: secret,\n  reconnect: false,\n  useServerTime: true\n});\n\nlet moneta = msg.payload.moneta;\nlet quantity = msg.payload.quantity;\nlet priceb = msg.payload.priceb;\nlet stopprice = msg.payload.stopprice;\n\nbinance.useServerTime(function () {\n  binance.sell(moneta, quantity, priceb, { stopPrice: stopprice, type: \"STOP_LOSS_LIMIT\" }, function (err, resp) {\n    if (err) {\n      var errorMsg = parseApiError(err);\n      msg.err = err;\n      node.error(errorMsg, msg);\n      node.status({ fill: \"red\", shape: \"ring\", text: errorMsg });\n      node.send(msg);\n\n    }\n    if (resp) {\n      //msg.bot.ttp.curorderid = resp.orderId;\n      resp.curstop = stopprice;\n      //msg.bot.ttp.quantity = quantity;\n      msg.resp = resp;\n      node.status({ fill: \"green\", shape: \"ring\" });\n      node.send(msg);\n    }\n \n  })\n\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 1040,
        "wires": [
            [
                "f5c3922ede7ca10e"
            ]
        ],
        "inputLabels": [
            "orderid, moneta"
        ],
        "outputLabels": [
            "status"
        ],
        "icon": "font-awesome/fa-compress"
    },
    {
        "id": "f5c3922ede7ca10e",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.payload.statusCode = \"not ok\";\n    msg.payload.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.payload.statusCode = \"ok\";\n    msg.payload.statusBody = msg.resp;\n    //msg.payload.bot = msg.bot;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1040,
        "wires": [
            [
                "11245d07d29c58d7",
                "904948d9b141e76a"
            ],
            [
                "f873485fa819703f",
                "c51f492683bd478b"
            ]
        ]
    },
    {
        "id": "11245d07d29c58d7",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 1935,
        "y": 1020,
        "wires": []
    },
    {
        "id": "f873485fa819703f",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 1935,
        "y": 1060,
        "wires": []
    },
    {
        "id": "904948d9b141e76a",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 1020,
        "wires": []
    },
    {
        "id": "c51f492683bd478b",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 1060,
        "wires": []
    },
    {
        "id": "04c874ce359ca023",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "g": "d508da9d29e25c1b",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 690,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "e99da6578187f6b1",
        "type": "rbe",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 420,
        "y": 1200,
        "wires": [
            [
                "ac3992bd.d4dd5"
            ]
        ]
    },
    {
        "id": "bf1c13c6979ef555",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "getbot_data",
        "func": "msg.bot = {};\nlet botname = msg.payload;\n\nconst gb = global.get('getbot_data')(botname);\n\n\ngb.then(gb => {\n    //node.warn(gb);\n    let floors = JSON.parse(gb.floors);\n    let finance = JSON.parse(gb.finance);\n    let sales = JSON.parse(gb.sales);\n    let bot = {\n        \"floors\": floors,\n        \"finance\": finance,\n        \"sales\": sales\n    };\n    msg.bot = bot;\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3110,
        "y": 1160,
        "wires": [
            [
                "d3749cac89a0e2c9"
            ]
        ]
    },
    {
        "id": "d3749cac89a0e2c9",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "1af578fa0e07ad5a",
        "name": "getbot_settings",
        "func": "\n\n\nconst gb = global.get('getbot_settings')(msg.payload);\n\ngb.then(gb => {\n    \n    msg.bot.settings = JSON.parse(gb);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3280,
        "y": 1160,
        "wires": [
            [
                "b4a4e83ed0643f2c"
            ]
        ]
    },
    {
        "id": "7669643f6654329b",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "url": "/bot_settings",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2670,
        "y": 1380,
        "wires": [
            [
                "62dad41be283ec5d"
            ]
        ]
    },
    {
        "id": "ef2d9f7d62da9638",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3260,
        "y": 1380,
        "wires": []
    },
    {
        "id": "62dad41be283ec5d",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "getbot_settings",
        "func": "\nconst gb = global.get('getbot_settings')(msg.payload.botname);\n\ngb.then(gb => {\n    \n    msg.payload = JSON.parse(gb);\n    node.send(msg);\n\n}).catch(error => {\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2860,
        "y": 1380,
        "wires": [
            [
                "ef2d9f7d62da9638"
            ]
        ]
    },
    {
        "id": "6edabced39e8ae30",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "g": "2c85add4d80ea7f8",
        "name": "",
        "url": "/bot_onoff",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2660,
        "y": 1520,
        "wires": [
            [
                "f2b2077b7903a0bf"
            ]
        ]
    },
    {
        "id": "0f71f73828a4d664",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "g": "2c85add4d80ea7f8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3020,
        "y": 1520,
        "wires": []
    },
    {
        "id": "f2b2077b7903a0bf",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "2c85add4d80ea7f8",
        "name": "getbot_onoff",
        "func": "\nmsg.payload = JSON.stringify(global.get(msg.payload.botname + \"-onoff\"));\n\n\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2850,
        "y": 1520,
        "wires": [
            [
                "0f71f73828a4d664"
            ]
        ]
    },
    {
        "id": "0c245c89ee18c959",
        "type": "catch",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "scope": [
            "241d62c4.835d6e"
        ],
        "uncaught": false,
        "x": 1370,
        "y": 820,
        "wires": [
            [
                "d82e020b5a4a47a5"
            ]
        ]
    },
    {
        "id": "d82e020b5a4a47a5",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 820,
        "wires": []
    },
    {
        "id": "c8becf6bb0419135",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "обработчик ошибок",
        "func": "if (msg.err) {\n    msg.payload.statusCode = \"not ok\";\n    msg.payload.statusBody = msg.err.body;\n    //node.warn(msg.err.statusCode)\n    \n\n    \n    \n    return [null,msg];\n} else {\n    msg.payload.statusCode = \"ok\";\n    msg.payload.statusBody = msg.resp;\n    //msg.payload.bot = msg.bot;\n    return [msg,null];\n}\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1720,
        "y": 1120,
        "wires": [
            [
                "0ba1f4d05ad6d76a"
            ],
            [
                "6250c3310b6d177b"
            ]
        ]
    },
    {
        "id": "0ba1f4d05ad6d76a",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 1935,
        "y": 1100,
        "wires": []
    },
    {
        "id": "6250c3310b6d177b",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "links": [
            "5a624a9b.734534",
            "17bad0f2.7af38f"
        ],
        "x": 1935,
        "y": 1140,
        "wires": []
    },
    {
        "id": "e8c7019d4c4acba1",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3970,
        "y": 1160,
        "wires": []
    },
    {
        "id": "8d14f5fc3845adff",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "54197cf454887ecb",
        "name": "getprice()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet getprice = function (moneta = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = \"prices:\"+moneta;\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getprice', getprice);",
        "finalize": "",
        "x": 320,
        "y": 140,
        "wires": [
            [
                "a0695b5f57215c9a"
            ]
        ]
    },
    {
        "id": "6a1466a03b9d3d55",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "54197cf454887ecb",
        "name": "moneta",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "8d14f5fc3845adff"
            ]
        ]
    },
    {
        "id": "a0695b5f57215c9a",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "54197cf454887ecb",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get price",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 480,
        "y": 140,
        "wires": [
            [
                "5c90fc22745f5191"
            ]
        ]
    },
    {
        "id": "5c90fc22745f5191",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "54197cf454887ecb",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 760,
        "y": 140,
        "wires": []
    },
    {
        "id": "91002369b1074d75",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "getbot_status()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = env.get(\"GOOGLEUID\");\nlet getbot_status = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":status\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_status', getbot_status);",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 280,
        "wires": [
            [
                "3cbc407f58d45bb0"
            ]
        ]
    },
    {
        "id": "54bc231adc5891e5",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 160,
        "y": 280,
        "wires": [
            [
                "91002369b1074d75"
            ]
        ]
    },
    {
        "id": "38c8c689cb5c0e28",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 280,
        "wires": []
    },
    {
        "id": "85a473180350d074",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "getbotlist()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet getbotlist = function (guid = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-botlist\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbotlist', getbotlist);",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 220,
        "wires": [
            [
                "cc432a8e0784b0f9"
            ]
        ]
    },
    {
        "id": "caa36ec009038d1a",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "guid",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "85a473180350d074"
            ]
        ]
    },
    {
        "id": "cc432a8e0784b0f9",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get botlist",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 480,
        "y": 220,
        "wires": [
            [
                "2e7a67404d21442a"
            ]
        ]
    },
    {
        "id": "2e7a67404d21442a",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 220,
        "wires": []
    },
    {
        "id": "3cbc407f58d45bb0",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot status",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 540,
        "y": 280,
        "wires": [
            [
                "38c8c689cb5c0e28"
            ]
        ]
    },
    {
        "id": "5b61de68b494bd33",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "getbot_settings()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = env.get(\"GOOGLEUID\");\n\nlet getbot_settings = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":settings\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_settings', getbot_settings);",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 340,
        "wires": [
            [
                "33d2dd1688f92679"
            ]
        ]
    },
    {
        "id": "a2ef331bd08c5903",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 160,
        "y": 340,
        "wires": [
            [
                "5b61de68b494bd33"
            ]
        ]
    },
    {
        "id": "ebd3770efa8b27af",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 740,
        "y": 340,
        "wires": []
    },
    {
        "id": "33d2dd1688f92679",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot settings",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 560,
        "y": 340,
        "wires": [
            [
                "ebd3770efa8b27af"
            ]
        ]
    },
    {
        "id": "b58eea72b93f13de",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "getbot_ttp()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = env.get(\"GOOGLEUID\");\nlet getbot_ttp = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":ttp\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_ttp', getbot_ttp);",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 400,
        "wires": [
            [
                "f8e441b5bf25d02b"
            ]
        ]
    },
    {
        "id": "681d5081aa7276f4",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 160,
        "y": 400,
        "wires": [
            [
                "b58eea72b93f13de"
            ]
        ]
    },
    {
        "id": "2d034a3b4969d69c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 700,
        "y": 400,
        "wires": []
    },
    {
        "id": "f8e441b5bf25d02b",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot ttp",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 400,
        "wires": [
            [
                "2d034a3b4969d69c"
            ]
        ]
    },
    {
        "id": "e9fba05140f9c559",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "getbot_onoff()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = env.get(\"GOOGLEUID\");\nlet getbot_onoff = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":onoff\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_onoff', getbot_onoff);",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 580,
        "wires": [
            [
                "806473f046ac801f"
            ]
        ]
    },
    {
        "id": "68780f4ed6394507",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 160,
        "y": 580,
        "wires": [
            [
                "e9fba05140f9c559"
            ]
        ]
    },
    {
        "id": "49e45671dc6dde59",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 760,
        "y": 580,
        "wires": []
    },
    {
        "id": "806473f046ac801f",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot onoff",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 530,
        "y": 580,
        "wires": [
            [
                "49e45671dc6dde59"
            ]
        ]
    },
    {
        "id": "562ff39eb84e69fd",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "setbotlist()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\n// Code added here will be run once\n// whenever the node is deployed.\nlet setbotlist = function (guid = msg.payload.guid, botlist = msg.payload.botlist) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-botlist\";\n    msg.payload = botlist;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbotlist', setbotlist);",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 220,
        "wires": [
            [
                "f8b6987bf7dab58f"
            ]
        ]
    },
    {
        "id": "b1df2d40528537c1",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "guid, botlist",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 1030,
        "y": 220,
        "wires": [
            [
                "562ff39eb84e69fd"
            ]
        ]
    },
    {
        "id": "fae5e5360b112e39",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 220,
        "wires": []
    },
    {
        "id": "f8b6987bf7dab58f",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "set botlist",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1380,
        "y": 220,
        "wires": [
            [
                "fae5e5360b112e39"
            ]
        ]
    },
    {
        "id": "0b70f554344ed103",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "setbot_status()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nlet setbot_status = function (botname = msg.topic, status = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = botname;\n    msg.payload = status;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_status', setbot_status);",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 280,
        "wires": [
            [
                "546128bed7ba8244"
            ]
        ]
    },
    {
        "id": "43ed2206ae8dbe66",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "botname, status",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 1040,
        "y": 280,
        "wires": [
            [
                "0b70f554344ed103"
            ]
        ]
    },
    {
        "id": "1a76aa7a7ff5c2e2",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 280,
        "wires": []
    },
    {
        "id": "546128bed7ba8244",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1430,
        "y": 280,
        "wires": [
            [
                "1a76aa7a7ff5c2e2"
            ]
        ]
    },
    {
        "id": "2f4c3485729e3440",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "getbot_data()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = env.get(\"GOOGLEUID\");\nlet getbot_data = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":data\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_data', getbot_data);",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 460,
        "wires": [
            [
                "2e77778de767d2d9"
            ]
        ]
    },
    {
        "id": "bd67d9792381b2eb",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 160,
        "y": 460,
        "wires": [
            [
                "2f4c3485729e3440"
            ]
        ]
    },
    {
        "id": "f9f577d0da59868f",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 720,
        "y": 460,
        "wires": []
    },
    {
        "id": "2e77778de767d2d9",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "server": "f120eab2.0a60a8",
        "command": "hgetall",
        "name": "",
        "topic": "",
        "params": "{}",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 460,
        "wires": [
            [
                "f9f577d0da59868f"
            ]
        ]
    },
    {
        "id": "a667c0dd847aa312",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "setbot_data()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = env.get(\"GOOGLEUID\");\nlet setbot_data = function (volname = msg.topic, data = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = volname;\n    msg.payload = data;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_data', setbot_data);",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 460,
        "wires": [
            [
                "9b5160469297046a"
            ]
        ]
    },
    {
        "id": "0f30e83273a11e5c",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 1020,
        "y": 460,
        "wires": [
            [
                "a667c0dd847aa312"
            ]
        ]
    },
    {
        "id": "4f05bd668da083ff",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 460,
        "wires": []
    },
    {
        "id": "9b5160469297046a",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1370,
        "y": 460,
        "wires": [
            [
                "4f05bd668da083ff"
            ]
        ]
    },
    {
        "id": "9cca35f02ce4d817",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "54197cf454887ecb",
        "name": "getbot_start_set()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = env.get(\"GOOGLEUID\");\nlet getbot_start_set = function (botname = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-bots:\"+botname+\":start_set\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getbot_start_set', getbot_start_set);",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "96bdef7048780d35"
            ]
        ]
    },
    {
        "id": "bfb1e76b54a7b1fb",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "54197cf454887ecb",
        "name": "botname",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "9cca35f02ce4d817"
            ]
        ]
    },
    {
        "id": "ddc7f34243674b87",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "54197cf454887ecb",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 760,
        "y": 100,
        "wires": []
    },
    {
        "id": "96bdef7048780d35",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "54197cf454887ecb",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "get bot starts_set",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 570,
        "y": 100,
        "wires": [
            [
                "ddc7f34243674b87"
            ]
        ]
    },
    {
        "id": "d7b39504af93e7f7",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "setbot_ttp()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nlet setbot_ttp = function (botname = msg.topic, ttp = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = botname;\n    msg.payload = ttp;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_ttp', setbot_ttp);",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 400,
        "wires": [
            [
                "2b18414b4a3f8aaa"
            ]
        ]
    },
    {
        "id": "5e752f84c84031eb",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "botname, ttp",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 1030,
        "y": 400,
        "wires": [
            [
                "d7b39504af93e7f7"
            ]
        ]
    },
    {
        "id": "6d62a92d5a53f020",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 400,
        "wires": []
    },
    {
        "id": "2b18414b4a3f8aaa",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1430,
        "y": 400,
        "wires": [
            [
                "6d62a92d5a53f020"
            ]
        ]
    },
    {
        "id": "8aa6fd668c527afd",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2650,
        "y": 1820,
        "wires": []
    },
    {
        "id": "187dac154381e841",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "f6ba3116da1e0f10",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3490,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "4459c9f4d6a83a36",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "f6ba3116da1e0f10",
        "name": "prepare for get botlist",
        "func": "\nmsg.botlistname = msg.payload.user_id_from_google + \"-botlist\";\n\nmsg.botname = msg.payload.botname;\nmsg.payload = global.get(\"botlist\");\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2960,
        "y": 260,
        "wires": [
            [
                "869be0a90b76a3ef"
            ]
        ]
    },
    {
        "id": "869be0a90b76a3ef",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "f6ba3116da1e0f10",
        "name": "prepare for add botlist",
        "func": "\nlet botlist = msg.payload;\n\nbotlist = botlist.filter(val => val !== msg.botname);\nglobal.set(\"botlist\", botlist);\n\nmsg.topic = msg.botlistname;\nmsg.payload = JSON.stringify(botlist);\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3200,
        "y": 260,
        "wires": [
            [
                "187dac154381e841"
            ]
        ]
    },
    {
        "id": "0675cf14e1c40b79",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "guid, lead",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 1020,
        "y": 520,
        "wires": [
            [
                "52bb7aacce10da86"
            ]
        ]
    },
    {
        "id": "52bb7aacce10da86",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "setleads()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let guid = global.get('guid');\nlet setleads = function (leads = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = guid+\"-leads\";\n    msg.payload = JSON.stringify(leads);\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setleads', setleads);",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 520,
        "wires": [
            [
                "a598cf9306306929"
            ]
        ]
    },
    {
        "id": "a598cf9306306929",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1370,
        "y": 520,
        "wires": [
            [
                "477b9f3956393f39"
            ]
        ]
    },
    {
        "id": "477b9f3956393f39",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 520,
        "wires": []
    },
    {
        "id": "e1d84a73e7e74924",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "guid",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 150,
        "y": 520,
        "wires": [
            [
                "2969e077aef97f77"
            ]
        ]
    },
    {
        "id": "2969e077aef97f77",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "getleads()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "let getleads = function (guid = msg.payload.guid) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n    msg.topic = guid+\"-leads\";\n    msg.payload = [];\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('getleads', getleads);",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 520,
        "wires": [
            [
                "c4eb37e84cd37624"
            ]
        ]
    },
    {
        "id": "ad0d7275ea85d9e2",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 520,
        "wires": []
    },
    {
        "id": "c4eb37e84cd37624",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "server": "f120eab2.0a60a8",
        "command": "GET",
        "name": "",
        "topic": "msg.payload",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 550,
        "y": 520,
        "wires": [
            [
                "ad0d7275ea85d9e2"
            ]
        ]
    },
    {
        "id": "09fab8f34f7dea3e",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "tglead()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nlet tglead = function (posttg = msg.payload.posttg, guid = msg.payload.guid, typemsg = msg.payload.typemsg) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg = {};\n    msg.payload = {posttg, guid, typemsg};\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('tglead', tglead);",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 520,
        "wires": [
            [
                "76ef8aef545938d7"
            ]
        ]
    },
    {
        "id": "c291578025a7dac7",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "guid, lead",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 1720,
        "y": 520,
        "wires": [
            [
                "09fab8f34f7dea3e"
            ]
        ]
    },
    {
        "id": "76ef8aef545938d7",
        "type": "redis-out",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 2030,
        "y": 520,
        "wires": []
    },
    {
        "id": "3c769996e9026472",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "url": "/leads",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2640,
        "y": 540,
        "wires": [
            [
                "83b0f499b25cf021"
            ]
        ]
    },
    {
        "id": "934068b2b402b8c6",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3000,
        "y": 540,
        "wires": []
    },
    {
        "id": "83b0f499b25cf021",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "leads sum calc",
        "func": "\nlet guid = global.get('guid');\nlet leads = global.get(guid + \"-leads\");\nlet count, sr;\nif (leads){\ncount = leads.length;\n\nvar sum = 0;\nfor (var i = 0; i < leads.length; i++) {\n\n    let lead = leads[i];\n    //node.warn(lead);\n    sum = sum + lead.profit;\n\n}\n\nsr = sum / count;\n\n\nmsg.payload = {\n    \"count\" : count,\n    \"sum\": sum.toFixed(2),\n    \"sr\": sr.toFixed(2)\n}\n} else {\n    msg.payload = {\n        \"count\": 0,\n        \"sum\": 0,\n        \"sr\": 0\n    }\n}\n//node.warn(count + \"  \" + sum.toFixed(2) + \"  \" + sr.toFixed(2));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2820,
        "y": 540,
        "wires": [
            [
                "934068b2b402b8c6",
                "6667f23085c7329b"
            ]
        ]
    },
    {
        "id": "8421b42ef331902b",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "setbot_settings()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nlet setbot_settings = function (botname = msg.topic, settings = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = botname;\n    msg.payload = settings;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_settings', setbot_settings);",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 340,
        "wires": [
            [
                "796a325983588e67"
            ]
        ]
    },
    {
        "id": "2e12580400f01cb0",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "botname, settings",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 1050,
        "y": 340,
        "wires": [
            [
                "8421b42ef331902b"
            ]
        ]
    },
    {
        "id": "88be5d43e25bbab5",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 340,
        "wires": []
    },
    {
        "id": "796a325983588e67",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1430,
        "y": 340,
        "wires": [
            [
                "88be5d43e25bbab5"
            ]
        ]
    },
    {
        "id": "a1d26aa75b137aa5",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "setbot_onoff()",
        "func": "",
        "outputs": 1,
        "noerr": 0,
        "initialize": "\nlet setbot_onoff = function (botname = msg.topic, onoff = msg.payload) {\n    \n    let promise = new Promise((resolve, reject) => {\n        msg.resolve = resolve;\n        msg.reject = reject;\n    });\n    \n\n    msg.topic = botname;\n    msg.payload = onoff;\n\n    node.send(Object.assign({}, msg));\n    \n    return promise;\n};\n\nglobal.set('setbot_onoff', setbot_onoff);",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 580,
        "wires": [
            [
                "f2f3669acc5a1967"
            ]
        ]
    },
    {
        "id": "c16073e365380562",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "botname, onoff",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 1040,
        "y": 580,
        "wires": [
            [
                "a1d26aa75b137aa5"
            ]
        ]
    },
    {
        "id": "72a4bee8563f2952",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "name": "resolve",
        "func": "msg.resolve(msg.payload);\n\n// reject\n// setTimeout(function () {\n//     msg.reject({message: 'Could not request joke'});\n// }, 2000);",
        "outputs": "0",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 580,
        "wires": []
    },
    {
        "id": "f2f3669acc5a1967",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "048120318edbeca7",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1430,
        "y": 580,
        "wires": [
            [
                "72a4bee8563f2952"
            ]
        ]
    },
    {
        "id": "311b7e3067324369",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "2c85add4d80ea7f8",
        "name": "setbot_onoff",
        "func": "global.set(msg.botname + \"-onoff\", msg.payload);\n\nmsg.payload = \"ok\";\nreturn msg;\n//const gb = global.get('setbot_onoff')(msg.botname, JSON.stringify(msg.payload));\n//\n//gb.then(gb => {\n//    \n//    \n//\n//    node.warn(gb);\n//    node.status({fill:\"green\",shape:\"dot\"});\n//    \n//    node.send(msg);\n//\n//}).catch(error => {\n//    \n//\n//    node.status({fill:\"red\",shape:\"dot\"});\n//    \n//    node.error(error);\n//});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3070,
        "y": 1460,
        "wires": [
            [
                "a18bcf73d30443dd"
            ]
        ]
    },
    {
        "id": "602633b1b264725c",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "g": "2c85add4d80ea7f8",
        "name": "",
        "url": "/bot_onoff_togle",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2680,
        "y": 1460,
        "wires": [
            [
                "2499d9cd6bd8b55b"
            ]
        ]
    },
    {
        "id": "2499d9cd6bd8b55b",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "2c85add4d80ea7f8",
        "name": "getbot_onoff",
        "func": "msg.botname = msg.payload.botname;\nlet a = global.get(msg.payload.botname + \"-onoff\");\nmsg.payload = !a;\n\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2890,
        "y": 1460,
        "wires": [
            [
                "311b7e3067324369",
                "97ccdfbe8e296e18"
            ]
        ]
    },
    {
        "id": "a18bcf73d30443dd",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "g": "2c85add4d80ea7f8",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 3240,
        "y": 1460,
        "wires": []
    },
    {
        "id": "8e0737d647c2555e",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "url": "/bot_panic",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2500,
        "y": 420,
        "wires": [
            [
                "2242dddf10ab2255",
                "092cd0a90bdc1419"
            ]
        ]
    },
    {
        "id": "92a176463e4d7856",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3080,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "092cd0a90bdc1419",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2680,
        "y": 400,
        "wires": []
    },
    {
        "id": "2242dddf10ab2255",
        "type": "link out",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "links": [
            "5494eedc72f35966"
        ],
        "x": 2785,
        "y": 440,
        "wires": []
    },
    {
        "id": "e5cb5e61bab31688",
        "type": "link in",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "links": [
            "57340a5a1850b3b4"
        ],
        "x": 2955,
        "y": 440,
        "wires": [
            [
                "92a176463e4d7856"
            ]
        ]
    },
    {
        "id": "1f0c22ea70e7885f",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "PANIC",
        "info": "",
        "x": 2870,
        "y": 400,
        "wires": []
    },
    {
        "id": "48599bd8f32987bc",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "global reset",
        "func": "msg.bot ={};\nmsg.bot = {...msg.payload};\nmsg.botname = msg.bot.settings.botname;\nglobal.set(msg.botname + \"-status\", msg.bot.status);\nglobal.set(msg.botname + \"-settings\", msg.bot.settings);\nglobal.set(msg.botname + \"-ttp\", msg.bot.ttp);\nglobal.set(msg.botname + \"-onoff\", false);\nlet data = {\n    \"floors\": msg.bot.floors,\n    \"finance\": msg.bot.finance,\n    \"sales\": msg.bot.sales\n}\n//msg.bot.data = data;\nglobal.set(msg.botname + \"-data\", data);\n\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3230,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "6dae963bc9e9c94e",
        "type": "http in",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "url": "/signal",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 2330,
        "y": 2460,
        "wires": [
            [
                "57a288896225f3ee",
                "4e12f04757f68819"
            ]
        ]
    },
    {
        "id": "4e12f04757f68819",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2470,
        "y": 2360,
        "wires": []
    },
    {
        "id": "57a288896225f3ee",
        "type": "http response",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 2390,
        "y": 2500,
        "wires": []
    },
    {
        "id": "135777e9f6136854",
        "type": "redis-out",
        "z": "5f98db3a.7ab21c",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "panic",
        "obj": false,
        "x": 3110,
        "y": 2340,
        "wires": []
    },
    {
        "id": "9dd80243402cc9bb",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "panic",
        "func": "let botname = msg.payload.botname;\nmsg.payload = JSON.stringify(msg.payload);\nmsg.req = {};\nmsg.res = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3070,
        "y": 2380,
        "wires": [
            [
                "135777e9f6136854"
            ]
        ]
    },
    {
        "id": "f27f0fb47097d3dd",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "name": "payload.command",
        "property": "payload.command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PANICSALE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "START",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2830,
        "y": 2460,
        "wires": [
            [
                "7ee9ef4833d6922f",
                "9dd80243402cc9bb",
                "e69a39f0fa4fe4dc"
            ],
            [
                "1af3d4d71b2f54c5",
                "fc1a27ce4a89f680",
                "7e5de42e8ac67351",
                "e7b4cdbd032a3656"
            ]
        ]
    },
    {
        "id": "1af3d4d71b2f54c5",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "global.set(msg.payload.botname + \"-onoff\", true);",
        "func": "\nglobal.set(msg.payload.botname + \"-onoff\", true);\nnode.warn(\"start\" + msg.payload.botname);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3210,
        "y": 2540,
        "wires": [
            []
        ]
    },
    {
        "id": "7ee9ef4833d6922f",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2810,
        "y": 2380,
        "wires": []
    },
    {
        "id": "cf712dc002fbb012",
        "type": "redis-in",
        "z": "5f98db3a.7ab21c",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "panic",
        "obj": true,
        "timeout": 0,
        "x": 2490,
        "y": 480,
        "wires": [
            [
                "eec86198addde19f"
            ]
        ]
    },
    {
        "id": "eec86198addde19f",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2640,
        "y": 480,
        "wires": [
            [
                "2242dddf10ab2255"
            ]
        ]
    },
    {
        "id": "57a9fa24e8d0ddf6",
        "type": "rbe",
        "z": "5f98db3a.7ab21c",
        "d": true,
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload.command",
        "topi": "payload.botname",
        "x": 2650,
        "y": 2460,
        "wires": [
            [
                "f27f0fb47097d3dd"
            ]
        ]
    },
    {
        "id": "170e4ab8b38e5474",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "panic",
        "info": "",
        "x": 2990,
        "y": 2420,
        "wires": []
    },
    {
        "id": "4d8acaf459b5012d",
        "type": "comment",
        "z": "5f98db3a.7ab21c",
        "name": "start",
        "info": "",
        "x": 2990,
        "y": 2500,
        "wires": []
    },
    {
        "id": "860ad8b584c5e91c",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "global.set(msg.payload.inversebotname + \"-onoff\", true);",
        "func": "\nglobal.set(msg.payload.inversebotname + \"-onoff\", true);\nnode.warn(\"start\" + msg.payload.inversebotname);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3570,
        "y": 2380,
        "wires": [
            []
        ]
    },
    {
        "id": "e69a39f0fa4fe4dc",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "property": "payload.inversebotname",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3270,
        "y": 2380,
        "wires": [
            [
                "860ad8b584c5e91c",
                "3c9a9eb7e7d83d38"
            ]
        ]
    },
    {
        "id": "fc1a27ce4a89f680",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "property": "payload.inversebotname",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3270,
        "y": 2500,
        "wires": [
            [
                "e11551b5df281e5e"
            ]
        ]
    },
    {
        "id": "8d16d202959bdc9d",
        "type": "redis-out",
        "z": "5f98db3a.7ab21c",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "panic",
        "obj": false,
        "x": 3470,
        "y": 2460,
        "wires": []
    },
    {
        "id": "e11551b5df281e5e",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "panic inversebot",
        "func": "msg.payload.botname = msg.payload.inversebotname;\nmsg.payload = JSON.stringify(msg.payload);\nmsg.req = {};\nmsg.res = {};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3440,
        "y": 2500,
        "wires": [
            [
                "8d16d202959bdc9d"
            ]
        ]
    },
    {
        "id": "7e5de42e8ac67351",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2790,
        "y": 2560,
        "wires": []
    },
    {
        "id": "ff9752e81f4c15f8",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "name": "prepare for onoff ",
        "func": "msg.topic = msg.payload.settings.userid+\"-bots:\"+msg.payload.settings.botname+\":onoff\";\n\nmsg.payload = \"false\";\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2890,
        "y": 2120,
        "wires": [
            [
                "9767b09975ad71d4"
            ]
        ]
    },
    {
        "id": "9767b09975ad71d4",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "g": "f68e039ff73498a8",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3130,
        "y": 2120,
        "wires": [
            []
        ]
    },
    {
        "id": "e7b4cdbd032a3656",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "setbot_onoff",
        "func": "let guid = env.get(\"GOOGLEUID\");\n\nmsg.topic = guid + \"-bots:\" + msg.payload.botname + \":onoff\";\nmsg.payload = JSON.stringify(true);\n\nconst upd = global.get('setbot_status')(msg.topic, msg.payload);\n\nupd.then(upd => {\n    msg.payload = upd;\n    node.done();\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3090,
        "y": 2580,
        "wires": [
            []
        ]
    },
    {
        "id": "3c9a9eb7e7d83d38",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "setbot_onoff",
        "func": "let guid = env.get(\"GOOGLEUID\");\n\nmsg.topic = guid + \"-bots:\" + msg.payload.inversebotname + \":onoff\";\nmsg.payload = JSON.stringify(true);\n\nconst upd = global.get('setbot_status')(msg.topic, msg.payload);\n\nupd.then(upd => {\n    msg.payload = upd;\n    node.done();\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg);\n\n}).catch(error => {\n\n    node.status({ fill: \"red\", shape: \"dot\" });\n    node.error(error);\n});",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3430,
        "y": 2340,
        "wires": [
            []
        ]
    },
    {
        "id": "97ccdfbe8e296e18",
        "type": "function",
        "z": "5f98db3a.7ab21c",
        "name": "prepare for onoff ",
        "func": "let guid = env.get(\"GOOGLEUID\");\nmsg.topic = guid+\"-bots:\"+msg.botname+\":onoff\";\n\n\n\nnode.status({fill:\"green\",shape:\"dot\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3090,
        "y": 1420,
        "wires": [
            [
                "82762fd02e036236"
            ]
        ]
    },
    {
        "id": "82762fd02e036236",
        "type": "redis-command",
        "z": "5f98db3a.7ab21c",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 3330,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "6667f23085c7329b",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3020,
        "y": 500,
        "wires": []
    },
    {
        "id": "a5c9d9b0930d3bd1",
        "type": "inject",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "\"\"",
        "payloadType": "str",
        "x": 3640,
        "y": 1960,
        "wires": [
            [
                "cc8b0d6096dbaa36"
            ]
        ]
    },
    {
        "id": "cc8b0d6096dbaa36",
        "type": "switch",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "\"\"",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 3800,
        "y": 1980,
        "wires": [
            [
                "217eb8f564c9ad8e"
            ]
        ]
    },
    {
        "id": "217eb8f564c9ad8e",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4000,
        "y": 1980,
        "wires": []
    },
    {
        "id": "1b0a7ba8e33f06b7",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "a515f6f54037387e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3430,
        "y": 640,
        "wires": []
    },
    {
        "id": "7bd59516ab8d154d",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2830,
        "y": 1220,
        "wires": []
    },
    {
        "id": "de1dca5dd6ed3d50",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3030,
        "y": 1220,
        "wires": []
    },
    {
        "id": "942efac949d8330c",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2430,
        "y": 600,
        "wires": []
    },
    {
        "id": "c4cfc0830f4e28bc",
        "type": "debug",
        "z": "5f98db3a.7ab21c",
        "g": "014ce62956a26f95",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2030,
        "y": 860,
        "wires": []
    },
    {
        "id": "f9f707f3e3ee1879",
        "type": "function",
        "z": "e089622.6a906a",
        "name": "tgmsg",
        "func": "let tgmsg = \"tgmsg\";\n\nlet guid = global.get('guid');\nmsg = {};\nmsg.payload = {tgmsg, guid};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 180,
        "wires": [
            [
                "42f43b8b350b4a89"
            ]
        ]
    },
    {
        "id": "42f43b8b350b4a89",
        "type": "redis-out",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "x": 1550,
        "y": 180,
        "wires": []
    },
    {
        "id": "6cab3fbf6cc9c8d0",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1260,
        "y": 180,
        "wires": [
            [
                "f9f707f3e3ee1879"
            ]
        ]
    },
    {
        "id": "3912909e7d15aeea",
        "type": "redis-in",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "tgpost",
        "obj": true,
        "timeout": 0,
        "x": 1370,
        "y": 260,
        "wires": [
            [
                "dbd21a1037c898cc"
            ]
        ]
    },
    {
        "id": "dbd21a1037c898cc",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 260,
        "wires": []
    },
    {
        "id": "668b60dcda4a811a",
        "type": "http in",
        "z": "e089622.6a906a",
        "name": "",
        "url": "/testestaff",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1290,
        "y": 480,
        "wires": [
            [
                "873f0c5ee706ab49",
                "80fd42ef5314a37f"
            ]
        ]
    },
    {
        "id": "80fd42ef5314a37f",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 1470,
        "y": 520,
        "wires": []
    },
    {
        "id": "873f0c5ee706ab49",
        "type": "http response",
        "z": "e089622.6a906a",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1480,
        "y": 480,
        "wires": []
    },
    {
        "id": "56f2c76df4df787a",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sds",
        "payload": "dfdfdffd",
        "payloadType": "str",
        "x": 410,
        "y": 540,
        "wires": [
            [
                "2848333b867cb555"
            ]
        ]
    },
    {
        "id": "1283c96936ce87a1",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1040,
        "wires": []
    },
    {
        "id": "2848333b867cb555",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 500,
        "wires": []
    },
    {
        "id": "f9ec7a29.852b18",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "test",
        "payload": "",
        "payloadType": "date",
        "x": 1320,
        "y": 640,
        "wires": [
            [
                "8e6485b.fc3ce78"
            ]
        ]
    },
    {
        "id": "ccb84c90.3f15e",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 1550,
        "y": 680,
        "wires": []
    },
    {
        "id": "8e6485b.fc3ce78",
        "type": "function",
        "z": "e089622.6a906a",
        "name": "Status gated queue",
        "func": "\nvar MAX_DEPTH = 10;\n\n// if queue doesn't exist, create it\ncontext.queue = context.queue || [];\ncontext.pass = context.pass || false;\n\n// Use MQTT connected status to gate flow\nif (msg.hasOwnProperty(\"status\")) {\n    if (msg.status.text.indexOf(\".connected\") !== -1) { \n        setTimeout(function() { \n            while (context.queue.length > 0) {\n                var m = context.queue.shift();\n                node.send(m); \n            }\n            context.pass = true; \n            node.status({});\n        },5);\n    }\n    else { context.pass = false; }\n}\nelse {\n    if (context.pass) { return msg; }\n    else { \n        context.queue.push(msg); \n        if (context.queue.length > MAX_DEPTH) { context.queue.shift(); }\n        node.status({text:context.queue.length});\n    }\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 640,
        "wires": [
            [
                "ccb84c90.3f15e"
            ]
        ]
    },
    {
        "id": "147525f9.9ff5ba",
        "type": "status",
        "z": "e089622.6a906a",
        "name": "",
        "scope": [
            "d25c0e58.e75d7"
        ],
        "x": 1320,
        "y": 680,
        "wires": [
            [
                "8e6485b.fc3ce78"
            ]
        ]
    },
    {
        "id": "9687d976688c771c",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 740,
        "wires": []
    },
    {
        "id": "2ef865308c67f190",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 780,
        "wires": []
    },
    {
        "id": "cbe5dbacf68cdcdf",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2100,
        "y": 640,
        "wires": []
    },
    {
        "id": "f125afd0fa0c62da",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 620,
        "y": 1100,
        "wires": [
            [
                "ec9ea2de25ebbffb"
            ]
        ]
    },
    {
        "id": "ec9ea2de25ebbffb",
        "type": "redis-out",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "rpush",
        "name": "mainqu",
        "topic": "mainqu",
        "obj": true,
        "x": 860,
        "y": 1100,
        "wires": []
    },
    {
        "id": "417afb5d02255b05",
        "type": "redis-in",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "blpop",
        "name": "mainqu-c1",
        "topic": "mainqu",
        "obj": true,
        "timeout": "100",
        "x": 1120,
        "y": 1040,
        "wires": [
            [
                "1283c96936ce87a1"
            ]
        ]
    },
    {
        "id": "773d2fbeeece3470",
        "type": "redis-in",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "brpop",
        "name": "mainqu-c2",
        "topic": "mainqu",
        "obj": true,
        "timeout": "100",
        "x": 1120,
        "y": 1100,
        "wires": [
            [
                "4a36f330d291dcf3"
            ]
        ]
    },
    {
        "id": "4a36f330d291dcf3",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1100,
        "wires": []
    },
    {
        "id": "5bb746c1ce0d3c24",
        "type": "memqueue in",
        "z": "e089622.6a906a",
        "name": "",
        "queue": "30996d79e1bf9955",
        "x": 1240,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "f507d5de320dbcae",
        "type": "redis-command",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "PUBLISH",
        "name": "",
        "topic": "mainqu",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 810,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "31f1fcb.a6a4a04",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1110,
        "y": 1740,
        "wires": []
    },
    {
        "id": "80d063ee.78deb8",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 1740,
        "wires": [
            [
                "4cb7b20e.778d34"
            ]
        ]
    },
    {
        "id": "4cb7b20e.778d34",
        "type": "redis-out",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "rpush",
        "name": "",
        "topic": "test",
        "obj": false,
        "x": 870,
        "y": 1700,
        "wires": []
    },
    {
        "id": "902b8385.2fdd9",
        "type": "redis-in",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "blpop",
        "name": "",
        "topic": "test",
        "obj": false,
        "timeout": 0,
        "x": 870,
        "y": 1740,
        "wires": [
            [
                "31f1fcb.a6a4a04"
            ]
        ]
    },
    {
        "id": "6373a8a4.82bad",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"a\":1,\"b\":2}",
        "payloadType": "json",
        "x": 590,
        "y": 1700,
        "wires": [
            [
                "4cb7b20e.778d34"
            ]
        ]
    },
    {
        "id": "ba433622.8c6178",
        "type": "catch",
        "z": "e089622.6a906a",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 880,
        "y": 1640,
        "wires": [
            [
                "ec2978af.3e0458"
            ]
        ]
    },
    {
        "id": "ec2978af.3e0458",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1110,
        "y": 1640,
        "wires": []
    },
    {
        "id": "eccd31de.55e3a",
        "type": "redis-command",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "set",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 800,
        "y": 1860,
        "wires": [
            [
                "6ac31b1f.b393c4"
            ]
        ]
    },
    {
        "id": "46f5d0c0.8a7198",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[\"key\",\"value\"]",
        "payloadType": "json",
        "x": 590,
        "y": 1860,
        "wires": [
            [
                "eccd31de.55e3a"
            ]
        ]
    },
    {
        "id": "6ac31b1f.b393c4",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1090,
        "y": 1860,
        "wires": []
    },
    {
        "id": "9f960d71.749988",
        "type": "redis-command",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "getset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 810,
        "y": 1920,
        "wires": [
            [
                "7cef7ea5.dba3b"
            ]
        ]
    },
    {
        "id": "f16ad786.8b294",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "key",
        "payload": "[\"value\"]",
        "payloadType": "json",
        "x": 590,
        "y": 1920,
        "wires": [
            [
                "9f960d71.749988"
            ]
        ]
    },
    {
        "id": "7cef7ea5.dba3b",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1090,
        "y": 1920,
        "wires": []
    },
    {
        "id": "7e45a50c.240f7c",
        "type": "redis-command",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "hmset",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 810,
        "y": 2040,
        "wires": [
            [
                "122ff416.a56b8c"
            ]
        ]
    },
    {
        "id": "488a7f5b.a40628",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "myHash",
        "payload": "{\"a\":1,\"b\":2}",
        "payloadType": "json",
        "x": 610,
        "y": 2040,
        "wires": [
            [
                "7e45a50c.240f7c"
            ]
        ]
    },
    {
        "id": "122ff416.a56b8c",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1090,
        "y": 2040,
        "wires": []
    },
    {
        "id": "aff97bc7.84a578",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 570,
        "y": 2100,
        "wires": [
            [
                "1676f695.aa7189"
            ]
        ]
    },
    {
        "id": "2f4295b5.f78d42",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1090,
        "y": 2100,
        "wires": []
    },
    {
        "id": "1676f695.aa7189",
        "type": "redis-command",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "hgetall",
        "name": "",
        "topic": "myHash",
        "params": "{}",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 840,
        "y": 2100,
        "wires": [
            [
                "2f4295b5.f78d42"
            ]
        ]
    },
    {
        "id": "66098945.141118",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 570,
        "y": 2160,
        "wires": [
            [
                "e42d2b3b.6bb"
            ]
        ]
    },
    {
        "id": "e23fbe8.d7505c",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1090,
        "y": 2160,
        "wires": []
    },
    {
        "id": "e42d2b3b.6bb",
        "type": "redis-command",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "sadd",
        "name": "",
        "topic": "mySet",
        "params": "[\"memberA\",\"memberB\",\"memberC\"]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 830,
        "y": 2160,
        "wires": [
            [
                "e23fbe8.d7505c"
            ]
        ]
    },
    {
        "id": "2163c482.b8a244",
        "type": "redis-command",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "get",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 800,
        "y": 1980,
        "wires": [
            [
                "d2ea99d4.a4c51"
            ]
        ]
    },
    {
        "id": "b5f040ea.800be8",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "key",
        "payload": "[]",
        "payloadType": "json",
        "x": 570,
        "y": 1980,
        "wires": [
            [
                "2163c482.b8a244"
            ]
        ]
    },
    {
        "id": "d2ea99d4.a4c51",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1110,
        "y": 1980,
        "wires": []
    },
    {
        "id": "15f62858.26419",
        "type": "redis-lua-script",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "name": "test",
        "keyval": 0,
        "func": "local text = \"Hello World\"\nreturn text",
        "stored": true,
        "block": false,
        "x": 790,
        "y": 2280,
        "wires": [
            [
                "4a40fc2d.b70e2c"
            ]
        ]
    },
    {
        "id": "4f1fc69d.539ee",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 2280,
        "wires": [
            [
                "15f62858.26419"
            ]
        ]
    },
    {
        "id": "4a40fc2d.b70e2c",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1110,
        "y": 2280,
        "wires": []
    },
    {
        "id": "6ebb1fdf.2fce",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 570,
        "y": 2220,
        "wires": [
            [
                "5a3d77f4.920fd8"
            ]
        ]
    },
    {
        "id": "bac6944e.4e07",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1090,
        "y": 2220,
        "wires": []
    },
    {
        "id": "5a3d77f4.920fd8",
        "type": "redis-command",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "sismember",
        "name": "",
        "topic": "mySet",
        "params": "[\"memberA\"]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 850,
        "y": 2220,
        "wires": [
            [
                "bac6944e.4e07"
            ]
        ]
    },
    {
        "id": "c1c3a5a6.c289f",
        "type": "redis-lua-script",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "name": "test2",
        "keyval": 0,
        "func": "local text = \"Hello2222 World2222\"\nreturn text",
        "stored": false,
        "block": false,
        "x": 790,
        "y": 2340,
        "wires": [
            [
                "d8bd4107.683c08"
            ]
        ]
    },
    {
        "id": "9013d649.88c35",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 2340,
        "wires": [
            [
                "c1c3a5a6.c289f"
            ]
        ]
    },
    {
        "id": "d8bd4107.683c08",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1110,
        "y": 2340,
        "wires": []
    },
    {
        "id": "cb44db96.c64bb8",
        "type": "redis-in",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "psubscribe",
        "name": "",
        "topic": "TOPIC:*",
        "obj": false,
        "timeout": 0,
        "x": 880,
        "y": 1520,
        "wires": [
            [
                "78033f6c.31797"
            ]
        ]
    },
    {
        "id": "78033f6c.31797",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1110,
        "y": 1520,
        "wires": []
    },
    {
        "id": "dac5fcff.4c4cb",
        "type": "redis-in",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "subscribe",
        "name": "",
        "topic": "TOPIC:OK",
        "obj": false,
        "timeout": 0,
        "x": 880,
        "y": 1580,
        "wires": [
            [
                "6f01eb54.501e7c"
            ]
        ]
    },
    {
        "id": "6f01eb54.501e7c",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1110,
        "y": 1580,
        "wires": []
    },
    {
        "id": "e0d2924b.210708",
        "type": "redis-out",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "publish",
        "name": "",
        "topic": "TOPIC:OK",
        "obj": false,
        "x": 610,
        "y": 1640,
        "wires": []
    },
    {
        "id": "d1fc59dc.bd4958",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"a\":1,\"b\":2}",
        "payloadType": "json",
        "x": 590,
        "y": 1540,
        "wires": [
            [
                "e0d2924b.210708"
            ]
        ]
    },
    {
        "id": "3e05b777.781bd8",
        "type": "redis-command",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "command": "del",
        "name": "",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 800,
        "y": 2400,
        "wires": [
            [
                "fd036d2b.dc6d38"
            ]
        ]
    },
    {
        "id": "6924006.91553",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "key",
        "payload": "[]",
        "payloadType": "json",
        "x": 570,
        "y": 2400,
        "wires": [
            [
                "3e05b777.781bd8"
            ]
        ]
    },
    {
        "id": "fd036d2b.dc6d38",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1110,
        "y": 2400,
        "wires": []
    },
    {
        "id": "a13d2797.8a7ff",
        "type": "redis-instance",
        "z": "e089622.6a906a",
        "server": "f120eab2.0a60a8",
        "name": "",
        "topic": "redis",
        "location": "flow",
        "x": 1450,
        "y": 2340,
        "wires": []
    },
    {
        "id": "2a93e7ce.341078",
        "type": "inject",
        "z": "e089622.6a906a",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 560,
        "y": 2500,
        "wires": [
            [
                "d89709ef.fd9368"
            ]
        ]
    },
    {
        "id": "d89709ef.fd9368",
        "type": "function",
        "z": "e089622.6a906a",
        "name": "",
        "func": "let redis = context.flow.get('redis');\n\nredis.info().then((data)=>{\n    msg.payload = data\n    node.send(msg);\n})\n\n/*\nredis.call(\"anycmd\").then((data)=>{\n    msg.payload = data\n    node.send(msg);\n})*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 2500,
        "wires": [
            [
                "f2e9c3a0.8f181"
            ]
        ]
    },
    {
        "id": "f2e9c3a0.8f181",
        "type": "debug",
        "z": "e089622.6a906a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1110,
        "y": 2500,
        "wires": []
    }
]